// Code generated by MockGen. DO NOT EDIT.
// Source: /home/runner/go/pkg/mod/github.com/aws/aws-sdk-go@v1.55.5/service/glue/glueiface/interface.go

// Package mock_glueiface is a generated GoMock package.
package mock_glueiface

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws" //nolint:staticcheck
	request "github.com/aws/aws-sdk-go/aws/request" //nolint:staticcheck
	glue "github.com/aws/aws-sdk-go/service/glue" //nolint:staticcheck
	gomock "github.com/golang/mock/gomock"
)

// MockGlueAPI is a mock of GlueAPI interface.
type MockGlueAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGlueAPIMockRecorder
}

// MockGlueAPIMockRecorder is the mock recorder for MockGlueAPI.
type MockGlueAPIMockRecorder struct {
	mock *MockGlueAPI
}

// NewMockGlueAPI creates a new mock instance.
func NewMockGlueAPI(ctrl *gomock.Controller) *MockGlueAPI {
	mock := &MockGlueAPI{ctrl: ctrl}
	mock.recorder = &MockGlueAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlueAPI) EXPECT() *MockGlueAPIMockRecorder {
	return m.recorder
}

// BatchCreatePartition mocks base method.
func (m *MockGlueAPI) BatchCreatePartition(arg0 *glue.BatchCreatePartitionInput) (*glue.BatchCreatePartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreatePartition", arg0)
	ret0, _ := ret[0].(*glue.BatchCreatePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreatePartition indicates an expected call of BatchCreatePartition.
func (mr *MockGlueAPIMockRecorder) BatchCreatePartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreatePartition", reflect.TypeOf((*MockGlueAPI)(nil).BatchCreatePartition), arg0)
}

// BatchCreatePartitionRequest mocks base method.
func (m *MockGlueAPI) BatchCreatePartitionRequest(arg0 *glue.BatchCreatePartitionInput) (*request.Request, *glue.BatchCreatePartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreatePartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchCreatePartitionOutput)
	return ret0, ret1
}

// BatchCreatePartitionRequest indicates an expected call of BatchCreatePartitionRequest.
func (mr *MockGlueAPIMockRecorder) BatchCreatePartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreatePartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchCreatePartitionRequest), arg0)
}

// BatchCreatePartitionWithContext mocks base method.
func (m *MockGlueAPI) BatchCreatePartitionWithContext(arg0 aws.Context, arg1 *glue.BatchCreatePartitionInput, arg2 ...request.Option) (*glue.BatchCreatePartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreatePartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchCreatePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreatePartitionWithContext indicates an expected call of BatchCreatePartitionWithContext.
func (mr *MockGlueAPIMockRecorder) BatchCreatePartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreatePartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchCreatePartitionWithContext), varargs...)
}

// BatchDeleteConnection mocks base method.
func (m *MockGlueAPI) BatchDeleteConnection(arg0 *glue.BatchDeleteConnectionInput) (*glue.BatchDeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteConnection", arg0)
	ret0, _ := ret[0].(*glue.BatchDeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteConnection indicates an expected call of BatchDeleteConnection.
func (mr *MockGlueAPIMockRecorder) BatchDeleteConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteConnection", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteConnection), arg0)
}

// BatchDeleteConnectionRequest mocks base method.
func (m *MockGlueAPI) BatchDeleteConnectionRequest(arg0 *glue.BatchDeleteConnectionInput) (*request.Request, *glue.BatchDeleteConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchDeleteConnectionOutput)
	return ret0, ret1
}

// BatchDeleteConnectionRequest indicates an expected call of BatchDeleteConnectionRequest.
func (mr *MockGlueAPIMockRecorder) BatchDeleteConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteConnectionRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteConnectionRequest), arg0)
}

// BatchDeleteConnectionWithContext mocks base method.
func (m *MockGlueAPI) BatchDeleteConnectionWithContext(arg0 aws.Context, arg1 *glue.BatchDeleteConnectionInput, arg2 ...request.Option) (*glue.BatchDeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchDeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteConnectionWithContext indicates an expected call of BatchDeleteConnectionWithContext.
func (mr *MockGlueAPIMockRecorder) BatchDeleteConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteConnectionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteConnectionWithContext), varargs...)
}

// BatchDeletePartition mocks base method.
func (m *MockGlueAPI) BatchDeletePartition(arg0 *glue.BatchDeletePartitionInput) (*glue.BatchDeletePartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeletePartition", arg0)
	ret0, _ := ret[0].(*glue.BatchDeletePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeletePartition indicates an expected call of BatchDeletePartition.
func (mr *MockGlueAPIMockRecorder) BatchDeletePartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeletePartition", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeletePartition), arg0)
}

// BatchDeletePartitionRequest mocks base method.
func (m *MockGlueAPI) BatchDeletePartitionRequest(arg0 *glue.BatchDeletePartitionInput) (*request.Request, *glue.BatchDeletePartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeletePartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchDeletePartitionOutput)
	return ret0, ret1
}

// BatchDeletePartitionRequest indicates an expected call of BatchDeletePartitionRequest.
func (mr *MockGlueAPIMockRecorder) BatchDeletePartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeletePartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeletePartitionRequest), arg0)
}

// BatchDeletePartitionWithContext mocks base method.
func (m *MockGlueAPI) BatchDeletePartitionWithContext(arg0 aws.Context, arg1 *glue.BatchDeletePartitionInput, arg2 ...request.Option) (*glue.BatchDeletePartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeletePartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchDeletePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeletePartitionWithContext indicates an expected call of BatchDeletePartitionWithContext.
func (mr *MockGlueAPIMockRecorder) BatchDeletePartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeletePartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeletePartitionWithContext), varargs...)
}

// BatchDeleteTable mocks base method.
func (m *MockGlueAPI) BatchDeleteTable(arg0 *glue.BatchDeleteTableInput) (*glue.BatchDeleteTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteTable", arg0)
	ret0, _ := ret[0].(*glue.BatchDeleteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteTable indicates an expected call of BatchDeleteTable.
func (mr *MockGlueAPIMockRecorder) BatchDeleteTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTable", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteTable), arg0)
}

// BatchDeleteTableRequest mocks base method.
func (m *MockGlueAPI) BatchDeleteTableRequest(arg0 *glue.BatchDeleteTableInput) (*request.Request, *glue.BatchDeleteTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchDeleteTableOutput)
	return ret0, ret1
}

// BatchDeleteTableRequest indicates an expected call of BatchDeleteTableRequest.
func (mr *MockGlueAPIMockRecorder) BatchDeleteTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTableRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteTableRequest), arg0)
}

// BatchDeleteTableVersion mocks base method.
func (m *MockGlueAPI) BatchDeleteTableVersion(arg0 *glue.BatchDeleteTableVersionInput) (*glue.BatchDeleteTableVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteTableVersion", arg0)
	ret0, _ := ret[0].(*glue.BatchDeleteTableVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteTableVersion indicates an expected call of BatchDeleteTableVersion.
func (mr *MockGlueAPIMockRecorder) BatchDeleteTableVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTableVersion", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteTableVersion), arg0)
}

// BatchDeleteTableVersionRequest mocks base method.
func (m *MockGlueAPI) BatchDeleteTableVersionRequest(arg0 *glue.BatchDeleteTableVersionInput) (*request.Request, *glue.BatchDeleteTableVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteTableVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchDeleteTableVersionOutput)
	return ret0, ret1
}

// BatchDeleteTableVersionRequest indicates an expected call of BatchDeleteTableVersionRequest.
func (mr *MockGlueAPIMockRecorder) BatchDeleteTableVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTableVersionRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteTableVersionRequest), arg0)
}

// BatchDeleteTableVersionWithContext mocks base method.
func (m *MockGlueAPI) BatchDeleteTableVersionWithContext(arg0 aws.Context, arg1 *glue.BatchDeleteTableVersionInput, arg2 ...request.Option) (*glue.BatchDeleteTableVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteTableVersionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchDeleteTableVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteTableVersionWithContext indicates an expected call of BatchDeleteTableVersionWithContext.
func (mr *MockGlueAPIMockRecorder) BatchDeleteTableVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTableVersionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteTableVersionWithContext), varargs...)
}

// BatchDeleteTableWithContext mocks base method.
func (m *MockGlueAPI) BatchDeleteTableWithContext(arg0 aws.Context, arg1 *glue.BatchDeleteTableInput, arg2 ...request.Option) (*glue.BatchDeleteTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteTableWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchDeleteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteTableWithContext indicates an expected call of BatchDeleteTableWithContext.
func (mr *MockGlueAPIMockRecorder) BatchDeleteTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteTableWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchDeleteTableWithContext), varargs...)
}

// BatchGetBlueprints mocks base method.
func (m *MockGlueAPI) BatchGetBlueprints(arg0 *glue.BatchGetBlueprintsInput) (*glue.BatchGetBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetBlueprints", arg0)
	ret0, _ := ret[0].(*glue.BatchGetBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetBlueprints indicates an expected call of BatchGetBlueprints.
func (mr *MockGlueAPIMockRecorder) BatchGetBlueprints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetBlueprints", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetBlueprints), arg0)
}

// BatchGetBlueprintsRequest mocks base method.
func (m *MockGlueAPI) BatchGetBlueprintsRequest(arg0 *glue.BatchGetBlueprintsInput) (*request.Request, *glue.BatchGetBlueprintsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetBlueprintsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetBlueprintsOutput)
	return ret0, ret1
}

// BatchGetBlueprintsRequest indicates an expected call of BatchGetBlueprintsRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetBlueprintsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetBlueprintsRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetBlueprintsRequest), arg0)
}

// BatchGetBlueprintsWithContext mocks base method.
func (m *MockGlueAPI) BatchGetBlueprintsWithContext(arg0 aws.Context, arg1 *glue.BatchGetBlueprintsInput, arg2 ...request.Option) (*glue.BatchGetBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetBlueprintsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetBlueprintsWithContext indicates an expected call of BatchGetBlueprintsWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetBlueprintsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetBlueprintsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetBlueprintsWithContext), varargs...)
}

// BatchGetCrawlers mocks base method.
func (m *MockGlueAPI) BatchGetCrawlers(arg0 *glue.BatchGetCrawlersInput) (*glue.BatchGetCrawlersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCrawlers", arg0)
	ret0, _ := ret[0].(*glue.BatchGetCrawlersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCrawlers indicates an expected call of BatchGetCrawlers.
func (mr *MockGlueAPIMockRecorder) BatchGetCrawlers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCrawlers", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetCrawlers), arg0)
}

// BatchGetCrawlersRequest mocks base method.
func (m *MockGlueAPI) BatchGetCrawlersRequest(arg0 *glue.BatchGetCrawlersInput) (*request.Request, *glue.BatchGetCrawlersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCrawlersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetCrawlersOutput)
	return ret0, ret1
}

// BatchGetCrawlersRequest indicates an expected call of BatchGetCrawlersRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetCrawlersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCrawlersRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetCrawlersRequest), arg0)
}

// BatchGetCrawlersWithContext mocks base method.
func (m *MockGlueAPI) BatchGetCrawlersWithContext(arg0 aws.Context, arg1 *glue.BatchGetCrawlersInput, arg2 ...request.Option) (*glue.BatchGetCrawlersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetCrawlersWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetCrawlersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCrawlersWithContext indicates an expected call of BatchGetCrawlersWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetCrawlersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCrawlersWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetCrawlersWithContext), varargs...)
}

// BatchGetCustomEntityTypes mocks base method.
func (m *MockGlueAPI) BatchGetCustomEntityTypes(arg0 *glue.BatchGetCustomEntityTypesInput) (*glue.BatchGetCustomEntityTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCustomEntityTypes", arg0)
	ret0, _ := ret[0].(*glue.BatchGetCustomEntityTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCustomEntityTypes indicates an expected call of BatchGetCustomEntityTypes.
func (mr *MockGlueAPIMockRecorder) BatchGetCustomEntityTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCustomEntityTypes", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetCustomEntityTypes), arg0)
}

// BatchGetCustomEntityTypesRequest mocks base method.
func (m *MockGlueAPI) BatchGetCustomEntityTypesRequest(arg0 *glue.BatchGetCustomEntityTypesInput) (*request.Request, *glue.BatchGetCustomEntityTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCustomEntityTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetCustomEntityTypesOutput)
	return ret0, ret1
}

// BatchGetCustomEntityTypesRequest indicates an expected call of BatchGetCustomEntityTypesRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetCustomEntityTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCustomEntityTypesRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetCustomEntityTypesRequest), arg0)
}

// BatchGetCustomEntityTypesWithContext mocks base method.
func (m *MockGlueAPI) BatchGetCustomEntityTypesWithContext(arg0 aws.Context, arg1 *glue.BatchGetCustomEntityTypesInput, arg2 ...request.Option) (*glue.BatchGetCustomEntityTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetCustomEntityTypesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetCustomEntityTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCustomEntityTypesWithContext indicates an expected call of BatchGetCustomEntityTypesWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetCustomEntityTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCustomEntityTypesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetCustomEntityTypesWithContext), varargs...)
}

// BatchGetDataQualityResult mocks base method.
func (m *MockGlueAPI) BatchGetDataQualityResult(arg0 *glue.BatchGetDataQualityResultInput) (*glue.BatchGetDataQualityResultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDataQualityResult", arg0)
	ret0, _ := ret[0].(*glue.BatchGetDataQualityResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDataQualityResult indicates an expected call of BatchGetDataQualityResult.
func (mr *MockGlueAPIMockRecorder) BatchGetDataQualityResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDataQualityResult", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetDataQualityResult), arg0)
}

// BatchGetDataQualityResultRequest mocks base method.
func (m *MockGlueAPI) BatchGetDataQualityResultRequest(arg0 *glue.BatchGetDataQualityResultInput) (*request.Request, *glue.BatchGetDataQualityResultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDataQualityResultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetDataQualityResultOutput)
	return ret0, ret1
}

// BatchGetDataQualityResultRequest indicates an expected call of BatchGetDataQualityResultRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetDataQualityResultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDataQualityResultRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetDataQualityResultRequest), arg0)
}

// BatchGetDataQualityResultWithContext mocks base method.
func (m *MockGlueAPI) BatchGetDataQualityResultWithContext(arg0 aws.Context, arg1 *glue.BatchGetDataQualityResultInput, arg2 ...request.Option) (*glue.BatchGetDataQualityResultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDataQualityResultWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetDataQualityResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDataQualityResultWithContext indicates an expected call of BatchGetDataQualityResultWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetDataQualityResultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDataQualityResultWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetDataQualityResultWithContext), varargs...)
}

// BatchGetDevEndpoints mocks base method.
func (m *MockGlueAPI) BatchGetDevEndpoints(arg0 *glue.BatchGetDevEndpointsInput) (*glue.BatchGetDevEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDevEndpoints", arg0)
	ret0, _ := ret[0].(*glue.BatchGetDevEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDevEndpoints indicates an expected call of BatchGetDevEndpoints.
func (mr *MockGlueAPIMockRecorder) BatchGetDevEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDevEndpoints", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetDevEndpoints), arg0)
}

// BatchGetDevEndpointsRequest mocks base method.
func (m *MockGlueAPI) BatchGetDevEndpointsRequest(arg0 *glue.BatchGetDevEndpointsInput) (*request.Request, *glue.BatchGetDevEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDevEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetDevEndpointsOutput)
	return ret0, ret1
}

// BatchGetDevEndpointsRequest indicates an expected call of BatchGetDevEndpointsRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetDevEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDevEndpointsRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetDevEndpointsRequest), arg0)
}

// BatchGetDevEndpointsWithContext mocks base method.
func (m *MockGlueAPI) BatchGetDevEndpointsWithContext(arg0 aws.Context, arg1 *glue.BatchGetDevEndpointsInput, arg2 ...request.Option) (*glue.BatchGetDevEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDevEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetDevEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDevEndpointsWithContext indicates an expected call of BatchGetDevEndpointsWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetDevEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDevEndpointsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetDevEndpointsWithContext), varargs...)
}

// BatchGetJobs mocks base method.
func (m *MockGlueAPI) BatchGetJobs(arg0 *glue.BatchGetJobsInput) (*glue.BatchGetJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetJobs", arg0)
	ret0, _ := ret[0].(*glue.BatchGetJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetJobs indicates an expected call of BatchGetJobs.
func (mr *MockGlueAPIMockRecorder) BatchGetJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetJobs", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetJobs), arg0)
}

// BatchGetJobsRequest mocks base method.
func (m *MockGlueAPI) BatchGetJobsRequest(arg0 *glue.BatchGetJobsInput) (*request.Request, *glue.BatchGetJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetJobsOutput)
	return ret0, ret1
}

// BatchGetJobsRequest indicates an expected call of BatchGetJobsRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetJobsRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetJobsRequest), arg0)
}

// BatchGetJobsWithContext mocks base method.
func (m *MockGlueAPI) BatchGetJobsWithContext(arg0 aws.Context, arg1 *glue.BatchGetJobsInput, arg2 ...request.Option) (*glue.BatchGetJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetJobsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetJobsWithContext indicates an expected call of BatchGetJobsWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetJobsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetJobsWithContext), varargs...)
}

// BatchGetPartition mocks base method.
func (m *MockGlueAPI) BatchGetPartition(arg0 *glue.BatchGetPartitionInput) (*glue.BatchGetPartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetPartition", arg0)
	ret0, _ := ret[0].(*glue.BatchGetPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetPartition indicates an expected call of BatchGetPartition.
func (mr *MockGlueAPIMockRecorder) BatchGetPartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetPartition", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetPartition), arg0)
}

// BatchGetPartitionRequest mocks base method.
func (m *MockGlueAPI) BatchGetPartitionRequest(arg0 *glue.BatchGetPartitionInput) (*request.Request, *glue.BatchGetPartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetPartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetPartitionOutput)
	return ret0, ret1
}

// BatchGetPartitionRequest indicates an expected call of BatchGetPartitionRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetPartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetPartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetPartitionRequest), arg0)
}

// BatchGetPartitionWithContext mocks base method.
func (m *MockGlueAPI) BatchGetPartitionWithContext(arg0 aws.Context, arg1 *glue.BatchGetPartitionInput, arg2 ...request.Option) (*glue.BatchGetPartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetPartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetPartitionWithContext indicates an expected call of BatchGetPartitionWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetPartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetPartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetPartitionWithContext), varargs...)
}

// BatchGetTableOptimizer mocks base method.
func (m *MockGlueAPI) BatchGetTableOptimizer(arg0 *glue.BatchGetTableOptimizerInput) (*glue.BatchGetTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTableOptimizer", arg0)
	ret0, _ := ret[0].(*glue.BatchGetTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTableOptimizer indicates an expected call of BatchGetTableOptimizer.
func (mr *MockGlueAPIMockRecorder) BatchGetTableOptimizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTableOptimizer", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetTableOptimizer), arg0)
}

// BatchGetTableOptimizerRequest mocks base method.
func (m *MockGlueAPI) BatchGetTableOptimizerRequest(arg0 *glue.BatchGetTableOptimizerInput) (*request.Request, *glue.BatchGetTableOptimizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTableOptimizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetTableOptimizerOutput)
	return ret0, ret1
}

// BatchGetTableOptimizerRequest indicates an expected call of BatchGetTableOptimizerRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetTableOptimizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTableOptimizerRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetTableOptimizerRequest), arg0)
}

// BatchGetTableOptimizerWithContext mocks base method.
func (m *MockGlueAPI) BatchGetTableOptimizerWithContext(arg0 aws.Context, arg1 *glue.BatchGetTableOptimizerInput, arg2 ...request.Option) (*glue.BatchGetTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTableOptimizerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTableOptimizerWithContext indicates an expected call of BatchGetTableOptimizerWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetTableOptimizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTableOptimizerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetTableOptimizerWithContext), varargs...)
}

// BatchGetTriggers mocks base method.
func (m *MockGlueAPI) BatchGetTriggers(arg0 *glue.BatchGetTriggersInput) (*glue.BatchGetTriggersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTriggers", arg0)
	ret0, _ := ret[0].(*glue.BatchGetTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTriggers indicates an expected call of BatchGetTriggers.
func (mr *MockGlueAPIMockRecorder) BatchGetTriggers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTriggers", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetTriggers), arg0)
}

// BatchGetTriggersRequest mocks base method.
func (m *MockGlueAPI) BatchGetTriggersRequest(arg0 *glue.BatchGetTriggersInput) (*request.Request, *glue.BatchGetTriggersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTriggersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetTriggersOutput)
	return ret0, ret1
}

// BatchGetTriggersRequest indicates an expected call of BatchGetTriggersRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetTriggersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTriggersRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetTriggersRequest), arg0)
}

// BatchGetTriggersWithContext mocks base method.
func (m *MockGlueAPI) BatchGetTriggersWithContext(arg0 aws.Context, arg1 *glue.BatchGetTriggersInput, arg2 ...request.Option) (*glue.BatchGetTriggersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTriggersWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTriggersWithContext indicates an expected call of BatchGetTriggersWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetTriggersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTriggersWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetTriggersWithContext), varargs...)
}

// BatchGetWorkflows mocks base method.
func (m *MockGlueAPI) BatchGetWorkflows(arg0 *glue.BatchGetWorkflowsInput) (*glue.BatchGetWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetWorkflows", arg0)
	ret0, _ := ret[0].(*glue.BatchGetWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetWorkflows indicates an expected call of BatchGetWorkflows.
func (mr *MockGlueAPIMockRecorder) BatchGetWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetWorkflows", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetWorkflows), arg0)
}

// BatchGetWorkflowsRequest mocks base method.
func (m *MockGlueAPI) BatchGetWorkflowsRequest(arg0 *glue.BatchGetWorkflowsInput) (*request.Request, *glue.BatchGetWorkflowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetWorkflowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchGetWorkflowsOutput)
	return ret0, ret1
}

// BatchGetWorkflowsRequest indicates an expected call of BatchGetWorkflowsRequest.
func (mr *MockGlueAPIMockRecorder) BatchGetWorkflowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetWorkflowsRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetWorkflowsRequest), arg0)
}

// BatchGetWorkflowsWithContext mocks base method.
func (m *MockGlueAPI) BatchGetWorkflowsWithContext(arg0 aws.Context, arg1 *glue.BatchGetWorkflowsInput, arg2 ...request.Option) (*glue.BatchGetWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetWorkflowsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchGetWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetWorkflowsWithContext indicates an expected call of BatchGetWorkflowsWithContext.
func (mr *MockGlueAPIMockRecorder) BatchGetWorkflowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetWorkflowsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchGetWorkflowsWithContext), varargs...)
}

// BatchStopJobRun mocks base method.
func (m *MockGlueAPI) BatchStopJobRun(arg0 *glue.BatchStopJobRunInput) (*glue.BatchStopJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchStopJobRun", arg0)
	ret0, _ := ret[0].(*glue.BatchStopJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchStopJobRun indicates an expected call of BatchStopJobRun.
func (mr *MockGlueAPIMockRecorder) BatchStopJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchStopJobRun", reflect.TypeOf((*MockGlueAPI)(nil).BatchStopJobRun), arg0)
}

// BatchStopJobRunRequest mocks base method.
func (m *MockGlueAPI) BatchStopJobRunRequest(arg0 *glue.BatchStopJobRunInput) (*request.Request, *glue.BatchStopJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchStopJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchStopJobRunOutput)
	return ret0, ret1
}

// BatchStopJobRunRequest indicates an expected call of BatchStopJobRunRequest.
func (mr *MockGlueAPIMockRecorder) BatchStopJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchStopJobRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchStopJobRunRequest), arg0)
}

// BatchStopJobRunWithContext mocks base method.
func (m *MockGlueAPI) BatchStopJobRunWithContext(arg0 aws.Context, arg1 *glue.BatchStopJobRunInput, arg2 ...request.Option) (*glue.BatchStopJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchStopJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchStopJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchStopJobRunWithContext indicates an expected call of BatchStopJobRunWithContext.
func (mr *MockGlueAPIMockRecorder) BatchStopJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchStopJobRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchStopJobRunWithContext), varargs...)
}

// BatchUpdatePartition mocks base method.
func (m *MockGlueAPI) BatchUpdatePartition(arg0 *glue.BatchUpdatePartitionInput) (*glue.BatchUpdatePartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdatePartition", arg0)
	ret0, _ := ret[0].(*glue.BatchUpdatePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdatePartition indicates an expected call of BatchUpdatePartition.
func (mr *MockGlueAPIMockRecorder) BatchUpdatePartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdatePartition", reflect.TypeOf((*MockGlueAPI)(nil).BatchUpdatePartition), arg0)
}

// BatchUpdatePartitionRequest mocks base method.
func (m *MockGlueAPI) BatchUpdatePartitionRequest(arg0 *glue.BatchUpdatePartitionInput) (*request.Request, *glue.BatchUpdatePartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdatePartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.BatchUpdatePartitionOutput)
	return ret0, ret1
}

// BatchUpdatePartitionRequest indicates an expected call of BatchUpdatePartitionRequest.
func (mr *MockGlueAPIMockRecorder) BatchUpdatePartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdatePartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).BatchUpdatePartitionRequest), arg0)
}

// BatchUpdatePartitionWithContext mocks base method.
func (m *MockGlueAPI) BatchUpdatePartitionWithContext(arg0 aws.Context, arg1 *glue.BatchUpdatePartitionInput, arg2 ...request.Option) (*glue.BatchUpdatePartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchUpdatePartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.BatchUpdatePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdatePartitionWithContext indicates an expected call of BatchUpdatePartitionWithContext.
func (mr *MockGlueAPIMockRecorder) BatchUpdatePartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdatePartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).BatchUpdatePartitionWithContext), varargs...)
}

// CancelDataQualityRuleRecommendationRun mocks base method.
func (m *MockGlueAPI) CancelDataQualityRuleRecommendationRun(arg0 *glue.CancelDataQualityRuleRecommendationRunInput) (*glue.CancelDataQualityRuleRecommendationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDataQualityRuleRecommendationRun", arg0)
	ret0, _ := ret[0].(*glue.CancelDataQualityRuleRecommendationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDataQualityRuleRecommendationRun indicates an expected call of CancelDataQualityRuleRecommendationRun.
func (mr *MockGlueAPIMockRecorder) CancelDataQualityRuleRecommendationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataQualityRuleRecommendationRun", reflect.TypeOf((*MockGlueAPI)(nil).CancelDataQualityRuleRecommendationRun), arg0)
}

// CancelDataQualityRuleRecommendationRunRequest mocks base method.
func (m *MockGlueAPI) CancelDataQualityRuleRecommendationRunRequest(arg0 *glue.CancelDataQualityRuleRecommendationRunInput) (*request.Request, *glue.CancelDataQualityRuleRecommendationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDataQualityRuleRecommendationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CancelDataQualityRuleRecommendationRunOutput)
	return ret0, ret1
}

// CancelDataQualityRuleRecommendationRunRequest indicates an expected call of CancelDataQualityRuleRecommendationRunRequest.
func (mr *MockGlueAPIMockRecorder) CancelDataQualityRuleRecommendationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataQualityRuleRecommendationRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).CancelDataQualityRuleRecommendationRunRequest), arg0)
}

// CancelDataQualityRuleRecommendationRunWithContext mocks base method.
func (m *MockGlueAPI) CancelDataQualityRuleRecommendationRunWithContext(arg0 aws.Context, arg1 *glue.CancelDataQualityRuleRecommendationRunInput, arg2 ...request.Option) (*glue.CancelDataQualityRuleRecommendationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelDataQualityRuleRecommendationRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CancelDataQualityRuleRecommendationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDataQualityRuleRecommendationRunWithContext indicates an expected call of CancelDataQualityRuleRecommendationRunWithContext.
func (mr *MockGlueAPIMockRecorder) CancelDataQualityRuleRecommendationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataQualityRuleRecommendationRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CancelDataQualityRuleRecommendationRunWithContext), varargs...)
}

// CancelDataQualityRulesetEvaluationRun mocks base method.
func (m *MockGlueAPI) CancelDataQualityRulesetEvaluationRun(arg0 *glue.CancelDataQualityRulesetEvaluationRunInput) (*glue.CancelDataQualityRulesetEvaluationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDataQualityRulesetEvaluationRun", arg0)
	ret0, _ := ret[0].(*glue.CancelDataQualityRulesetEvaluationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDataQualityRulesetEvaluationRun indicates an expected call of CancelDataQualityRulesetEvaluationRun.
func (mr *MockGlueAPIMockRecorder) CancelDataQualityRulesetEvaluationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataQualityRulesetEvaluationRun", reflect.TypeOf((*MockGlueAPI)(nil).CancelDataQualityRulesetEvaluationRun), arg0)
}

// CancelDataQualityRulesetEvaluationRunRequest mocks base method.
func (m *MockGlueAPI) CancelDataQualityRulesetEvaluationRunRequest(arg0 *glue.CancelDataQualityRulesetEvaluationRunInput) (*request.Request, *glue.CancelDataQualityRulesetEvaluationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDataQualityRulesetEvaluationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CancelDataQualityRulesetEvaluationRunOutput)
	return ret0, ret1
}

// CancelDataQualityRulesetEvaluationRunRequest indicates an expected call of CancelDataQualityRulesetEvaluationRunRequest.
func (mr *MockGlueAPIMockRecorder) CancelDataQualityRulesetEvaluationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataQualityRulesetEvaluationRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).CancelDataQualityRulesetEvaluationRunRequest), arg0)
}

// CancelDataQualityRulesetEvaluationRunWithContext mocks base method.
func (m *MockGlueAPI) CancelDataQualityRulesetEvaluationRunWithContext(arg0 aws.Context, arg1 *glue.CancelDataQualityRulesetEvaluationRunInput, arg2 ...request.Option) (*glue.CancelDataQualityRulesetEvaluationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelDataQualityRulesetEvaluationRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CancelDataQualityRulesetEvaluationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDataQualityRulesetEvaluationRunWithContext indicates an expected call of CancelDataQualityRulesetEvaluationRunWithContext.
func (mr *MockGlueAPIMockRecorder) CancelDataQualityRulesetEvaluationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDataQualityRulesetEvaluationRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CancelDataQualityRulesetEvaluationRunWithContext), varargs...)
}

// CancelMLTaskRun mocks base method.
func (m *MockGlueAPI) CancelMLTaskRun(arg0 *glue.CancelMLTaskRunInput) (*glue.CancelMLTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMLTaskRun", arg0)
	ret0, _ := ret[0].(*glue.CancelMLTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMLTaskRun indicates an expected call of CancelMLTaskRun.
func (mr *MockGlueAPIMockRecorder) CancelMLTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).CancelMLTaskRun), arg0)
}

// CancelMLTaskRunRequest mocks base method.
func (m *MockGlueAPI) CancelMLTaskRunRequest(arg0 *glue.CancelMLTaskRunInput) (*request.Request, *glue.CancelMLTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMLTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CancelMLTaskRunOutput)
	return ret0, ret1
}

// CancelMLTaskRunRequest indicates an expected call of CancelMLTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) CancelMLTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).CancelMLTaskRunRequest), arg0)
}

// CancelMLTaskRunWithContext mocks base method.
func (m *MockGlueAPI) CancelMLTaskRunWithContext(arg0 aws.Context, arg1 *glue.CancelMLTaskRunInput, arg2 ...request.Option) (*glue.CancelMLTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelMLTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CancelMLTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelMLTaskRunWithContext indicates an expected call of CancelMLTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) CancelMLTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMLTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CancelMLTaskRunWithContext), varargs...)
}

// CancelStatement mocks base method.
func (m *MockGlueAPI) CancelStatement(arg0 *glue.CancelStatementInput) (*glue.CancelStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelStatement", arg0)
	ret0, _ := ret[0].(*glue.CancelStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStatement indicates an expected call of CancelStatement.
func (mr *MockGlueAPIMockRecorder) CancelStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStatement", reflect.TypeOf((*MockGlueAPI)(nil).CancelStatement), arg0)
}

// CancelStatementRequest mocks base method.
func (m *MockGlueAPI) CancelStatementRequest(arg0 *glue.CancelStatementInput) (*request.Request, *glue.CancelStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CancelStatementOutput)
	return ret0, ret1
}

// CancelStatementRequest indicates an expected call of CancelStatementRequest.
func (mr *MockGlueAPIMockRecorder) CancelStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStatementRequest", reflect.TypeOf((*MockGlueAPI)(nil).CancelStatementRequest), arg0)
}

// CancelStatementWithContext mocks base method.
func (m *MockGlueAPI) CancelStatementWithContext(arg0 aws.Context, arg1 *glue.CancelStatementInput, arg2 ...request.Option) (*glue.CancelStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelStatementWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CancelStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStatementWithContext indicates an expected call of CancelStatementWithContext.
func (mr *MockGlueAPIMockRecorder) CancelStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStatementWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CancelStatementWithContext), varargs...)
}

// CheckSchemaVersionValidity mocks base method.
func (m *MockGlueAPI) CheckSchemaVersionValidity(arg0 *glue.CheckSchemaVersionValidityInput) (*glue.CheckSchemaVersionValidityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSchemaVersionValidity", arg0)
	ret0, _ := ret[0].(*glue.CheckSchemaVersionValidityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSchemaVersionValidity indicates an expected call of CheckSchemaVersionValidity.
func (mr *MockGlueAPIMockRecorder) CheckSchemaVersionValidity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSchemaVersionValidity", reflect.TypeOf((*MockGlueAPI)(nil).CheckSchemaVersionValidity), arg0)
}

// CheckSchemaVersionValidityRequest mocks base method.
func (m *MockGlueAPI) CheckSchemaVersionValidityRequest(arg0 *glue.CheckSchemaVersionValidityInput) (*request.Request, *glue.CheckSchemaVersionValidityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSchemaVersionValidityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CheckSchemaVersionValidityOutput)
	return ret0, ret1
}

// CheckSchemaVersionValidityRequest indicates an expected call of CheckSchemaVersionValidityRequest.
func (mr *MockGlueAPIMockRecorder) CheckSchemaVersionValidityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSchemaVersionValidityRequest", reflect.TypeOf((*MockGlueAPI)(nil).CheckSchemaVersionValidityRequest), arg0)
}

// CheckSchemaVersionValidityWithContext mocks base method.
func (m *MockGlueAPI) CheckSchemaVersionValidityWithContext(arg0 aws.Context, arg1 *glue.CheckSchemaVersionValidityInput, arg2 ...request.Option) (*glue.CheckSchemaVersionValidityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckSchemaVersionValidityWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CheckSchemaVersionValidityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSchemaVersionValidityWithContext indicates an expected call of CheckSchemaVersionValidityWithContext.
func (mr *MockGlueAPIMockRecorder) CheckSchemaVersionValidityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSchemaVersionValidityWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CheckSchemaVersionValidityWithContext), varargs...)
}

// CreateBlueprint mocks base method.
func (m *MockGlueAPI) CreateBlueprint(arg0 *glue.CreateBlueprintInput) (*glue.CreateBlueprintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlueprint", arg0)
	ret0, _ := ret[0].(*glue.CreateBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlueprint indicates an expected call of CreateBlueprint.
func (mr *MockGlueAPIMockRecorder) CreateBlueprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlueprint", reflect.TypeOf((*MockGlueAPI)(nil).CreateBlueprint), arg0)
}

// CreateBlueprintRequest mocks base method.
func (m *MockGlueAPI) CreateBlueprintRequest(arg0 *glue.CreateBlueprintInput) (*request.Request, *glue.CreateBlueprintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlueprintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateBlueprintOutput)
	return ret0, ret1
}

// CreateBlueprintRequest indicates an expected call of CreateBlueprintRequest.
func (mr *MockGlueAPIMockRecorder) CreateBlueprintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlueprintRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateBlueprintRequest), arg0)
}

// CreateBlueprintWithContext mocks base method.
func (m *MockGlueAPI) CreateBlueprintWithContext(arg0 aws.Context, arg1 *glue.CreateBlueprintInput, arg2 ...request.Option) (*glue.CreateBlueprintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBlueprintWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlueprintWithContext indicates an expected call of CreateBlueprintWithContext.
func (mr *MockGlueAPIMockRecorder) CreateBlueprintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlueprintWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateBlueprintWithContext), varargs...)
}

// CreateClassifier mocks base method.
func (m *MockGlueAPI) CreateClassifier(arg0 *glue.CreateClassifierInput) (*glue.CreateClassifierOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClassifier", arg0)
	ret0, _ := ret[0].(*glue.CreateClassifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClassifier indicates an expected call of CreateClassifier.
func (mr *MockGlueAPIMockRecorder) CreateClassifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClassifier", reflect.TypeOf((*MockGlueAPI)(nil).CreateClassifier), arg0)
}

// CreateClassifierRequest mocks base method.
func (m *MockGlueAPI) CreateClassifierRequest(arg0 *glue.CreateClassifierInput) (*request.Request, *glue.CreateClassifierOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClassifierRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateClassifierOutput)
	return ret0, ret1
}

// CreateClassifierRequest indicates an expected call of CreateClassifierRequest.
func (mr *MockGlueAPIMockRecorder) CreateClassifierRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClassifierRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateClassifierRequest), arg0)
}

// CreateClassifierWithContext mocks base method.
func (m *MockGlueAPI) CreateClassifierWithContext(arg0 aws.Context, arg1 *glue.CreateClassifierInput, arg2 ...request.Option) (*glue.CreateClassifierOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClassifierWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateClassifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClassifierWithContext indicates an expected call of CreateClassifierWithContext.
func (mr *MockGlueAPIMockRecorder) CreateClassifierWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClassifierWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateClassifierWithContext), varargs...)
}

// CreateConnection mocks base method.
func (m *MockGlueAPI) CreateConnection(arg0 *glue.CreateConnectionInput) (*glue.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", arg0)
	ret0, _ := ret[0].(*glue.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockGlueAPIMockRecorder) CreateConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockGlueAPI)(nil).CreateConnection), arg0)
}

// CreateConnectionRequest mocks base method.
func (m *MockGlueAPI) CreateConnectionRequest(arg0 *glue.CreateConnectionInput) (*request.Request, *glue.CreateConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateConnectionOutput)
	return ret0, ret1
}

// CreateConnectionRequest indicates an expected call of CreateConnectionRequest.
func (mr *MockGlueAPIMockRecorder) CreateConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateConnectionRequest), arg0)
}

// CreateConnectionWithContext mocks base method.
func (m *MockGlueAPI) CreateConnectionWithContext(arg0 aws.Context, arg1 *glue.CreateConnectionInput, arg2 ...request.Option) (*glue.CreateConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnectionWithContext indicates an expected call of CreateConnectionWithContext.
func (mr *MockGlueAPIMockRecorder) CreateConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnectionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateConnectionWithContext), varargs...)
}

// CreateCrawler mocks base method.
func (m *MockGlueAPI) CreateCrawler(arg0 *glue.CreateCrawlerInput) (*glue.CreateCrawlerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCrawler", arg0)
	ret0, _ := ret[0].(*glue.CreateCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCrawler indicates an expected call of CreateCrawler.
func (mr *MockGlueAPIMockRecorder) CreateCrawler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCrawler", reflect.TypeOf((*MockGlueAPI)(nil).CreateCrawler), arg0)
}

// CreateCrawlerRequest mocks base method.
func (m *MockGlueAPI) CreateCrawlerRequest(arg0 *glue.CreateCrawlerInput) (*request.Request, *glue.CreateCrawlerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCrawlerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateCrawlerOutput)
	return ret0, ret1
}

// CreateCrawlerRequest indicates an expected call of CreateCrawlerRequest.
func (mr *MockGlueAPIMockRecorder) CreateCrawlerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCrawlerRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateCrawlerRequest), arg0)
}

// CreateCrawlerWithContext mocks base method.
func (m *MockGlueAPI) CreateCrawlerWithContext(arg0 aws.Context, arg1 *glue.CreateCrawlerInput, arg2 ...request.Option) (*glue.CreateCrawlerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCrawlerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCrawlerWithContext indicates an expected call of CreateCrawlerWithContext.
func (mr *MockGlueAPIMockRecorder) CreateCrawlerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCrawlerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateCrawlerWithContext), varargs...)
}

// CreateCustomEntityType mocks base method.
func (m *MockGlueAPI) CreateCustomEntityType(arg0 *glue.CreateCustomEntityTypeInput) (*glue.CreateCustomEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomEntityType", arg0)
	ret0, _ := ret[0].(*glue.CreateCustomEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomEntityType indicates an expected call of CreateCustomEntityType.
func (mr *MockGlueAPIMockRecorder) CreateCustomEntityType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomEntityType", reflect.TypeOf((*MockGlueAPI)(nil).CreateCustomEntityType), arg0)
}

// CreateCustomEntityTypeRequest mocks base method.
func (m *MockGlueAPI) CreateCustomEntityTypeRequest(arg0 *glue.CreateCustomEntityTypeInput) (*request.Request, *glue.CreateCustomEntityTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomEntityTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateCustomEntityTypeOutput)
	return ret0, ret1
}

// CreateCustomEntityTypeRequest indicates an expected call of CreateCustomEntityTypeRequest.
func (mr *MockGlueAPIMockRecorder) CreateCustomEntityTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomEntityTypeRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateCustomEntityTypeRequest), arg0)
}

// CreateCustomEntityTypeWithContext mocks base method.
func (m *MockGlueAPI) CreateCustomEntityTypeWithContext(arg0 aws.Context, arg1 *glue.CreateCustomEntityTypeInput, arg2 ...request.Option) (*glue.CreateCustomEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCustomEntityTypeWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateCustomEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomEntityTypeWithContext indicates an expected call of CreateCustomEntityTypeWithContext.
func (mr *MockGlueAPIMockRecorder) CreateCustomEntityTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomEntityTypeWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateCustomEntityTypeWithContext), varargs...)
}

// CreateDataQualityRuleset mocks base method.
func (m *MockGlueAPI) CreateDataQualityRuleset(arg0 *glue.CreateDataQualityRulesetInput) (*glue.CreateDataQualityRulesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataQualityRuleset", arg0)
	ret0, _ := ret[0].(*glue.CreateDataQualityRulesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataQualityRuleset indicates an expected call of CreateDataQualityRuleset.
func (mr *MockGlueAPIMockRecorder) CreateDataQualityRuleset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataQualityRuleset", reflect.TypeOf((*MockGlueAPI)(nil).CreateDataQualityRuleset), arg0)
}

// CreateDataQualityRulesetRequest mocks base method.
func (m *MockGlueAPI) CreateDataQualityRulesetRequest(arg0 *glue.CreateDataQualityRulesetInput) (*request.Request, *glue.CreateDataQualityRulesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataQualityRulesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateDataQualityRulesetOutput)
	return ret0, ret1
}

// CreateDataQualityRulesetRequest indicates an expected call of CreateDataQualityRulesetRequest.
func (mr *MockGlueAPIMockRecorder) CreateDataQualityRulesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataQualityRulesetRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateDataQualityRulesetRequest), arg0)
}

// CreateDataQualityRulesetWithContext mocks base method.
func (m *MockGlueAPI) CreateDataQualityRulesetWithContext(arg0 aws.Context, arg1 *glue.CreateDataQualityRulesetInput, arg2 ...request.Option) (*glue.CreateDataQualityRulesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataQualityRulesetWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateDataQualityRulesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataQualityRulesetWithContext indicates an expected call of CreateDataQualityRulesetWithContext.
func (mr *MockGlueAPIMockRecorder) CreateDataQualityRulesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataQualityRulesetWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateDataQualityRulesetWithContext), varargs...)
}

// CreateDatabase mocks base method.
func (m *MockGlueAPI) CreateDatabase(arg0 *glue.CreateDatabaseInput) (*glue.CreateDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabase", arg0)
	ret0, _ := ret[0].(*glue.CreateDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabase indicates an expected call of CreateDatabase.
func (mr *MockGlueAPIMockRecorder) CreateDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabase", reflect.TypeOf((*MockGlueAPI)(nil).CreateDatabase), arg0)
}

// CreateDatabaseRequest mocks base method.
func (m *MockGlueAPI) CreateDatabaseRequest(arg0 *glue.CreateDatabaseInput) (*request.Request, *glue.CreateDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateDatabaseOutput)
	return ret0, ret1
}

// CreateDatabaseRequest indicates an expected call of CreateDatabaseRequest.
func (mr *MockGlueAPIMockRecorder) CreateDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateDatabaseRequest), arg0)
}

// CreateDatabaseWithContext mocks base method.
func (m *MockGlueAPI) CreateDatabaseWithContext(arg0 aws.Context, arg1 *glue.CreateDatabaseInput, arg2 ...request.Option) (*glue.CreateDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatabaseWithContext indicates an expected call of CreateDatabaseWithContext.
func (mr *MockGlueAPIMockRecorder) CreateDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatabaseWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateDatabaseWithContext), varargs...)
}

// CreateDevEndpoint mocks base method.
func (m *MockGlueAPI) CreateDevEndpoint(arg0 *glue.CreateDevEndpointInput) (*glue.CreateDevEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevEndpoint", arg0)
	ret0, _ := ret[0].(*glue.CreateDevEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevEndpoint indicates an expected call of CreateDevEndpoint.
func (mr *MockGlueAPIMockRecorder) CreateDevEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevEndpoint", reflect.TypeOf((*MockGlueAPI)(nil).CreateDevEndpoint), arg0)
}

// CreateDevEndpointRequest mocks base method.
func (m *MockGlueAPI) CreateDevEndpointRequest(arg0 *glue.CreateDevEndpointInput) (*request.Request, *glue.CreateDevEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateDevEndpointOutput)
	return ret0, ret1
}

// CreateDevEndpointRequest indicates an expected call of CreateDevEndpointRequest.
func (mr *MockGlueAPIMockRecorder) CreateDevEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevEndpointRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateDevEndpointRequest), arg0)
}

// CreateDevEndpointWithContext mocks base method.
func (m *MockGlueAPI) CreateDevEndpointWithContext(arg0 aws.Context, arg1 *glue.CreateDevEndpointInput, arg2 ...request.Option) (*glue.CreateDevEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDevEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateDevEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevEndpointWithContext indicates an expected call of CreateDevEndpointWithContext.
func (mr *MockGlueAPIMockRecorder) CreateDevEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevEndpointWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateDevEndpointWithContext), varargs...)
}

// CreateJob mocks base method.
func (m *MockGlueAPI) CreateJob(arg0 *glue.CreateJobInput) (*glue.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(*glue.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockGlueAPIMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockGlueAPI)(nil).CreateJob), arg0)
}

// CreateJobRequest mocks base method.
func (m *MockGlueAPI) CreateJobRequest(arg0 *glue.CreateJobInput) (*request.Request, *glue.CreateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateJobOutput)
	return ret0, ret1
}

// CreateJobRequest indicates an expected call of CreateJobRequest.
func (mr *MockGlueAPIMockRecorder) CreateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateJobRequest), arg0)
}

// CreateJobWithContext mocks base method.
func (m *MockGlueAPI) CreateJobWithContext(arg0 aws.Context, arg1 *glue.CreateJobInput, arg2 ...request.Option) (*glue.CreateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithContext indicates an expected call of CreateJobWithContext.
func (mr *MockGlueAPIMockRecorder) CreateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateJobWithContext), varargs...)
}

// CreateMLTransform mocks base method.
func (m *MockGlueAPI) CreateMLTransform(arg0 *glue.CreateMLTransformInput) (*glue.CreateMLTransformOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMLTransform", arg0)
	ret0, _ := ret[0].(*glue.CreateMLTransformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMLTransform indicates an expected call of CreateMLTransform.
func (mr *MockGlueAPIMockRecorder) CreateMLTransform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMLTransform", reflect.TypeOf((*MockGlueAPI)(nil).CreateMLTransform), arg0)
}

// CreateMLTransformRequest mocks base method.
func (m *MockGlueAPI) CreateMLTransformRequest(arg0 *glue.CreateMLTransformInput) (*request.Request, *glue.CreateMLTransformOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMLTransformRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateMLTransformOutput)
	return ret0, ret1
}

// CreateMLTransformRequest indicates an expected call of CreateMLTransformRequest.
func (mr *MockGlueAPIMockRecorder) CreateMLTransformRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMLTransformRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateMLTransformRequest), arg0)
}

// CreateMLTransformWithContext mocks base method.
func (m *MockGlueAPI) CreateMLTransformWithContext(arg0 aws.Context, arg1 *glue.CreateMLTransformInput, arg2 ...request.Option) (*glue.CreateMLTransformOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMLTransformWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateMLTransformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMLTransformWithContext indicates an expected call of CreateMLTransformWithContext.
func (mr *MockGlueAPIMockRecorder) CreateMLTransformWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMLTransformWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateMLTransformWithContext), varargs...)
}

// CreatePartition mocks base method.
func (m *MockGlueAPI) CreatePartition(arg0 *glue.CreatePartitionInput) (*glue.CreatePartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartition", arg0)
	ret0, _ := ret[0].(*glue.CreatePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockGlueAPIMockRecorder) CreatePartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockGlueAPI)(nil).CreatePartition), arg0)
}

// CreatePartitionIndex mocks base method.
func (m *MockGlueAPI) CreatePartitionIndex(arg0 *glue.CreatePartitionIndexInput) (*glue.CreatePartitionIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartitionIndex", arg0)
	ret0, _ := ret[0].(*glue.CreatePartitionIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionIndex indicates an expected call of CreatePartitionIndex.
func (mr *MockGlueAPIMockRecorder) CreatePartitionIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionIndex", reflect.TypeOf((*MockGlueAPI)(nil).CreatePartitionIndex), arg0)
}

// CreatePartitionIndexRequest mocks base method.
func (m *MockGlueAPI) CreatePartitionIndexRequest(arg0 *glue.CreatePartitionIndexInput) (*request.Request, *glue.CreatePartitionIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartitionIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreatePartitionIndexOutput)
	return ret0, ret1
}

// CreatePartitionIndexRequest indicates an expected call of CreatePartitionIndexRequest.
func (mr *MockGlueAPIMockRecorder) CreatePartitionIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionIndexRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreatePartitionIndexRequest), arg0)
}

// CreatePartitionIndexWithContext mocks base method.
func (m *MockGlueAPI) CreatePartitionIndexWithContext(arg0 aws.Context, arg1 *glue.CreatePartitionIndexInput, arg2 ...request.Option) (*glue.CreatePartitionIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartitionIndexWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreatePartitionIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionIndexWithContext indicates an expected call of CreatePartitionIndexWithContext.
func (mr *MockGlueAPIMockRecorder) CreatePartitionIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionIndexWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreatePartitionIndexWithContext), varargs...)
}

// CreatePartitionRequest mocks base method.
func (m *MockGlueAPI) CreatePartitionRequest(arg0 *glue.CreatePartitionInput) (*request.Request, *glue.CreatePartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreatePartitionOutput)
	return ret0, ret1
}

// CreatePartitionRequest indicates an expected call of CreatePartitionRequest.
func (mr *MockGlueAPIMockRecorder) CreatePartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreatePartitionRequest), arg0)
}

// CreatePartitionWithContext mocks base method.
func (m *MockGlueAPI) CreatePartitionWithContext(arg0 aws.Context, arg1 *glue.CreatePartitionInput, arg2 ...request.Option) (*glue.CreatePartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreatePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionWithContext indicates an expected call of CreatePartitionWithContext.
func (mr *MockGlueAPIMockRecorder) CreatePartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreatePartitionWithContext), varargs...)
}

// CreateRegistry mocks base method.
func (m *MockGlueAPI) CreateRegistry(arg0 *glue.CreateRegistryInput) (*glue.CreateRegistryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistry", arg0)
	ret0, _ := ret[0].(*glue.CreateRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistry indicates an expected call of CreateRegistry.
func (mr *MockGlueAPIMockRecorder) CreateRegistry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistry", reflect.TypeOf((*MockGlueAPI)(nil).CreateRegistry), arg0)
}

// CreateRegistryRequest mocks base method.
func (m *MockGlueAPI) CreateRegistryRequest(arg0 *glue.CreateRegistryInput) (*request.Request, *glue.CreateRegistryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateRegistryOutput)
	return ret0, ret1
}

// CreateRegistryRequest indicates an expected call of CreateRegistryRequest.
func (mr *MockGlueAPIMockRecorder) CreateRegistryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistryRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateRegistryRequest), arg0)
}

// CreateRegistryWithContext mocks base method.
func (m *MockGlueAPI) CreateRegistryWithContext(arg0 aws.Context, arg1 *glue.CreateRegistryInput, arg2 ...request.Option) (*glue.CreateRegistryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegistryWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistryWithContext indicates an expected call of CreateRegistryWithContext.
func (mr *MockGlueAPIMockRecorder) CreateRegistryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistryWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateRegistryWithContext), varargs...)
}

// CreateSchema mocks base method.
func (m *MockGlueAPI) CreateSchema(arg0 *glue.CreateSchemaInput) (*glue.CreateSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", arg0)
	ret0, _ := ret[0].(*glue.CreateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockGlueAPIMockRecorder) CreateSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockGlueAPI)(nil).CreateSchema), arg0)
}

// CreateSchemaRequest mocks base method.
func (m *MockGlueAPI) CreateSchemaRequest(arg0 *glue.CreateSchemaInput) (*request.Request, *glue.CreateSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateSchemaOutput)
	return ret0, ret1
}

// CreateSchemaRequest indicates an expected call of CreateSchemaRequest.
func (mr *MockGlueAPIMockRecorder) CreateSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateSchemaRequest), arg0)
}

// CreateSchemaWithContext mocks base method.
func (m *MockGlueAPI) CreateSchemaWithContext(arg0 aws.Context, arg1 *glue.CreateSchemaInput, arg2 ...request.Option) (*glue.CreateSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchemaWithContext indicates an expected call of CreateSchemaWithContext.
func (mr *MockGlueAPIMockRecorder) CreateSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateSchemaWithContext), varargs...)
}

// CreateScript mocks base method.
func (m *MockGlueAPI) CreateScript(arg0 *glue.CreateScriptInput) (*glue.CreateScriptOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScript", arg0)
	ret0, _ := ret[0].(*glue.CreateScriptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScript indicates an expected call of CreateScript.
func (mr *MockGlueAPIMockRecorder) CreateScript(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScript", reflect.TypeOf((*MockGlueAPI)(nil).CreateScript), arg0)
}

// CreateScriptRequest mocks base method.
func (m *MockGlueAPI) CreateScriptRequest(arg0 *glue.CreateScriptInput) (*request.Request, *glue.CreateScriptOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScriptRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateScriptOutput)
	return ret0, ret1
}

// CreateScriptRequest indicates an expected call of CreateScriptRequest.
func (mr *MockGlueAPIMockRecorder) CreateScriptRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScriptRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateScriptRequest), arg0)
}

// CreateScriptWithContext mocks base method.
func (m *MockGlueAPI) CreateScriptWithContext(arg0 aws.Context, arg1 *glue.CreateScriptInput, arg2 ...request.Option) (*glue.CreateScriptOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateScriptWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateScriptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScriptWithContext indicates an expected call of CreateScriptWithContext.
func (mr *MockGlueAPIMockRecorder) CreateScriptWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScriptWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateScriptWithContext), varargs...)
}

// CreateSecurityConfiguration mocks base method.
func (m *MockGlueAPI) CreateSecurityConfiguration(arg0 *glue.CreateSecurityConfigurationInput) (*glue.CreateSecurityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityConfiguration", arg0)
	ret0, _ := ret[0].(*glue.CreateSecurityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityConfiguration indicates an expected call of CreateSecurityConfiguration.
func (mr *MockGlueAPIMockRecorder) CreateSecurityConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityConfiguration", reflect.TypeOf((*MockGlueAPI)(nil).CreateSecurityConfiguration), arg0)
}

// CreateSecurityConfigurationRequest mocks base method.
func (m *MockGlueAPI) CreateSecurityConfigurationRequest(arg0 *glue.CreateSecurityConfigurationInput) (*request.Request, *glue.CreateSecurityConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateSecurityConfigurationOutput)
	return ret0, ret1
}

// CreateSecurityConfigurationRequest indicates an expected call of CreateSecurityConfigurationRequest.
func (mr *MockGlueAPIMockRecorder) CreateSecurityConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityConfigurationRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateSecurityConfigurationRequest), arg0)
}

// CreateSecurityConfigurationWithContext mocks base method.
func (m *MockGlueAPI) CreateSecurityConfigurationWithContext(arg0 aws.Context, arg1 *glue.CreateSecurityConfigurationInput, arg2 ...request.Option) (*glue.CreateSecurityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecurityConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateSecurityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityConfigurationWithContext indicates an expected call of CreateSecurityConfigurationWithContext.
func (mr *MockGlueAPIMockRecorder) CreateSecurityConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityConfigurationWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateSecurityConfigurationWithContext), varargs...)
}

// CreateSession mocks base method.
func (m *MockGlueAPI) CreateSession(arg0 *glue.CreateSessionInput) (*glue.CreateSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0)
	ret0, _ := ret[0].(*glue.CreateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockGlueAPIMockRecorder) CreateSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockGlueAPI)(nil).CreateSession), arg0)
}

// CreateSessionRequest mocks base method.
func (m *MockGlueAPI) CreateSessionRequest(arg0 *glue.CreateSessionInput) (*request.Request, *glue.CreateSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateSessionOutput)
	return ret0, ret1
}

// CreateSessionRequest indicates an expected call of CreateSessionRequest.
func (mr *MockGlueAPIMockRecorder) CreateSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateSessionRequest), arg0)
}

// CreateSessionWithContext mocks base method.
func (m *MockGlueAPI) CreateSessionWithContext(arg0 aws.Context, arg1 *glue.CreateSessionInput, arg2 ...request.Option) (*glue.CreateSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSessionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionWithContext indicates an expected call of CreateSessionWithContext.
func (mr *MockGlueAPIMockRecorder) CreateSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateSessionWithContext), varargs...)
}

// CreateTable mocks base method.
func (m *MockGlueAPI) CreateTable(arg0 *glue.CreateTableInput) (*glue.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", arg0)
	ret0, _ := ret[0].(*glue.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockGlueAPIMockRecorder) CreateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockGlueAPI)(nil).CreateTable), arg0)
}

// CreateTableOptimizer mocks base method.
func (m *MockGlueAPI) CreateTableOptimizer(arg0 *glue.CreateTableOptimizerInput) (*glue.CreateTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableOptimizer", arg0)
	ret0, _ := ret[0].(*glue.CreateTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableOptimizer indicates an expected call of CreateTableOptimizer.
func (mr *MockGlueAPIMockRecorder) CreateTableOptimizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableOptimizer", reflect.TypeOf((*MockGlueAPI)(nil).CreateTableOptimizer), arg0)
}

// CreateTableOptimizerRequest mocks base method.
func (m *MockGlueAPI) CreateTableOptimizerRequest(arg0 *glue.CreateTableOptimizerInput) (*request.Request, *glue.CreateTableOptimizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableOptimizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateTableOptimizerOutput)
	return ret0, ret1
}

// CreateTableOptimizerRequest indicates an expected call of CreateTableOptimizerRequest.
func (mr *MockGlueAPIMockRecorder) CreateTableOptimizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableOptimizerRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateTableOptimizerRequest), arg0)
}

// CreateTableOptimizerWithContext mocks base method.
func (m *MockGlueAPI) CreateTableOptimizerWithContext(arg0 aws.Context, arg1 *glue.CreateTableOptimizerInput, arg2 ...request.Option) (*glue.CreateTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTableOptimizerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableOptimizerWithContext indicates an expected call of CreateTableOptimizerWithContext.
func (mr *MockGlueAPIMockRecorder) CreateTableOptimizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableOptimizerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateTableOptimizerWithContext), varargs...)
}

// CreateTableRequest mocks base method.
func (m *MockGlueAPI) CreateTableRequest(arg0 *glue.CreateTableInput) (*request.Request, *glue.CreateTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateTableOutput)
	return ret0, ret1
}

// CreateTableRequest indicates an expected call of CreateTableRequest.
func (mr *MockGlueAPIMockRecorder) CreateTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateTableRequest), arg0)
}

// CreateTableWithContext mocks base method.
func (m *MockGlueAPI) CreateTableWithContext(arg0 aws.Context, arg1 *glue.CreateTableInput, arg2 ...request.Option) (*glue.CreateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTableWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableWithContext indicates an expected call of CreateTableWithContext.
func (mr *MockGlueAPIMockRecorder) CreateTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateTableWithContext), varargs...)
}

// CreateTrigger mocks base method.
func (m *MockGlueAPI) CreateTrigger(arg0 *glue.CreateTriggerInput) (*glue.CreateTriggerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrigger", arg0)
	ret0, _ := ret[0].(*glue.CreateTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrigger indicates an expected call of CreateTrigger.
func (mr *MockGlueAPIMockRecorder) CreateTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrigger", reflect.TypeOf((*MockGlueAPI)(nil).CreateTrigger), arg0)
}

// CreateTriggerRequest mocks base method.
func (m *MockGlueAPI) CreateTriggerRequest(arg0 *glue.CreateTriggerInput) (*request.Request, *glue.CreateTriggerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTriggerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateTriggerOutput)
	return ret0, ret1
}

// CreateTriggerRequest indicates an expected call of CreateTriggerRequest.
func (mr *MockGlueAPIMockRecorder) CreateTriggerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTriggerRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateTriggerRequest), arg0)
}

// CreateTriggerWithContext mocks base method.
func (m *MockGlueAPI) CreateTriggerWithContext(arg0 aws.Context, arg1 *glue.CreateTriggerInput, arg2 ...request.Option) (*glue.CreateTriggerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTriggerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTriggerWithContext indicates an expected call of CreateTriggerWithContext.
func (mr *MockGlueAPIMockRecorder) CreateTriggerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTriggerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateTriggerWithContext), varargs...)
}

// CreateUsageProfile mocks base method.
func (m *MockGlueAPI) CreateUsageProfile(arg0 *glue.CreateUsageProfileInput) (*glue.CreateUsageProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsageProfile", arg0)
	ret0, _ := ret[0].(*glue.CreateUsageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsageProfile indicates an expected call of CreateUsageProfile.
func (mr *MockGlueAPIMockRecorder) CreateUsageProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageProfile", reflect.TypeOf((*MockGlueAPI)(nil).CreateUsageProfile), arg0)
}

// CreateUsageProfileRequest mocks base method.
func (m *MockGlueAPI) CreateUsageProfileRequest(arg0 *glue.CreateUsageProfileInput) (*request.Request, *glue.CreateUsageProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUsageProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateUsageProfileOutput)
	return ret0, ret1
}

// CreateUsageProfileRequest indicates an expected call of CreateUsageProfileRequest.
func (mr *MockGlueAPIMockRecorder) CreateUsageProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageProfileRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateUsageProfileRequest), arg0)
}

// CreateUsageProfileWithContext mocks base method.
func (m *MockGlueAPI) CreateUsageProfileWithContext(arg0 aws.Context, arg1 *glue.CreateUsageProfileInput, arg2 ...request.Option) (*glue.CreateUsageProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUsageProfileWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateUsageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUsageProfileWithContext indicates an expected call of CreateUsageProfileWithContext.
func (mr *MockGlueAPIMockRecorder) CreateUsageProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUsageProfileWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateUsageProfileWithContext), varargs...)
}

// CreateUserDefinedFunction mocks base method.
func (m *MockGlueAPI) CreateUserDefinedFunction(arg0 *glue.CreateUserDefinedFunctionInput) (*glue.CreateUserDefinedFunctionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDefinedFunction", arg0)
	ret0, _ := ret[0].(*glue.CreateUserDefinedFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserDefinedFunction indicates an expected call of CreateUserDefinedFunction.
func (mr *MockGlueAPIMockRecorder) CreateUserDefinedFunction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDefinedFunction", reflect.TypeOf((*MockGlueAPI)(nil).CreateUserDefinedFunction), arg0)
}

// CreateUserDefinedFunctionRequest mocks base method.
func (m *MockGlueAPI) CreateUserDefinedFunctionRequest(arg0 *glue.CreateUserDefinedFunctionInput) (*request.Request, *glue.CreateUserDefinedFunctionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDefinedFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateUserDefinedFunctionOutput)
	return ret0, ret1
}

// CreateUserDefinedFunctionRequest indicates an expected call of CreateUserDefinedFunctionRequest.
func (mr *MockGlueAPIMockRecorder) CreateUserDefinedFunctionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDefinedFunctionRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateUserDefinedFunctionRequest), arg0)
}

// CreateUserDefinedFunctionWithContext mocks base method.
func (m *MockGlueAPI) CreateUserDefinedFunctionWithContext(arg0 aws.Context, arg1 *glue.CreateUserDefinedFunctionInput, arg2 ...request.Option) (*glue.CreateUserDefinedFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserDefinedFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateUserDefinedFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserDefinedFunctionWithContext indicates an expected call of CreateUserDefinedFunctionWithContext.
func (mr *MockGlueAPIMockRecorder) CreateUserDefinedFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDefinedFunctionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateUserDefinedFunctionWithContext), varargs...)
}

// CreateWorkflow mocks base method.
func (m *MockGlueAPI) CreateWorkflow(arg0 *glue.CreateWorkflowInput) (*glue.CreateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflow", arg0)
	ret0, _ := ret[0].(*glue.CreateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflow indicates an expected call of CreateWorkflow.
func (mr *MockGlueAPIMockRecorder) CreateWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflow", reflect.TypeOf((*MockGlueAPI)(nil).CreateWorkflow), arg0)
}

// CreateWorkflowRequest mocks base method.
func (m *MockGlueAPI) CreateWorkflowRequest(arg0 *glue.CreateWorkflowInput) (*request.Request, *glue.CreateWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.CreateWorkflowOutput)
	return ret0, ret1
}

// CreateWorkflowRequest indicates an expected call of CreateWorkflowRequest.
func (mr *MockGlueAPIMockRecorder) CreateWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowRequest", reflect.TypeOf((*MockGlueAPI)(nil).CreateWorkflowRequest), arg0)
}

// CreateWorkflowWithContext mocks base method.
func (m *MockGlueAPI) CreateWorkflowWithContext(arg0 aws.Context, arg1 *glue.CreateWorkflowInput, arg2 ...request.Option) (*glue.CreateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*glue.CreateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowWithContext indicates an expected call of CreateWorkflowWithContext.
func (mr *MockGlueAPIMockRecorder) CreateWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowWithContext", reflect.TypeOf((*MockGlueAPI)(nil).CreateWorkflowWithContext), varargs...)
}

// DeleteBlueprint mocks base method.
func (m *MockGlueAPI) DeleteBlueprint(arg0 *glue.DeleteBlueprintInput) (*glue.DeleteBlueprintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlueprint", arg0)
	ret0, _ := ret[0].(*glue.DeleteBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlueprint indicates an expected call of DeleteBlueprint.
func (mr *MockGlueAPIMockRecorder) DeleteBlueprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlueprint", reflect.TypeOf((*MockGlueAPI)(nil).DeleteBlueprint), arg0)
}

// DeleteBlueprintRequest mocks base method.
func (m *MockGlueAPI) DeleteBlueprintRequest(arg0 *glue.DeleteBlueprintInput) (*request.Request, *glue.DeleteBlueprintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlueprintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteBlueprintOutput)
	return ret0, ret1
}

// DeleteBlueprintRequest indicates an expected call of DeleteBlueprintRequest.
func (mr *MockGlueAPIMockRecorder) DeleteBlueprintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlueprintRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteBlueprintRequest), arg0)
}

// DeleteBlueprintWithContext mocks base method.
func (m *MockGlueAPI) DeleteBlueprintWithContext(arg0 aws.Context, arg1 *glue.DeleteBlueprintInput, arg2 ...request.Option) (*glue.DeleteBlueprintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBlueprintWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlueprintWithContext indicates an expected call of DeleteBlueprintWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteBlueprintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlueprintWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteBlueprintWithContext), varargs...)
}

// DeleteClassifier mocks base method.
func (m *MockGlueAPI) DeleteClassifier(arg0 *glue.DeleteClassifierInput) (*glue.DeleteClassifierOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClassifier", arg0)
	ret0, _ := ret[0].(*glue.DeleteClassifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClassifier indicates an expected call of DeleteClassifier.
func (mr *MockGlueAPIMockRecorder) DeleteClassifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassifier", reflect.TypeOf((*MockGlueAPI)(nil).DeleteClassifier), arg0)
}

// DeleteClassifierRequest mocks base method.
func (m *MockGlueAPI) DeleteClassifierRequest(arg0 *glue.DeleteClassifierInput) (*request.Request, *glue.DeleteClassifierOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClassifierRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteClassifierOutput)
	return ret0, ret1
}

// DeleteClassifierRequest indicates an expected call of DeleteClassifierRequest.
func (mr *MockGlueAPIMockRecorder) DeleteClassifierRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassifierRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteClassifierRequest), arg0)
}

// DeleteClassifierWithContext mocks base method.
func (m *MockGlueAPI) DeleteClassifierWithContext(arg0 aws.Context, arg1 *glue.DeleteClassifierInput, arg2 ...request.Option) (*glue.DeleteClassifierOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClassifierWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteClassifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClassifierWithContext indicates an expected call of DeleteClassifierWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteClassifierWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClassifierWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteClassifierWithContext), varargs...)
}

// DeleteColumnStatisticsForPartition mocks base method.
func (m *MockGlueAPI) DeleteColumnStatisticsForPartition(arg0 *glue.DeleteColumnStatisticsForPartitionInput) (*glue.DeleteColumnStatisticsForPartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteColumnStatisticsForPartition", arg0)
	ret0, _ := ret[0].(*glue.DeleteColumnStatisticsForPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteColumnStatisticsForPartition indicates an expected call of DeleteColumnStatisticsForPartition.
func (mr *MockGlueAPIMockRecorder) DeleteColumnStatisticsForPartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteColumnStatisticsForPartition", reflect.TypeOf((*MockGlueAPI)(nil).DeleteColumnStatisticsForPartition), arg0)
}

// DeleteColumnStatisticsForPartitionRequest mocks base method.
func (m *MockGlueAPI) DeleteColumnStatisticsForPartitionRequest(arg0 *glue.DeleteColumnStatisticsForPartitionInput) (*request.Request, *glue.DeleteColumnStatisticsForPartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteColumnStatisticsForPartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteColumnStatisticsForPartitionOutput)
	return ret0, ret1
}

// DeleteColumnStatisticsForPartitionRequest indicates an expected call of DeleteColumnStatisticsForPartitionRequest.
func (mr *MockGlueAPIMockRecorder) DeleteColumnStatisticsForPartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteColumnStatisticsForPartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteColumnStatisticsForPartitionRequest), arg0)
}

// DeleteColumnStatisticsForPartitionWithContext mocks base method.
func (m *MockGlueAPI) DeleteColumnStatisticsForPartitionWithContext(arg0 aws.Context, arg1 *glue.DeleteColumnStatisticsForPartitionInput, arg2 ...request.Option) (*glue.DeleteColumnStatisticsForPartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteColumnStatisticsForPartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteColumnStatisticsForPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteColumnStatisticsForPartitionWithContext indicates an expected call of DeleteColumnStatisticsForPartitionWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteColumnStatisticsForPartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteColumnStatisticsForPartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteColumnStatisticsForPartitionWithContext), varargs...)
}

// DeleteColumnStatisticsForTable mocks base method.
func (m *MockGlueAPI) DeleteColumnStatisticsForTable(arg0 *glue.DeleteColumnStatisticsForTableInput) (*glue.DeleteColumnStatisticsForTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteColumnStatisticsForTable", arg0)
	ret0, _ := ret[0].(*glue.DeleteColumnStatisticsForTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteColumnStatisticsForTable indicates an expected call of DeleteColumnStatisticsForTable.
func (mr *MockGlueAPIMockRecorder) DeleteColumnStatisticsForTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteColumnStatisticsForTable", reflect.TypeOf((*MockGlueAPI)(nil).DeleteColumnStatisticsForTable), arg0)
}

// DeleteColumnStatisticsForTableRequest mocks base method.
func (m *MockGlueAPI) DeleteColumnStatisticsForTableRequest(arg0 *glue.DeleteColumnStatisticsForTableInput) (*request.Request, *glue.DeleteColumnStatisticsForTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteColumnStatisticsForTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteColumnStatisticsForTableOutput)
	return ret0, ret1
}

// DeleteColumnStatisticsForTableRequest indicates an expected call of DeleteColumnStatisticsForTableRequest.
func (mr *MockGlueAPIMockRecorder) DeleteColumnStatisticsForTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteColumnStatisticsForTableRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteColumnStatisticsForTableRequest), arg0)
}

// DeleteColumnStatisticsForTableWithContext mocks base method.
func (m *MockGlueAPI) DeleteColumnStatisticsForTableWithContext(arg0 aws.Context, arg1 *glue.DeleteColumnStatisticsForTableInput, arg2 ...request.Option) (*glue.DeleteColumnStatisticsForTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteColumnStatisticsForTableWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteColumnStatisticsForTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteColumnStatisticsForTableWithContext indicates an expected call of DeleteColumnStatisticsForTableWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteColumnStatisticsForTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteColumnStatisticsForTableWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteColumnStatisticsForTableWithContext), varargs...)
}

// DeleteConnection mocks base method.
func (m *MockGlueAPI) DeleteConnection(arg0 *glue.DeleteConnectionInput) (*glue.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnection", arg0)
	ret0, _ := ret[0].(*glue.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnection indicates an expected call of DeleteConnection.
func (mr *MockGlueAPIMockRecorder) DeleteConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnection", reflect.TypeOf((*MockGlueAPI)(nil).DeleteConnection), arg0)
}

// DeleteConnectionRequest mocks base method.
func (m *MockGlueAPI) DeleteConnectionRequest(arg0 *glue.DeleteConnectionInput) (*request.Request, *glue.DeleteConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteConnectionOutput)
	return ret0, ret1
}

// DeleteConnectionRequest indicates an expected call of DeleteConnectionRequest.
func (mr *MockGlueAPIMockRecorder) DeleteConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteConnectionRequest), arg0)
}

// DeleteConnectionWithContext mocks base method.
func (m *MockGlueAPI) DeleteConnectionWithContext(arg0 aws.Context, arg1 *glue.DeleteConnectionInput, arg2 ...request.Option) (*glue.DeleteConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConnectionWithContext indicates an expected call of DeleteConnectionWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnectionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteConnectionWithContext), varargs...)
}

// DeleteCrawler mocks base method.
func (m *MockGlueAPI) DeleteCrawler(arg0 *glue.DeleteCrawlerInput) (*glue.DeleteCrawlerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCrawler", arg0)
	ret0, _ := ret[0].(*glue.DeleteCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCrawler indicates an expected call of DeleteCrawler.
func (mr *MockGlueAPIMockRecorder) DeleteCrawler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrawler", reflect.TypeOf((*MockGlueAPI)(nil).DeleteCrawler), arg0)
}

// DeleteCrawlerRequest mocks base method.
func (m *MockGlueAPI) DeleteCrawlerRequest(arg0 *glue.DeleteCrawlerInput) (*request.Request, *glue.DeleteCrawlerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCrawlerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteCrawlerOutput)
	return ret0, ret1
}

// DeleteCrawlerRequest indicates an expected call of DeleteCrawlerRequest.
func (mr *MockGlueAPIMockRecorder) DeleteCrawlerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrawlerRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteCrawlerRequest), arg0)
}

// DeleteCrawlerWithContext mocks base method.
func (m *MockGlueAPI) DeleteCrawlerWithContext(arg0 aws.Context, arg1 *glue.DeleteCrawlerInput, arg2 ...request.Option) (*glue.DeleteCrawlerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCrawlerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCrawlerWithContext indicates an expected call of DeleteCrawlerWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteCrawlerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrawlerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteCrawlerWithContext), varargs...)
}

// DeleteCustomEntityType mocks base method.
func (m *MockGlueAPI) DeleteCustomEntityType(arg0 *glue.DeleteCustomEntityTypeInput) (*glue.DeleteCustomEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomEntityType", arg0)
	ret0, _ := ret[0].(*glue.DeleteCustomEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomEntityType indicates an expected call of DeleteCustomEntityType.
func (mr *MockGlueAPIMockRecorder) DeleteCustomEntityType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomEntityType", reflect.TypeOf((*MockGlueAPI)(nil).DeleteCustomEntityType), arg0)
}

// DeleteCustomEntityTypeRequest mocks base method.
func (m *MockGlueAPI) DeleteCustomEntityTypeRequest(arg0 *glue.DeleteCustomEntityTypeInput) (*request.Request, *glue.DeleteCustomEntityTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomEntityTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteCustomEntityTypeOutput)
	return ret0, ret1
}

// DeleteCustomEntityTypeRequest indicates an expected call of DeleteCustomEntityTypeRequest.
func (mr *MockGlueAPIMockRecorder) DeleteCustomEntityTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomEntityTypeRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteCustomEntityTypeRequest), arg0)
}

// DeleteCustomEntityTypeWithContext mocks base method.
func (m *MockGlueAPI) DeleteCustomEntityTypeWithContext(arg0 aws.Context, arg1 *glue.DeleteCustomEntityTypeInput, arg2 ...request.Option) (*glue.DeleteCustomEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomEntityTypeWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteCustomEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomEntityTypeWithContext indicates an expected call of DeleteCustomEntityTypeWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteCustomEntityTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomEntityTypeWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteCustomEntityTypeWithContext), varargs...)
}

// DeleteDataQualityRuleset mocks base method.
func (m *MockGlueAPI) DeleteDataQualityRuleset(arg0 *glue.DeleteDataQualityRulesetInput) (*glue.DeleteDataQualityRulesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataQualityRuleset", arg0)
	ret0, _ := ret[0].(*glue.DeleteDataQualityRulesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataQualityRuleset indicates an expected call of DeleteDataQualityRuleset.
func (mr *MockGlueAPIMockRecorder) DeleteDataQualityRuleset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataQualityRuleset", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDataQualityRuleset), arg0)
}

// DeleteDataQualityRulesetRequest mocks base method.
func (m *MockGlueAPI) DeleteDataQualityRulesetRequest(arg0 *glue.DeleteDataQualityRulesetInput) (*request.Request, *glue.DeleteDataQualityRulesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataQualityRulesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteDataQualityRulesetOutput)
	return ret0, ret1
}

// DeleteDataQualityRulesetRequest indicates an expected call of DeleteDataQualityRulesetRequest.
func (mr *MockGlueAPIMockRecorder) DeleteDataQualityRulesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataQualityRulesetRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDataQualityRulesetRequest), arg0)
}

// DeleteDataQualityRulesetWithContext mocks base method.
func (m *MockGlueAPI) DeleteDataQualityRulesetWithContext(arg0 aws.Context, arg1 *glue.DeleteDataQualityRulesetInput, arg2 ...request.Option) (*glue.DeleteDataQualityRulesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataQualityRulesetWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteDataQualityRulesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataQualityRulesetWithContext indicates an expected call of DeleteDataQualityRulesetWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteDataQualityRulesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataQualityRulesetWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDataQualityRulesetWithContext), varargs...)
}

// DeleteDatabase mocks base method.
func (m *MockGlueAPI) DeleteDatabase(arg0 *glue.DeleteDatabaseInput) (*glue.DeleteDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabase", arg0)
	ret0, _ := ret[0].(*glue.DeleteDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatabase indicates an expected call of DeleteDatabase.
func (mr *MockGlueAPIMockRecorder) DeleteDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabase", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDatabase), arg0)
}

// DeleteDatabaseRequest mocks base method.
func (m *MockGlueAPI) DeleteDatabaseRequest(arg0 *glue.DeleteDatabaseInput) (*request.Request, *glue.DeleteDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteDatabaseOutput)
	return ret0, ret1
}

// DeleteDatabaseRequest indicates an expected call of DeleteDatabaseRequest.
func (mr *MockGlueAPIMockRecorder) DeleteDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabaseRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDatabaseRequest), arg0)
}

// DeleteDatabaseWithContext mocks base method.
func (m *MockGlueAPI) DeleteDatabaseWithContext(arg0 aws.Context, arg1 *glue.DeleteDatabaseInput, arg2 ...request.Option) (*glue.DeleteDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatabaseWithContext indicates an expected call of DeleteDatabaseWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatabaseWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDatabaseWithContext), varargs...)
}

// DeleteDevEndpoint mocks base method.
func (m *MockGlueAPI) DeleteDevEndpoint(arg0 *glue.DeleteDevEndpointInput) (*glue.DeleteDevEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevEndpoint", arg0)
	ret0, _ := ret[0].(*glue.DeleteDevEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDevEndpoint indicates an expected call of DeleteDevEndpoint.
func (mr *MockGlueAPIMockRecorder) DeleteDevEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevEndpoint", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDevEndpoint), arg0)
}

// DeleteDevEndpointRequest mocks base method.
func (m *MockGlueAPI) DeleteDevEndpointRequest(arg0 *glue.DeleteDevEndpointInput) (*request.Request, *glue.DeleteDevEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteDevEndpointOutput)
	return ret0, ret1
}

// DeleteDevEndpointRequest indicates an expected call of DeleteDevEndpointRequest.
func (mr *MockGlueAPIMockRecorder) DeleteDevEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevEndpointRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDevEndpointRequest), arg0)
}

// DeleteDevEndpointWithContext mocks base method.
func (m *MockGlueAPI) DeleteDevEndpointWithContext(arg0 aws.Context, arg1 *glue.DeleteDevEndpointInput, arg2 ...request.Option) (*glue.DeleteDevEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDevEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteDevEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDevEndpointWithContext indicates an expected call of DeleteDevEndpointWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteDevEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevEndpointWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteDevEndpointWithContext), varargs...)
}

// DeleteJob mocks base method.
func (m *MockGlueAPI) DeleteJob(arg0 *glue.DeleteJobInput) (*glue.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(*glue.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockGlueAPIMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockGlueAPI)(nil).DeleteJob), arg0)
}

// DeleteJobRequest mocks base method.
func (m *MockGlueAPI) DeleteJobRequest(arg0 *glue.DeleteJobInput) (*request.Request, *glue.DeleteJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteJobOutput)
	return ret0, ret1
}

// DeleteJobRequest indicates an expected call of DeleteJobRequest.
func (mr *MockGlueAPIMockRecorder) DeleteJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteJobRequest), arg0)
}

// DeleteJobWithContext mocks base method.
func (m *MockGlueAPI) DeleteJobWithContext(arg0 aws.Context, arg1 *glue.DeleteJobInput, arg2 ...request.Option) (*glue.DeleteJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithContext indicates an expected call of DeleteJobWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteJobWithContext), varargs...)
}

// DeleteMLTransform mocks base method.
func (m *MockGlueAPI) DeleteMLTransform(arg0 *glue.DeleteMLTransformInput) (*glue.DeleteMLTransformOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMLTransform", arg0)
	ret0, _ := ret[0].(*glue.DeleteMLTransformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMLTransform indicates an expected call of DeleteMLTransform.
func (mr *MockGlueAPIMockRecorder) DeleteMLTransform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMLTransform", reflect.TypeOf((*MockGlueAPI)(nil).DeleteMLTransform), arg0)
}

// DeleteMLTransformRequest mocks base method.
func (m *MockGlueAPI) DeleteMLTransformRequest(arg0 *glue.DeleteMLTransformInput) (*request.Request, *glue.DeleteMLTransformOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMLTransformRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteMLTransformOutput)
	return ret0, ret1
}

// DeleteMLTransformRequest indicates an expected call of DeleteMLTransformRequest.
func (mr *MockGlueAPIMockRecorder) DeleteMLTransformRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMLTransformRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteMLTransformRequest), arg0)
}

// DeleteMLTransformWithContext mocks base method.
func (m *MockGlueAPI) DeleteMLTransformWithContext(arg0 aws.Context, arg1 *glue.DeleteMLTransformInput, arg2 ...request.Option) (*glue.DeleteMLTransformOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMLTransformWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteMLTransformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMLTransformWithContext indicates an expected call of DeleteMLTransformWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteMLTransformWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMLTransformWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteMLTransformWithContext), varargs...)
}

// DeletePartition mocks base method.
func (m *MockGlueAPI) DeletePartition(arg0 *glue.DeletePartitionInput) (*glue.DeletePartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartition", arg0)
	ret0, _ := ret[0].(*glue.DeletePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePartition indicates an expected call of DeletePartition.
func (mr *MockGlueAPIMockRecorder) DeletePartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartition", reflect.TypeOf((*MockGlueAPI)(nil).DeletePartition), arg0)
}

// DeletePartitionIndex mocks base method.
func (m *MockGlueAPI) DeletePartitionIndex(arg0 *glue.DeletePartitionIndexInput) (*glue.DeletePartitionIndexOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartitionIndex", arg0)
	ret0, _ := ret[0].(*glue.DeletePartitionIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePartitionIndex indicates an expected call of DeletePartitionIndex.
func (mr *MockGlueAPIMockRecorder) DeletePartitionIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartitionIndex", reflect.TypeOf((*MockGlueAPI)(nil).DeletePartitionIndex), arg0)
}

// DeletePartitionIndexRequest mocks base method.
func (m *MockGlueAPI) DeletePartitionIndexRequest(arg0 *glue.DeletePartitionIndexInput) (*request.Request, *glue.DeletePartitionIndexOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartitionIndexRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeletePartitionIndexOutput)
	return ret0, ret1
}

// DeletePartitionIndexRequest indicates an expected call of DeletePartitionIndexRequest.
func (mr *MockGlueAPIMockRecorder) DeletePartitionIndexRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartitionIndexRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeletePartitionIndexRequest), arg0)
}

// DeletePartitionIndexWithContext mocks base method.
func (m *MockGlueAPI) DeletePartitionIndexWithContext(arg0 aws.Context, arg1 *glue.DeletePartitionIndexInput, arg2 ...request.Option) (*glue.DeletePartitionIndexOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePartitionIndexWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeletePartitionIndexOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePartitionIndexWithContext indicates an expected call of DeletePartitionIndexWithContext.
func (mr *MockGlueAPIMockRecorder) DeletePartitionIndexWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartitionIndexWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeletePartitionIndexWithContext), varargs...)
}

// DeletePartitionRequest mocks base method.
func (m *MockGlueAPI) DeletePartitionRequest(arg0 *glue.DeletePartitionInput) (*request.Request, *glue.DeletePartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeletePartitionOutput)
	return ret0, ret1
}

// DeletePartitionRequest indicates an expected call of DeletePartitionRequest.
func (mr *MockGlueAPIMockRecorder) DeletePartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeletePartitionRequest), arg0)
}

// DeletePartitionWithContext mocks base method.
func (m *MockGlueAPI) DeletePartitionWithContext(arg0 aws.Context, arg1 *glue.DeletePartitionInput, arg2 ...request.Option) (*glue.DeletePartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeletePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePartitionWithContext indicates an expected call of DeletePartitionWithContext.
func (mr *MockGlueAPIMockRecorder) DeletePartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeletePartitionWithContext), varargs...)
}

// DeleteRegistry mocks base method.
func (m *MockGlueAPI) DeleteRegistry(arg0 *glue.DeleteRegistryInput) (*glue.DeleteRegistryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistry", arg0)
	ret0, _ := ret[0].(*glue.DeleteRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistry indicates an expected call of DeleteRegistry.
func (mr *MockGlueAPIMockRecorder) DeleteRegistry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistry", reflect.TypeOf((*MockGlueAPI)(nil).DeleteRegistry), arg0)
}

// DeleteRegistryRequest mocks base method.
func (m *MockGlueAPI) DeleteRegistryRequest(arg0 *glue.DeleteRegistryInput) (*request.Request, *glue.DeleteRegistryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteRegistryOutput)
	return ret0, ret1
}

// DeleteRegistryRequest indicates an expected call of DeleteRegistryRequest.
func (mr *MockGlueAPIMockRecorder) DeleteRegistryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteRegistryRequest), arg0)
}

// DeleteRegistryWithContext mocks base method.
func (m *MockGlueAPI) DeleteRegistryWithContext(arg0 aws.Context, arg1 *glue.DeleteRegistryInput, arg2 ...request.Option) (*glue.DeleteRegistryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistryWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistryWithContext indicates an expected call of DeleteRegistryWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteRegistryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistryWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteRegistryWithContext), varargs...)
}

// DeleteResourcePolicy mocks base method.
func (m *MockGlueAPI) DeleteResourcePolicy(arg0 *glue.DeleteResourcePolicyInput) (*glue.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", arg0)
	ret0, _ := ret[0].(*glue.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockGlueAPIMockRecorder) DeleteResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockGlueAPI)(nil).DeleteResourcePolicy), arg0)
}

// DeleteResourcePolicyRequest mocks base method.
func (m *MockGlueAPI) DeleteResourcePolicyRequest(arg0 *glue.DeleteResourcePolicyInput) (*request.Request, *glue.DeleteResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteResourcePolicyOutput)
	return ret0, ret1
}

// DeleteResourcePolicyRequest indicates an expected call of DeleteResourcePolicyRequest.
func (mr *MockGlueAPIMockRecorder) DeleteResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteResourcePolicyRequest), arg0)
}

// DeleteResourcePolicyWithContext mocks base method.
func (m *MockGlueAPI) DeleteResourcePolicyWithContext(arg0 aws.Context, arg1 *glue.DeleteResourcePolicyInput, arg2 ...request.Option) (*glue.DeleteResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResourcePolicyWithContext indicates an expected call of DeleteResourcePolicyWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicyWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteResourcePolicyWithContext), varargs...)
}

// DeleteSchema mocks base method.
func (m *MockGlueAPI) DeleteSchema(arg0 *glue.DeleteSchemaInput) (*glue.DeleteSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchema", arg0)
	ret0, _ := ret[0].(*glue.DeleteSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchema indicates an expected call of DeleteSchema.
func (mr *MockGlueAPIMockRecorder) DeleteSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSchema), arg0)
}

// DeleteSchemaRequest mocks base method.
func (m *MockGlueAPI) DeleteSchemaRequest(arg0 *glue.DeleteSchemaInput) (*request.Request, *glue.DeleteSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteSchemaOutput)
	return ret0, ret1
}

// DeleteSchemaRequest indicates an expected call of DeleteSchemaRequest.
func (mr *MockGlueAPIMockRecorder) DeleteSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSchemaRequest), arg0)
}

// DeleteSchemaVersions mocks base method.
func (m *MockGlueAPI) DeleteSchemaVersions(arg0 *glue.DeleteSchemaVersionsInput) (*glue.DeleteSchemaVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaVersions", arg0)
	ret0, _ := ret[0].(*glue.DeleteSchemaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaVersions indicates an expected call of DeleteSchemaVersions.
func (mr *MockGlueAPIMockRecorder) DeleteSchemaVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaVersions", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSchemaVersions), arg0)
}

// DeleteSchemaVersionsRequest mocks base method.
func (m *MockGlueAPI) DeleteSchemaVersionsRequest(arg0 *glue.DeleteSchemaVersionsInput) (*request.Request, *glue.DeleteSchemaVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchemaVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteSchemaVersionsOutput)
	return ret0, ret1
}

// DeleteSchemaVersionsRequest indicates an expected call of DeleteSchemaVersionsRequest.
func (mr *MockGlueAPIMockRecorder) DeleteSchemaVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaVersionsRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSchemaVersionsRequest), arg0)
}

// DeleteSchemaVersionsWithContext mocks base method.
func (m *MockGlueAPI) DeleteSchemaVersionsWithContext(arg0 aws.Context, arg1 *glue.DeleteSchemaVersionsInput, arg2 ...request.Option) (*glue.DeleteSchemaVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchemaVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteSchemaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaVersionsWithContext indicates an expected call of DeleteSchemaVersionsWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteSchemaVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaVersionsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSchemaVersionsWithContext), varargs...)
}

// DeleteSchemaWithContext mocks base method.
func (m *MockGlueAPI) DeleteSchemaWithContext(arg0 aws.Context, arg1 *glue.DeleteSchemaInput, arg2 ...request.Option) (*glue.DeleteSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchemaWithContext indicates an expected call of DeleteSchemaWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchemaWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSchemaWithContext), varargs...)
}

// DeleteSecurityConfiguration mocks base method.
func (m *MockGlueAPI) DeleteSecurityConfiguration(arg0 *glue.DeleteSecurityConfigurationInput) (*glue.DeleteSecurityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityConfiguration", arg0)
	ret0, _ := ret[0].(*glue.DeleteSecurityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityConfiguration indicates an expected call of DeleteSecurityConfiguration.
func (mr *MockGlueAPIMockRecorder) DeleteSecurityConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityConfiguration", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSecurityConfiguration), arg0)
}

// DeleteSecurityConfigurationRequest mocks base method.
func (m *MockGlueAPI) DeleteSecurityConfigurationRequest(arg0 *glue.DeleteSecurityConfigurationInput) (*request.Request, *glue.DeleteSecurityConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteSecurityConfigurationOutput)
	return ret0, ret1
}

// DeleteSecurityConfigurationRequest indicates an expected call of DeleteSecurityConfigurationRequest.
func (mr *MockGlueAPIMockRecorder) DeleteSecurityConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityConfigurationRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSecurityConfigurationRequest), arg0)
}

// DeleteSecurityConfigurationWithContext mocks base method.
func (m *MockGlueAPI) DeleteSecurityConfigurationWithContext(arg0 aws.Context, arg1 *glue.DeleteSecurityConfigurationInput, arg2 ...request.Option) (*glue.DeleteSecurityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecurityConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteSecurityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityConfigurationWithContext indicates an expected call of DeleteSecurityConfigurationWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteSecurityConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityConfigurationWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSecurityConfigurationWithContext), varargs...)
}

// DeleteSession mocks base method.
func (m *MockGlueAPI) DeleteSession(arg0 *glue.DeleteSessionInput) (*glue.DeleteSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0)
	ret0, _ := ret[0].(*glue.DeleteSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockGlueAPIMockRecorder) DeleteSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSession), arg0)
}

// DeleteSessionRequest mocks base method.
func (m *MockGlueAPI) DeleteSessionRequest(arg0 *glue.DeleteSessionInput) (*request.Request, *glue.DeleteSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteSessionOutput)
	return ret0, ret1
}

// DeleteSessionRequest indicates an expected call of DeleteSessionRequest.
func (mr *MockGlueAPIMockRecorder) DeleteSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSessionRequest), arg0)
}

// DeleteSessionWithContext mocks base method.
func (m *MockGlueAPI) DeleteSessionWithContext(arg0 aws.Context, arg1 *glue.DeleteSessionInput, arg2 ...request.Option) (*glue.DeleteSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSessionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSessionWithContext indicates an expected call of DeleteSessionWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteSessionWithContext), varargs...)
}

// DeleteTable mocks base method.
func (m *MockGlueAPI) DeleteTable(arg0 *glue.DeleteTableInput) (*glue.DeleteTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", arg0)
	ret0, _ := ret[0].(*glue.DeleteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockGlueAPIMockRecorder) DeleteTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTable), arg0)
}

// DeleteTableOptimizer mocks base method.
func (m *MockGlueAPI) DeleteTableOptimizer(arg0 *glue.DeleteTableOptimizerInput) (*glue.DeleteTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTableOptimizer", arg0)
	ret0, _ := ret[0].(*glue.DeleteTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTableOptimizer indicates an expected call of DeleteTableOptimizer.
func (mr *MockGlueAPIMockRecorder) DeleteTableOptimizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableOptimizer", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTableOptimizer), arg0)
}

// DeleteTableOptimizerRequest mocks base method.
func (m *MockGlueAPI) DeleteTableOptimizerRequest(arg0 *glue.DeleteTableOptimizerInput) (*request.Request, *glue.DeleteTableOptimizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTableOptimizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteTableOptimizerOutput)
	return ret0, ret1
}

// DeleteTableOptimizerRequest indicates an expected call of DeleteTableOptimizerRequest.
func (mr *MockGlueAPIMockRecorder) DeleteTableOptimizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableOptimizerRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTableOptimizerRequest), arg0)
}

// DeleteTableOptimizerWithContext mocks base method.
func (m *MockGlueAPI) DeleteTableOptimizerWithContext(arg0 aws.Context, arg1 *glue.DeleteTableOptimizerInput, arg2 ...request.Option) (*glue.DeleteTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTableOptimizerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTableOptimizerWithContext indicates an expected call of DeleteTableOptimizerWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteTableOptimizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableOptimizerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTableOptimizerWithContext), varargs...)
}

// DeleteTableRequest mocks base method.
func (m *MockGlueAPI) DeleteTableRequest(arg0 *glue.DeleteTableInput) (*request.Request, *glue.DeleteTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteTableOutput)
	return ret0, ret1
}

// DeleteTableRequest indicates an expected call of DeleteTableRequest.
func (mr *MockGlueAPIMockRecorder) DeleteTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTableRequest), arg0)
}

// DeleteTableVersion mocks base method.
func (m *MockGlueAPI) DeleteTableVersion(arg0 *glue.DeleteTableVersionInput) (*glue.DeleteTableVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTableVersion", arg0)
	ret0, _ := ret[0].(*glue.DeleteTableVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTableVersion indicates an expected call of DeleteTableVersion.
func (mr *MockGlueAPIMockRecorder) DeleteTableVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableVersion", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTableVersion), arg0)
}

// DeleteTableVersionRequest mocks base method.
func (m *MockGlueAPI) DeleteTableVersionRequest(arg0 *glue.DeleteTableVersionInput) (*request.Request, *glue.DeleteTableVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTableVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteTableVersionOutput)
	return ret0, ret1
}

// DeleteTableVersionRequest indicates an expected call of DeleteTableVersionRequest.
func (mr *MockGlueAPIMockRecorder) DeleteTableVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableVersionRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTableVersionRequest), arg0)
}

// DeleteTableVersionWithContext mocks base method.
func (m *MockGlueAPI) DeleteTableVersionWithContext(arg0 aws.Context, arg1 *glue.DeleteTableVersionInput, arg2 ...request.Option) (*glue.DeleteTableVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTableVersionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteTableVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTableVersionWithContext indicates an expected call of DeleteTableVersionWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteTableVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableVersionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTableVersionWithContext), varargs...)
}

// DeleteTableWithContext mocks base method.
func (m *MockGlueAPI) DeleteTableWithContext(arg0 aws.Context, arg1 *glue.DeleteTableInput, arg2 ...request.Option) (*glue.DeleteTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTableWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTableWithContext indicates an expected call of DeleteTableWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTableWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTableWithContext), varargs...)
}

// DeleteTrigger mocks base method.
func (m *MockGlueAPI) DeleteTrigger(arg0 *glue.DeleteTriggerInput) (*glue.DeleteTriggerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrigger", arg0)
	ret0, _ := ret[0].(*glue.DeleteTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrigger indicates an expected call of DeleteTrigger.
func (mr *MockGlueAPIMockRecorder) DeleteTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrigger", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTrigger), arg0)
}

// DeleteTriggerRequest mocks base method.
func (m *MockGlueAPI) DeleteTriggerRequest(arg0 *glue.DeleteTriggerInput) (*request.Request, *glue.DeleteTriggerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteTriggerOutput)
	return ret0, ret1
}

// DeleteTriggerRequest indicates an expected call of DeleteTriggerRequest.
func (mr *MockGlueAPIMockRecorder) DeleteTriggerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTriggerRequest), arg0)
}

// DeleteTriggerWithContext mocks base method.
func (m *MockGlueAPI) DeleteTriggerWithContext(arg0 aws.Context, arg1 *glue.DeleteTriggerInput, arg2 ...request.Option) (*glue.DeleteTriggerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTriggerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTriggerWithContext indicates an expected call of DeleteTriggerWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteTriggerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteTriggerWithContext), varargs...)
}

// DeleteUsageProfile mocks base method.
func (m *MockGlueAPI) DeleteUsageProfile(arg0 *glue.DeleteUsageProfileInput) (*glue.DeleteUsageProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsageProfile", arg0)
	ret0, _ := ret[0].(*glue.DeleteUsageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsageProfile indicates an expected call of DeleteUsageProfile.
func (mr *MockGlueAPIMockRecorder) DeleteUsageProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageProfile", reflect.TypeOf((*MockGlueAPI)(nil).DeleteUsageProfile), arg0)
}

// DeleteUsageProfileRequest mocks base method.
func (m *MockGlueAPI) DeleteUsageProfileRequest(arg0 *glue.DeleteUsageProfileInput) (*request.Request, *glue.DeleteUsageProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsageProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteUsageProfileOutput)
	return ret0, ret1
}

// DeleteUsageProfileRequest indicates an expected call of DeleteUsageProfileRequest.
func (mr *MockGlueAPIMockRecorder) DeleteUsageProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageProfileRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteUsageProfileRequest), arg0)
}

// DeleteUsageProfileWithContext mocks base method.
func (m *MockGlueAPI) DeleteUsageProfileWithContext(arg0 aws.Context, arg1 *glue.DeleteUsageProfileInput, arg2 ...request.Option) (*glue.DeleteUsageProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUsageProfileWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteUsageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsageProfileWithContext indicates an expected call of DeleteUsageProfileWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteUsageProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsageProfileWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteUsageProfileWithContext), varargs...)
}

// DeleteUserDefinedFunction mocks base method.
func (m *MockGlueAPI) DeleteUserDefinedFunction(arg0 *glue.DeleteUserDefinedFunctionInput) (*glue.DeleteUserDefinedFunctionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserDefinedFunction", arg0)
	ret0, _ := ret[0].(*glue.DeleteUserDefinedFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserDefinedFunction indicates an expected call of DeleteUserDefinedFunction.
func (mr *MockGlueAPIMockRecorder) DeleteUserDefinedFunction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserDefinedFunction", reflect.TypeOf((*MockGlueAPI)(nil).DeleteUserDefinedFunction), arg0)
}

// DeleteUserDefinedFunctionRequest mocks base method.
func (m *MockGlueAPI) DeleteUserDefinedFunctionRequest(arg0 *glue.DeleteUserDefinedFunctionInput) (*request.Request, *glue.DeleteUserDefinedFunctionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserDefinedFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteUserDefinedFunctionOutput)
	return ret0, ret1
}

// DeleteUserDefinedFunctionRequest indicates an expected call of DeleteUserDefinedFunctionRequest.
func (mr *MockGlueAPIMockRecorder) DeleteUserDefinedFunctionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserDefinedFunctionRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteUserDefinedFunctionRequest), arg0)
}

// DeleteUserDefinedFunctionWithContext mocks base method.
func (m *MockGlueAPI) DeleteUserDefinedFunctionWithContext(arg0 aws.Context, arg1 *glue.DeleteUserDefinedFunctionInput, arg2 ...request.Option) (*glue.DeleteUserDefinedFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserDefinedFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteUserDefinedFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserDefinedFunctionWithContext indicates an expected call of DeleteUserDefinedFunctionWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteUserDefinedFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserDefinedFunctionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteUserDefinedFunctionWithContext), varargs...)
}

// DeleteWorkflow mocks base method.
func (m *MockGlueAPI) DeleteWorkflow(arg0 *glue.DeleteWorkflowInput) (*glue.DeleteWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflow", arg0)
	ret0, _ := ret[0].(*glue.DeleteWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflow indicates an expected call of DeleteWorkflow.
func (mr *MockGlueAPIMockRecorder) DeleteWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflow", reflect.TypeOf((*MockGlueAPI)(nil).DeleteWorkflow), arg0)
}

// DeleteWorkflowRequest mocks base method.
func (m *MockGlueAPI) DeleteWorkflowRequest(arg0 *glue.DeleteWorkflowInput) (*request.Request, *glue.DeleteWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.DeleteWorkflowOutput)
	return ret0, ret1
}

// DeleteWorkflowRequest indicates an expected call of DeleteWorkflowRequest.
func (mr *MockGlueAPIMockRecorder) DeleteWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowRequest", reflect.TypeOf((*MockGlueAPI)(nil).DeleteWorkflowRequest), arg0)
}

// DeleteWorkflowWithContext mocks base method.
func (m *MockGlueAPI) DeleteWorkflowWithContext(arg0 aws.Context, arg1 *glue.DeleteWorkflowInput, arg2 ...request.Option) (*glue.DeleteWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*glue.DeleteWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkflowWithContext indicates an expected call of DeleteWorkflowWithContext.
func (mr *MockGlueAPIMockRecorder) DeleteWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowWithContext", reflect.TypeOf((*MockGlueAPI)(nil).DeleteWorkflowWithContext), varargs...)
}

// GetBlueprint mocks base method.
func (m *MockGlueAPI) GetBlueprint(arg0 *glue.GetBlueprintInput) (*glue.GetBlueprintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprint", arg0)
	ret0, _ := ret[0].(*glue.GetBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprint indicates an expected call of GetBlueprint.
func (mr *MockGlueAPIMockRecorder) GetBlueprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprint", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprint), arg0)
}

// GetBlueprintRequest mocks base method.
func (m *MockGlueAPI) GetBlueprintRequest(arg0 *glue.GetBlueprintInput) (*request.Request, *glue.GetBlueprintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetBlueprintOutput)
	return ret0, ret1
}

// GetBlueprintRequest indicates an expected call of GetBlueprintRequest.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRequest), arg0)
}

// GetBlueprintRun mocks base method.
func (m *MockGlueAPI) GetBlueprintRun(arg0 *glue.GetBlueprintRunInput) (*glue.GetBlueprintRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprintRun", arg0)
	ret0, _ := ret[0].(*glue.GetBlueprintRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprintRun indicates an expected call of GetBlueprintRun.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRun", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRun), arg0)
}

// GetBlueprintRunRequest mocks base method.
func (m *MockGlueAPI) GetBlueprintRunRequest(arg0 *glue.GetBlueprintRunInput) (*request.Request, *glue.GetBlueprintRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprintRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetBlueprintRunOutput)
	return ret0, ret1
}

// GetBlueprintRunRequest indicates an expected call of GetBlueprintRunRequest.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRunRequest), arg0)
}

// GetBlueprintRunWithContext mocks base method.
func (m *MockGlueAPI) GetBlueprintRunWithContext(arg0 aws.Context, arg1 *glue.GetBlueprintRunInput, arg2 ...request.Option) (*glue.GetBlueprintRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlueprintRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetBlueprintRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprintRunWithContext indicates an expected call of GetBlueprintRunWithContext.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRunWithContext), varargs...)
}

// GetBlueprintRuns mocks base method.
func (m *MockGlueAPI) GetBlueprintRuns(arg0 *glue.GetBlueprintRunsInput) (*glue.GetBlueprintRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprintRuns", arg0)
	ret0, _ := ret[0].(*glue.GetBlueprintRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprintRuns indicates an expected call of GetBlueprintRuns.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRuns", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRuns), arg0)
}

// GetBlueprintRunsPages mocks base method.
func (m *MockGlueAPI) GetBlueprintRunsPages(arg0 *glue.GetBlueprintRunsInput, arg1 func(*glue.GetBlueprintRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprintRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBlueprintRunsPages indicates an expected call of GetBlueprintRunsPages.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRunsPages), arg0, arg1)
}

// GetBlueprintRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetBlueprintRunsPagesWithContext(arg0 aws.Context, arg1 *glue.GetBlueprintRunsInput, arg2 func(*glue.GetBlueprintRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlueprintRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBlueprintRunsPagesWithContext indicates an expected call of GetBlueprintRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRunsPagesWithContext), varargs...)
}

// GetBlueprintRunsRequest mocks base method.
func (m *MockGlueAPI) GetBlueprintRunsRequest(arg0 *glue.GetBlueprintRunsInput) (*request.Request, *glue.GetBlueprintRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlueprintRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetBlueprintRunsOutput)
	return ret0, ret1
}

// GetBlueprintRunsRequest indicates an expected call of GetBlueprintRunsRequest.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRunsRequest), arg0)
}

// GetBlueprintRunsWithContext mocks base method.
func (m *MockGlueAPI) GetBlueprintRunsWithContext(arg0 aws.Context, arg1 *glue.GetBlueprintRunsInput, arg2 ...request.Option) (*glue.GetBlueprintRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlueprintRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetBlueprintRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprintRunsWithContext indicates an expected call of GetBlueprintRunsWithContext.
func (mr *MockGlueAPIMockRecorder) GetBlueprintRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintRunsWithContext), varargs...)
}

// GetBlueprintWithContext mocks base method.
func (m *MockGlueAPI) GetBlueprintWithContext(arg0 aws.Context, arg1 *glue.GetBlueprintInput, arg2 ...request.Option) (*glue.GetBlueprintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlueprintWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlueprintWithContext indicates an expected call of GetBlueprintWithContext.
func (mr *MockGlueAPIMockRecorder) GetBlueprintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlueprintWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetBlueprintWithContext), varargs...)
}

// GetCatalogImportStatus mocks base method.
func (m *MockGlueAPI) GetCatalogImportStatus(arg0 *glue.GetCatalogImportStatusInput) (*glue.GetCatalogImportStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogImportStatus", arg0)
	ret0, _ := ret[0].(*glue.GetCatalogImportStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogImportStatus indicates an expected call of GetCatalogImportStatus.
func (mr *MockGlueAPIMockRecorder) GetCatalogImportStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogImportStatus", reflect.TypeOf((*MockGlueAPI)(nil).GetCatalogImportStatus), arg0)
}

// GetCatalogImportStatusRequest mocks base method.
func (m *MockGlueAPI) GetCatalogImportStatusRequest(arg0 *glue.GetCatalogImportStatusInput) (*request.Request, *glue.GetCatalogImportStatusOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCatalogImportStatusRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetCatalogImportStatusOutput)
	return ret0, ret1
}

// GetCatalogImportStatusRequest indicates an expected call of GetCatalogImportStatusRequest.
func (mr *MockGlueAPIMockRecorder) GetCatalogImportStatusRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogImportStatusRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetCatalogImportStatusRequest), arg0)
}

// GetCatalogImportStatusWithContext mocks base method.
func (m *MockGlueAPI) GetCatalogImportStatusWithContext(arg0 aws.Context, arg1 *glue.GetCatalogImportStatusInput, arg2 ...request.Option) (*glue.GetCatalogImportStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogImportStatusWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetCatalogImportStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogImportStatusWithContext indicates an expected call of GetCatalogImportStatusWithContext.
func (mr *MockGlueAPIMockRecorder) GetCatalogImportStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogImportStatusWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetCatalogImportStatusWithContext), varargs...)
}

// GetClassifier mocks base method.
func (m *MockGlueAPI) GetClassifier(arg0 *glue.GetClassifierInput) (*glue.GetClassifierOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassifier", arg0)
	ret0, _ := ret[0].(*glue.GetClassifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassifier indicates an expected call of GetClassifier.
func (mr *MockGlueAPIMockRecorder) GetClassifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifier", reflect.TypeOf((*MockGlueAPI)(nil).GetClassifier), arg0)
}

// GetClassifierRequest mocks base method.
func (m *MockGlueAPI) GetClassifierRequest(arg0 *glue.GetClassifierInput) (*request.Request, *glue.GetClassifierOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassifierRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetClassifierOutput)
	return ret0, ret1
}

// GetClassifierRequest indicates an expected call of GetClassifierRequest.
func (mr *MockGlueAPIMockRecorder) GetClassifierRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifierRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetClassifierRequest), arg0)
}

// GetClassifierWithContext mocks base method.
func (m *MockGlueAPI) GetClassifierWithContext(arg0 aws.Context, arg1 *glue.GetClassifierInput, arg2 ...request.Option) (*glue.GetClassifierOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClassifierWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetClassifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassifierWithContext indicates an expected call of GetClassifierWithContext.
func (mr *MockGlueAPIMockRecorder) GetClassifierWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifierWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetClassifierWithContext), varargs...)
}

// GetClassifiers mocks base method.
func (m *MockGlueAPI) GetClassifiers(arg0 *glue.GetClassifiersInput) (*glue.GetClassifiersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassifiers", arg0)
	ret0, _ := ret[0].(*glue.GetClassifiersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassifiers indicates an expected call of GetClassifiers.
func (mr *MockGlueAPIMockRecorder) GetClassifiers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifiers", reflect.TypeOf((*MockGlueAPI)(nil).GetClassifiers), arg0)
}

// GetClassifiersPages mocks base method.
func (m *MockGlueAPI) GetClassifiersPages(arg0 *glue.GetClassifiersInput, arg1 func(*glue.GetClassifiersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassifiersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClassifiersPages indicates an expected call of GetClassifiersPages.
func (mr *MockGlueAPIMockRecorder) GetClassifiersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifiersPages", reflect.TypeOf((*MockGlueAPI)(nil).GetClassifiersPages), arg0, arg1)
}

// GetClassifiersPagesWithContext mocks base method.
func (m *MockGlueAPI) GetClassifiersPagesWithContext(arg0 aws.Context, arg1 *glue.GetClassifiersInput, arg2 func(*glue.GetClassifiersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClassifiersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClassifiersPagesWithContext indicates an expected call of GetClassifiersPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetClassifiersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifiersPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetClassifiersPagesWithContext), varargs...)
}

// GetClassifiersRequest mocks base method.
func (m *MockGlueAPI) GetClassifiersRequest(arg0 *glue.GetClassifiersInput) (*request.Request, *glue.GetClassifiersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassifiersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetClassifiersOutput)
	return ret0, ret1
}

// GetClassifiersRequest indicates an expected call of GetClassifiersRequest.
func (mr *MockGlueAPIMockRecorder) GetClassifiersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifiersRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetClassifiersRequest), arg0)
}

// GetClassifiersWithContext mocks base method.
func (m *MockGlueAPI) GetClassifiersWithContext(arg0 aws.Context, arg1 *glue.GetClassifiersInput, arg2 ...request.Option) (*glue.GetClassifiersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClassifiersWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetClassifiersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassifiersWithContext indicates an expected call of GetClassifiersWithContext.
func (mr *MockGlueAPIMockRecorder) GetClassifiersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifiersWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetClassifiersWithContext), varargs...)
}

// GetColumnStatisticsForPartition mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsForPartition(arg0 *glue.GetColumnStatisticsForPartitionInput) (*glue.GetColumnStatisticsForPartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsForPartition", arg0)
	ret0, _ := ret[0].(*glue.GetColumnStatisticsForPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnStatisticsForPartition indicates an expected call of GetColumnStatisticsForPartition.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsForPartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsForPartition", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsForPartition), arg0)
}

// GetColumnStatisticsForPartitionRequest mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsForPartitionRequest(arg0 *glue.GetColumnStatisticsForPartitionInput) (*request.Request, *glue.GetColumnStatisticsForPartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsForPartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetColumnStatisticsForPartitionOutput)
	return ret0, ret1
}

// GetColumnStatisticsForPartitionRequest indicates an expected call of GetColumnStatisticsForPartitionRequest.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsForPartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsForPartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsForPartitionRequest), arg0)
}

// GetColumnStatisticsForPartitionWithContext mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsForPartitionWithContext(arg0 aws.Context, arg1 *glue.GetColumnStatisticsForPartitionInput, arg2 ...request.Option) (*glue.GetColumnStatisticsForPartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetColumnStatisticsForPartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetColumnStatisticsForPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnStatisticsForPartitionWithContext indicates an expected call of GetColumnStatisticsForPartitionWithContext.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsForPartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsForPartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsForPartitionWithContext), varargs...)
}

// GetColumnStatisticsForTable mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsForTable(arg0 *glue.GetColumnStatisticsForTableInput) (*glue.GetColumnStatisticsForTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsForTable", arg0)
	ret0, _ := ret[0].(*glue.GetColumnStatisticsForTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnStatisticsForTable indicates an expected call of GetColumnStatisticsForTable.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsForTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsForTable", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsForTable), arg0)
}

// GetColumnStatisticsForTableRequest mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsForTableRequest(arg0 *glue.GetColumnStatisticsForTableInput) (*request.Request, *glue.GetColumnStatisticsForTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsForTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetColumnStatisticsForTableOutput)
	return ret0, ret1
}

// GetColumnStatisticsForTableRequest indicates an expected call of GetColumnStatisticsForTableRequest.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsForTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsForTableRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsForTableRequest), arg0)
}

// GetColumnStatisticsForTableWithContext mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsForTableWithContext(arg0 aws.Context, arg1 *glue.GetColumnStatisticsForTableInput, arg2 ...request.Option) (*glue.GetColumnStatisticsForTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetColumnStatisticsForTableWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetColumnStatisticsForTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnStatisticsForTableWithContext indicates an expected call of GetColumnStatisticsForTableWithContext.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsForTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsForTableWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsForTableWithContext), varargs...)
}

// GetColumnStatisticsTaskRun mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsTaskRun(arg0 *glue.GetColumnStatisticsTaskRunInput) (*glue.GetColumnStatisticsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsTaskRun", arg0)
	ret0, _ := ret[0].(*glue.GetColumnStatisticsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnStatisticsTaskRun indicates an expected call of GetColumnStatisticsTaskRun.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsTaskRun), arg0)
}

// GetColumnStatisticsTaskRunRequest mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsTaskRunRequest(arg0 *glue.GetColumnStatisticsTaskRunInput) (*request.Request, *glue.GetColumnStatisticsTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetColumnStatisticsTaskRunOutput)
	return ret0, ret1
}

// GetColumnStatisticsTaskRunRequest indicates an expected call of GetColumnStatisticsTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsTaskRunRequest), arg0)
}

// GetColumnStatisticsTaskRunWithContext mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsTaskRunWithContext(arg0 aws.Context, arg1 *glue.GetColumnStatisticsTaskRunInput, arg2 ...request.Option) (*glue.GetColumnStatisticsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetColumnStatisticsTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetColumnStatisticsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnStatisticsTaskRunWithContext indicates an expected call of GetColumnStatisticsTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsTaskRunWithContext), varargs...)
}

// GetColumnStatisticsTaskRuns mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsTaskRuns(arg0 *glue.GetColumnStatisticsTaskRunsInput) (*glue.GetColumnStatisticsTaskRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsTaskRuns", arg0)
	ret0, _ := ret[0].(*glue.GetColumnStatisticsTaskRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnStatisticsTaskRuns indicates an expected call of GetColumnStatisticsTaskRuns.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsTaskRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsTaskRuns", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsTaskRuns), arg0)
}

// GetColumnStatisticsTaskRunsPages mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsTaskRunsPages(arg0 *glue.GetColumnStatisticsTaskRunsInput, arg1 func(*glue.GetColumnStatisticsTaskRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsTaskRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetColumnStatisticsTaskRunsPages indicates an expected call of GetColumnStatisticsTaskRunsPages.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsTaskRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsTaskRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsTaskRunsPages), arg0, arg1)
}

// GetColumnStatisticsTaskRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsTaskRunsPagesWithContext(arg0 aws.Context, arg1 *glue.GetColumnStatisticsTaskRunsInput, arg2 func(*glue.GetColumnStatisticsTaskRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetColumnStatisticsTaskRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetColumnStatisticsTaskRunsPagesWithContext indicates an expected call of GetColumnStatisticsTaskRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsTaskRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsTaskRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsTaskRunsPagesWithContext), varargs...)
}

// GetColumnStatisticsTaskRunsRequest mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsTaskRunsRequest(arg0 *glue.GetColumnStatisticsTaskRunsInput) (*request.Request, *glue.GetColumnStatisticsTaskRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnStatisticsTaskRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetColumnStatisticsTaskRunsOutput)
	return ret0, ret1
}

// GetColumnStatisticsTaskRunsRequest indicates an expected call of GetColumnStatisticsTaskRunsRequest.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsTaskRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsTaskRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsTaskRunsRequest), arg0)
}

// GetColumnStatisticsTaskRunsWithContext mocks base method.
func (m *MockGlueAPI) GetColumnStatisticsTaskRunsWithContext(arg0 aws.Context, arg1 *glue.GetColumnStatisticsTaskRunsInput, arg2 ...request.Option) (*glue.GetColumnStatisticsTaskRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetColumnStatisticsTaskRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetColumnStatisticsTaskRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnStatisticsTaskRunsWithContext indicates an expected call of GetColumnStatisticsTaskRunsWithContext.
func (mr *MockGlueAPIMockRecorder) GetColumnStatisticsTaskRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnStatisticsTaskRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetColumnStatisticsTaskRunsWithContext), varargs...)
}

// GetConnection mocks base method.
func (m *MockGlueAPI) GetConnection(arg0 *glue.GetConnectionInput) (*glue.GetConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", arg0)
	ret0, _ := ret[0].(*glue.GetConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockGlueAPIMockRecorder) GetConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockGlueAPI)(nil).GetConnection), arg0)
}

// GetConnectionRequest mocks base method.
func (m *MockGlueAPI) GetConnectionRequest(arg0 *glue.GetConnectionInput) (*request.Request, *glue.GetConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetConnectionOutput)
	return ret0, ret1
}

// GetConnectionRequest indicates an expected call of GetConnectionRequest.
func (mr *MockGlueAPIMockRecorder) GetConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetConnectionRequest), arg0)
}

// GetConnectionWithContext mocks base method.
func (m *MockGlueAPI) GetConnectionWithContext(arg0 aws.Context, arg1 *glue.GetConnectionInput, arg2 ...request.Option) (*glue.GetConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionWithContext indicates an expected call of GetConnectionWithContext.
func (mr *MockGlueAPIMockRecorder) GetConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetConnectionWithContext), varargs...)
}

// GetConnections mocks base method.
func (m *MockGlueAPI) GetConnections(arg0 *glue.GetConnectionsInput) (*glue.GetConnectionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnections", arg0)
	ret0, _ := ret[0].(*glue.GetConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnections indicates an expected call of GetConnections.
func (mr *MockGlueAPIMockRecorder) GetConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnections", reflect.TypeOf((*MockGlueAPI)(nil).GetConnections), arg0)
}

// GetConnectionsPages mocks base method.
func (m *MockGlueAPI) GetConnectionsPages(arg0 *glue.GetConnectionsInput, arg1 func(*glue.GetConnectionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectionsPages indicates an expected call of GetConnectionsPages.
func (mr *MockGlueAPIMockRecorder) GetConnectionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetConnectionsPages), arg0, arg1)
}

// GetConnectionsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetConnectionsPagesWithContext(arg0 aws.Context, arg1 *glue.GetConnectionsInput, arg2 func(*glue.GetConnectionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetConnectionsPagesWithContext indicates an expected call of GetConnectionsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetConnectionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetConnectionsPagesWithContext), varargs...)
}

// GetConnectionsRequest mocks base method.
func (m *MockGlueAPI) GetConnectionsRequest(arg0 *glue.GetConnectionsInput) (*request.Request, *glue.GetConnectionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetConnectionsOutput)
	return ret0, ret1
}

// GetConnectionsRequest indicates an expected call of GetConnectionsRequest.
func (mr *MockGlueAPIMockRecorder) GetConnectionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetConnectionsRequest), arg0)
}

// GetConnectionsWithContext mocks base method.
func (m *MockGlueAPI) GetConnectionsWithContext(arg0 aws.Context, arg1 *glue.GetConnectionsInput, arg2 ...request.Option) (*glue.GetConnectionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnectionsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetConnectionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionsWithContext indicates an expected call of GetConnectionsWithContext.
func (mr *MockGlueAPIMockRecorder) GetConnectionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetConnectionsWithContext), varargs...)
}

// GetCrawler mocks base method.
func (m *MockGlueAPI) GetCrawler(arg0 *glue.GetCrawlerInput) (*glue.GetCrawlerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawler", arg0)
	ret0, _ := ret[0].(*glue.GetCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawler indicates an expected call of GetCrawler.
func (mr *MockGlueAPIMockRecorder) GetCrawler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawler", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawler), arg0)
}

// GetCrawlerMetrics mocks base method.
func (m *MockGlueAPI) GetCrawlerMetrics(arg0 *glue.GetCrawlerMetricsInput) (*glue.GetCrawlerMetricsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlerMetrics", arg0)
	ret0, _ := ret[0].(*glue.GetCrawlerMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlerMetrics indicates an expected call of GetCrawlerMetrics.
func (mr *MockGlueAPIMockRecorder) GetCrawlerMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerMetrics", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlerMetrics), arg0)
}

// GetCrawlerMetricsPages mocks base method.
func (m *MockGlueAPI) GetCrawlerMetricsPages(arg0 *glue.GetCrawlerMetricsInput, arg1 func(*glue.GetCrawlerMetricsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlerMetricsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCrawlerMetricsPages indicates an expected call of GetCrawlerMetricsPages.
func (mr *MockGlueAPIMockRecorder) GetCrawlerMetricsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerMetricsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlerMetricsPages), arg0, arg1)
}

// GetCrawlerMetricsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetCrawlerMetricsPagesWithContext(arg0 aws.Context, arg1 *glue.GetCrawlerMetricsInput, arg2 func(*glue.GetCrawlerMetricsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCrawlerMetricsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCrawlerMetricsPagesWithContext indicates an expected call of GetCrawlerMetricsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetCrawlerMetricsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerMetricsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlerMetricsPagesWithContext), varargs...)
}

// GetCrawlerMetricsRequest mocks base method.
func (m *MockGlueAPI) GetCrawlerMetricsRequest(arg0 *glue.GetCrawlerMetricsInput) (*request.Request, *glue.GetCrawlerMetricsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlerMetricsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetCrawlerMetricsOutput)
	return ret0, ret1
}

// GetCrawlerMetricsRequest indicates an expected call of GetCrawlerMetricsRequest.
func (mr *MockGlueAPIMockRecorder) GetCrawlerMetricsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerMetricsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlerMetricsRequest), arg0)
}

// GetCrawlerMetricsWithContext mocks base method.
func (m *MockGlueAPI) GetCrawlerMetricsWithContext(arg0 aws.Context, arg1 *glue.GetCrawlerMetricsInput, arg2 ...request.Option) (*glue.GetCrawlerMetricsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCrawlerMetricsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetCrawlerMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlerMetricsWithContext indicates an expected call of GetCrawlerMetricsWithContext.
func (mr *MockGlueAPIMockRecorder) GetCrawlerMetricsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerMetricsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlerMetricsWithContext), varargs...)
}

// GetCrawlerRequest mocks base method.
func (m *MockGlueAPI) GetCrawlerRequest(arg0 *glue.GetCrawlerInput) (*request.Request, *glue.GetCrawlerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetCrawlerOutput)
	return ret0, ret1
}

// GetCrawlerRequest indicates an expected call of GetCrawlerRequest.
func (mr *MockGlueAPIMockRecorder) GetCrawlerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlerRequest), arg0)
}

// GetCrawlerWithContext mocks base method.
func (m *MockGlueAPI) GetCrawlerWithContext(arg0 aws.Context, arg1 *glue.GetCrawlerInput, arg2 ...request.Option) (*glue.GetCrawlerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCrawlerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlerWithContext indicates an expected call of GetCrawlerWithContext.
func (mr *MockGlueAPIMockRecorder) GetCrawlerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlerWithContext), varargs...)
}

// GetCrawlers mocks base method.
func (m *MockGlueAPI) GetCrawlers(arg0 *glue.GetCrawlersInput) (*glue.GetCrawlersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlers", arg0)
	ret0, _ := ret[0].(*glue.GetCrawlersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlers indicates an expected call of GetCrawlers.
func (mr *MockGlueAPIMockRecorder) GetCrawlers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlers", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlers), arg0)
}

// GetCrawlersPages mocks base method.
func (m *MockGlueAPI) GetCrawlersPages(arg0 *glue.GetCrawlersInput, arg1 func(*glue.GetCrawlersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCrawlersPages indicates an expected call of GetCrawlersPages.
func (mr *MockGlueAPIMockRecorder) GetCrawlersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlersPages", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlersPages), arg0, arg1)
}

// GetCrawlersPagesWithContext mocks base method.
func (m *MockGlueAPI) GetCrawlersPagesWithContext(arg0 aws.Context, arg1 *glue.GetCrawlersInput, arg2 func(*glue.GetCrawlersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCrawlersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCrawlersPagesWithContext indicates an expected call of GetCrawlersPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetCrawlersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlersPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlersPagesWithContext), varargs...)
}

// GetCrawlersRequest mocks base method.
func (m *MockGlueAPI) GetCrawlersRequest(arg0 *glue.GetCrawlersInput) (*request.Request, *glue.GetCrawlersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetCrawlersOutput)
	return ret0, ret1
}

// GetCrawlersRequest indicates an expected call of GetCrawlersRequest.
func (mr *MockGlueAPIMockRecorder) GetCrawlersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlersRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlersRequest), arg0)
}

// GetCrawlersWithContext mocks base method.
func (m *MockGlueAPI) GetCrawlersWithContext(arg0 aws.Context, arg1 *glue.GetCrawlersInput, arg2 ...request.Option) (*glue.GetCrawlersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCrawlersWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetCrawlersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlersWithContext indicates an expected call of GetCrawlersWithContext.
func (mr *MockGlueAPIMockRecorder) GetCrawlersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlersWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetCrawlersWithContext), varargs...)
}

// GetCustomEntityType mocks base method.
func (m *MockGlueAPI) GetCustomEntityType(arg0 *glue.GetCustomEntityTypeInput) (*glue.GetCustomEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomEntityType", arg0)
	ret0, _ := ret[0].(*glue.GetCustomEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomEntityType indicates an expected call of GetCustomEntityType.
func (mr *MockGlueAPIMockRecorder) GetCustomEntityType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomEntityType", reflect.TypeOf((*MockGlueAPI)(nil).GetCustomEntityType), arg0)
}

// GetCustomEntityTypeRequest mocks base method.
func (m *MockGlueAPI) GetCustomEntityTypeRequest(arg0 *glue.GetCustomEntityTypeInput) (*request.Request, *glue.GetCustomEntityTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomEntityTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetCustomEntityTypeOutput)
	return ret0, ret1
}

// GetCustomEntityTypeRequest indicates an expected call of GetCustomEntityTypeRequest.
func (mr *MockGlueAPIMockRecorder) GetCustomEntityTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomEntityTypeRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetCustomEntityTypeRequest), arg0)
}

// GetCustomEntityTypeWithContext mocks base method.
func (m *MockGlueAPI) GetCustomEntityTypeWithContext(arg0 aws.Context, arg1 *glue.GetCustomEntityTypeInput, arg2 ...request.Option) (*glue.GetCustomEntityTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomEntityTypeWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetCustomEntityTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomEntityTypeWithContext indicates an expected call of GetCustomEntityTypeWithContext.
func (mr *MockGlueAPIMockRecorder) GetCustomEntityTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomEntityTypeWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetCustomEntityTypeWithContext), varargs...)
}

// GetDataCatalogEncryptionSettings mocks base method.
func (m *MockGlueAPI) GetDataCatalogEncryptionSettings(arg0 *glue.GetDataCatalogEncryptionSettingsInput) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCatalogEncryptionSettings", arg0)
	ret0, _ := ret[0].(*glue.GetDataCatalogEncryptionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCatalogEncryptionSettings indicates an expected call of GetDataCatalogEncryptionSettings.
func (mr *MockGlueAPIMockRecorder) GetDataCatalogEncryptionSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCatalogEncryptionSettings", reflect.TypeOf((*MockGlueAPI)(nil).GetDataCatalogEncryptionSettings), arg0)
}

// GetDataCatalogEncryptionSettingsRequest mocks base method.
func (m *MockGlueAPI) GetDataCatalogEncryptionSettingsRequest(arg0 *glue.GetDataCatalogEncryptionSettingsInput) (*request.Request, *glue.GetDataCatalogEncryptionSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCatalogEncryptionSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDataCatalogEncryptionSettingsOutput)
	return ret0, ret1
}

// GetDataCatalogEncryptionSettingsRequest indicates an expected call of GetDataCatalogEncryptionSettingsRequest.
func (mr *MockGlueAPIMockRecorder) GetDataCatalogEncryptionSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCatalogEncryptionSettingsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDataCatalogEncryptionSettingsRequest), arg0)
}

// GetDataCatalogEncryptionSettingsWithContext mocks base method.
func (m *MockGlueAPI) GetDataCatalogEncryptionSettingsWithContext(arg0 aws.Context, arg1 *glue.GetDataCatalogEncryptionSettingsInput, arg2 ...request.Option) (*glue.GetDataCatalogEncryptionSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataCatalogEncryptionSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDataCatalogEncryptionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCatalogEncryptionSettingsWithContext indicates an expected call of GetDataCatalogEncryptionSettingsWithContext.
func (mr *MockGlueAPIMockRecorder) GetDataCatalogEncryptionSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCatalogEncryptionSettingsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDataCatalogEncryptionSettingsWithContext), varargs...)
}

// GetDataQualityResult mocks base method.
func (m *MockGlueAPI) GetDataQualityResult(arg0 *glue.GetDataQualityResultInput) (*glue.GetDataQualityResultOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataQualityResult", arg0)
	ret0, _ := ret[0].(*glue.GetDataQualityResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataQualityResult indicates an expected call of GetDataQualityResult.
func (mr *MockGlueAPIMockRecorder) GetDataQualityResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityResult", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityResult), arg0)
}

// GetDataQualityResultRequest mocks base method.
func (m *MockGlueAPI) GetDataQualityResultRequest(arg0 *glue.GetDataQualityResultInput) (*request.Request, *glue.GetDataQualityResultOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataQualityResultRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDataQualityResultOutput)
	return ret0, ret1
}

// GetDataQualityResultRequest indicates an expected call of GetDataQualityResultRequest.
func (mr *MockGlueAPIMockRecorder) GetDataQualityResultRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityResultRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityResultRequest), arg0)
}

// GetDataQualityResultWithContext mocks base method.
func (m *MockGlueAPI) GetDataQualityResultWithContext(arg0 aws.Context, arg1 *glue.GetDataQualityResultInput, arg2 ...request.Option) (*glue.GetDataQualityResultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataQualityResultWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDataQualityResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataQualityResultWithContext indicates an expected call of GetDataQualityResultWithContext.
func (mr *MockGlueAPIMockRecorder) GetDataQualityResultWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityResultWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityResultWithContext), varargs...)
}

// GetDataQualityRuleRecommendationRun mocks base method.
func (m *MockGlueAPI) GetDataQualityRuleRecommendationRun(arg0 *glue.GetDataQualityRuleRecommendationRunInput) (*glue.GetDataQualityRuleRecommendationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataQualityRuleRecommendationRun", arg0)
	ret0, _ := ret[0].(*glue.GetDataQualityRuleRecommendationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataQualityRuleRecommendationRun indicates an expected call of GetDataQualityRuleRecommendationRun.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRuleRecommendationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRuleRecommendationRun", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRuleRecommendationRun), arg0)
}

// GetDataQualityRuleRecommendationRunRequest mocks base method.
func (m *MockGlueAPI) GetDataQualityRuleRecommendationRunRequest(arg0 *glue.GetDataQualityRuleRecommendationRunInput) (*request.Request, *glue.GetDataQualityRuleRecommendationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataQualityRuleRecommendationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDataQualityRuleRecommendationRunOutput)
	return ret0, ret1
}

// GetDataQualityRuleRecommendationRunRequest indicates an expected call of GetDataQualityRuleRecommendationRunRequest.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRuleRecommendationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRuleRecommendationRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRuleRecommendationRunRequest), arg0)
}

// GetDataQualityRuleRecommendationRunWithContext mocks base method.
func (m *MockGlueAPI) GetDataQualityRuleRecommendationRunWithContext(arg0 aws.Context, arg1 *glue.GetDataQualityRuleRecommendationRunInput, arg2 ...request.Option) (*glue.GetDataQualityRuleRecommendationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataQualityRuleRecommendationRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDataQualityRuleRecommendationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataQualityRuleRecommendationRunWithContext indicates an expected call of GetDataQualityRuleRecommendationRunWithContext.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRuleRecommendationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRuleRecommendationRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRuleRecommendationRunWithContext), varargs...)
}

// GetDataQualityRuleset mocks base method.
func (m *MockGlueAPI) GetDataQualityRuleset(arg0 *glue.GetDataQualityRulesetInput) (*glue.GetDataQualityRulesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataQualityRuleset", arg0)
	ret0, _ := ret[0].(*glue.GetDataQualityRulesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataQualityRuleset indicates an expected call of GetDataQualityRuleset.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRuleset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRuleset", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRuleset), arg0)
}

// GetDataQualityRulesetEvaluationRun mocks base method.
func (m *MockGlueAPI) GetDataQualityRulesetEvaluationRun(arg0 *glue.GetDataQualityRulesetEvaluationRunInput) (*glue.GetDataQualityRulesetEvaluationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataQualityRulesetEvaluationRun", arg0)
	ret0, _ := ret[0].(*glue.GetDataQualityRulesetEvaluationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataQualityRulesetEvaluationRun indicates an expected call of GetDataQualityRulesetEvaluationRun.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRulesetEvaluationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRulesetEvaluationRun", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRulesetEvaluationRun), arg0)
}

// GetDataQualityRulesetEvaluationRunRequest mocks base method.
func (m *MockGlueAPI) GetDataQualityRulesetEvaluationRunRequest(arg0 *glue.GetDataQualityRulesetEvaluationRunInput) (*request.Request, *glue.GetDataQualityRulesetEvaluationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataQualityRulesetEvaluationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDataQualityRulesetEvaluationRunOutput)
	return ret0, ret1
}

// GetDataQualityRulesetEvaluationRunRequest indicates an expected call of GetDataQualityRulesetEvaluationRunRequest.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRulesetEvaluationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRulesetEvaluationRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRulesetEvaluationRunRequest), arg0)
}

// GetDataQualityRulesetEvaluationRunWithContext mocks base method.
func (m *MockGlueAPI) GetDataQualityRulesetEvaluationRunWithContext(arg0 aws.Context, arg1 *glue.GetDataQualityRulesetEvaluationRunInput, arg2 ...request.Option) (*glue.GetDataQualityRulesetEvaluationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataQualityRulesetEvaluationRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDataQualityRulesetEvaluationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataQualityRulesetEvaluationRunWithContext indicates an expected call of GetDataQualityRulesetEvaluationRunWithContext.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRulesetEvaluationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRulesetEvaluationRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRulesetEvaluationRunWithContext), varargs...)
}

// GetDataQualityRulesetRequest mocks base method.
func (m *MockGlueAPI) GetDataQualityRulesetRequest(arg0 *glue.GetDataQualityRulesetInput) (*request.Request, *glue.GetDataQualityRulesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataQualityRulesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDataQualityRulesetOutput)
	return ret0, ret1
}

// GetDataQualityRulesetRequest indicates an expected call of GetDataQualityRulesetRequest.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRulesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRulesetRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRulesetRequest), arg0)
}

// GetDataQualityRulesetWithContext mocks base method.
func (m *MockGlueAPI) GetDataQualityRulesetWithContext(arg0 aws.Context, arg1 *glue.GetDataQualityRulesetInput, arg2 ...request.Option) (*glue.GetDataQualityRulesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataQualityRulesetWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDataQualityRulesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataQualityRulesetWithContext indicates an expected call of GetDataQualityRulesetWithContext.
func (mr *MockGlueAPIMockRecorder) GetDataQualityRulesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataQualityRulesetWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDataQualityRulesetWithContext), varargs...)
}

// GetDatabase mocks base method.
func (m *MockGlueAPI) GetDatabase(arg0 *glue.GetDatabaseInput) (*glue.GetDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabase", arg0)
	ret0, _ := ret[0].(*glue.GetDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabase indicates an expected call of GetDatabase.
func (mr *MockGlueAPIMockRecorder) GetDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabase", reflect.TypeOf((*MockGlueAPI)(nil).GetDatabase), arg0)
}

// GetDatabaseRequest mocks base method.
func (m *MockGlueAPI) GetDatabaseRequest(arg0 *glue.GetDatabaseInput) (*request.Request, *glue.GetDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDatabaseOutput)
	return ret0, ret1
}

// GetDatabaseRequest indicates an expected call of GetDatabaseRequest.
func (mr *MockGlueAPIMockRecorder) GetDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDatabaseRequest), arg0)
}

// GetDatabaseWithContext mocks base method.
func (m *MockGlueAPI) GetDatabaseWithContext(arg0 aws.Context, arg1 *glue.GetDatabaseInput, arg2 ...request.Option) (*glue.GetDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabaseWithContext indicates an expected call of GetDatabaseWithContext.
func (mr *MockGlueAPIMockRecorder) GetDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDatabaseWithContext), varargs...)
}

// GetDatabases mocks base method.
func (m *MockGlueAPI) GetDatabases(arg0 *glue.GetDatabasesInput) (*glue.GetDatabasesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabases", arg0)
	ret0, _ := ret[0].(*glue.GetDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabases indicates an expected call of GetDatabases.
func (mr *MockGlueAPIMockRecorder) GetDatabases(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabases", reflect.TypeOf((*MockGlueAPI)(nil).GetDatabases), arg0)
}

// GetDatabasesPages mocks base method.
func (m *MockGlueAPI) GetDatabasesPages(arg0 *glue.GetDatabasesInput, arg1 func(*glue.GetDatabasesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabasesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDatabasesPages indicates an expected call of GetDatabasesPages.
func (mr *MockGlueAPIMockRecorder) GetDatabasesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabasesPages", reflect.TypeOf((*MockGlueAPI)(nil).GetDatabasesPages), arg0, arg1)
}

// GetDatabasesPagesWithContext mocks base method.
func (m *MockGlueAPI) GetDatabasesPagesWithContext(arg0 aws.Context, arg1 *glue.GetDatabasesInput, arg2 func(*glue.GetDatabasesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatabasesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDatabasesPagesWithContext indicates an expected call of GetDatabasesPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetDatabasesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabasesPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDatabasesPagesWithContext), varargs...)
}

// GetDatabasesRequest mocks base method.
func (m *MockGlueAPI) GetDatabasesRequest(arg0 *glue.GetDatabasesInput) (*request.Request, *glue.GetDatabasesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabasesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDatabasesOutput)
	return ret0, ret1
}

// GetDatabasesRequest indicates an expected call of GetDatabasesRequest.
func (mr *MockGlueAPIMockRecorder) GetDatabasesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabasesRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDatabasesRequest), arg0)
}

// GetDatabasesWithContext mocks base method.
func (m *MockGlueAPI) GetDatabasesWithContext(arg0 aws.Context, arg1 *glue.GetDatabasesInput, arg2 ...request.Option) (*glue.GetDatabasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatabasesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDatabasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatabasesWithContext indicates an expected call of GetDatabasesWithContext.
func (mr *MockGlueAPIMockRecorder) GetDatabasesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabasesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDatabasesWithContext), varargs...)
}

// GetDataflowGraph mocks base method.
func (m *MockGlueAPI) GetDataflowGraph(arg0 *glue.GetDataflowGraphInput) (*glue.GetDataflowGraphOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataflowGraph", arg0)
	ret0, _ := ret[0].(*glue.GetDataflowGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataflowGraph indicates an expected call of GetDataflowGraph.
func (mr *MockGlueAPIMockRecorder) GetDataflowGraph(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataflowGraph", reflect.TypeOf((*MockGlueAPI)(nil).GetDataflowGraph), arg0)
}

// GetDataflowGraphRequest mocks base method.
func (m *MockGlueAPI) GetDataflowGraphRequest(arg0 *glue.GetDataflowGraphInput) (*request.Request, *glue.GetDataflowGraphOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataflowGraphRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDataflowGraphOutput)
	return ret0, ret1
}

// GetDataflowGraphRequest indicates an expected call of GetDataflowGraphRequest.
func (mr *MockGlueAPIMockRecorder) GetDataflowGraphRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataflowGraphRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDataflowGraphRequest), arg0)
}

// GetDataflowGraphWithContext mocks base method.
func (m *MockGlueAPI) GetDataflowGraphWithContext(arg0 aws.Context, arg1 *glue.GetDataflowGraphInput, arg2 ...request.Option) (*glue.GetDataflowGraphOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataflowGraphWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDataflowGraphOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataflowGraphWithContext indicates an expected call of GetDataflowGraphWithContext.
func (mr *MockGlueAPIMockRecorder) GetDataflowGraphWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataflowGraphWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDataflowGraphWithContext), varargs...)
}

// GetDevEndpoint mocks base method.
func (m *MockGlueAPI) GetDevEndpoint(arg0 *glue.GetDevEndpointInput) (*glue.GetDevEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevEndpoint", arg0)
	ret0, _ := ret[0].(*glue.GetDevEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevEndpoint indicates an expected call of GetDevEndpoint.
func (mr *MockGlueAPIMockRecorder) GetDevEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevEndpoint", reflect.TypeOf((*MockGlueAPI)(nil).GetDevEndpoint), arg0)
}

// GetDevEndpointRequest mocks base method.
func (m *MockGlueAPI) GetDevEndpointRequest(arg0 *glue.GetDevEndpointInput) (*request.Request, *glue.GetDevEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDevEndpointOutput)
	return ret0, ret1
}

// GetDevEndpointRequest indicates an expected call of GetDevEndpointRequest.
func (mr *MockGlueAPIMockRecorder) GetDevEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevEndpointRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDevEndpointRequest), arg0)
}

// GetDevEndpointWithContext mocks base method.
func (m *MockGlueAPI) GetDevEndpointWithContext(arg0 aws.Context, arg1 *glue.GetDevEndpointInput, arg2 ...request.Option) (*glue.GetDevEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDevEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevEndpointWithContext indicates an expected call of GetDevEndpointWithContext.
func (mr *MockGlueAPIMockRecorder) GetDevEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevEndpointWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDevEndpointWithContext), varargs...)
}

// GetDevEndpoints mocks base method.
func (m *MockGlueAPI) GetDevEndpoints(arg0 *glue.GetDevEndpointsInput) (*glue.GetDevEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevEndpoints", arg0)
	ret0, _ := ret[0].(*glue.GetDevEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevEndpoints indicates an expected call of GetDevEndpoints.
func (mr *MockGlueAPIMockRecorder) GetDevEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevEndpoints", reflect.TypeOf((*MockGlueAPI)(nil).GetDevEndpoints), arg0)
}

// GetDevEndpointsPages mocks base method.
func (m *MockGlueAPI) GetDevEndpointsPages(arg0 *glue.GetDevEndpointsInput, arg1 func(*glue.GetDevEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDevEndpointsPages indicates an expected call of GetDevEndpointsPages.
func (mr *MockGlueAPIMockRecorder) GetDevEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevEndpointsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetDevEndpointsPages), arg0, arg1)
}

// GetDevEndpointsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetDevEndpointsPagesWithContext(arg0 aws.Context, arg1 *glue.GetDevEndpointsInput, arg2 func(*glue.GetDevEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDevEndpointsPagesWithContext indicates an expected call of GetDevEndpointsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetDevEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevEndpointsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDevEndpointsPagesWithContext), varargs...)
}

// GetDevEndpointsRequest mocks base method.
func (m *MockGlueAPI) GetDevEndpointsRequest(arg0 *glue.GetDevEndpointsInput) (*request.Request, *glue.GetDevEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetDevEndpointsOutput)
	return ret0, ret1
}

// GetDevEndpointsRequest indicates an expected call of GetDevEndpointsRequest.
func (mr *MockGlueAPIMockRecorder) GetDevEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevEndpointsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetDevEndpointsRequest), arg0)
}

// GetDevEndpointsWithContext mocks base method.
func (m *MockGlueAPI) GetDevEndpointsWithContext(arg0 aws.Context, arg1 *glue.GetDevEndpointsInput, arg2 ...request.Option) (*glue.GetDevEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetDevEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevEndpointsWithContext indicates an expected call of GetDevEndpointsWithContext.
func (mr *MockGlueAPIMockRecorder) GetDevEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevEndpointsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetDevEndpointsWithContext), varargs...)
}

// GetJob mocks base method.
func (m *MockGlueAPI) GetJob(arg0 *glue.GetJobInput) (*glue.GetJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*glue.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockGlueAPIMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockGlueAPI)(nil).GetJob), arg0)
}

// GetJobBookmark mocks base method.
func (m *MockGlueAPI) GetJobBookmark(arg0 *glue.GetJobBookmarkInput) (*glue.GetJobBookmarkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobBookmark", arg0)
	ret0, _ := ret[0].(*glue.GetJobBookmarkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobBookmark indicates an expected call of GetJobBookmark.
func (mr *MockGlueAPIMockRecorder) GetJobBookmark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobBookmark", reflect.TypeOf((*MockGlueAPI)(nil).GetJobBookmark), arg0)
}

// GetJobBookmarkRequest mocks base method.
func (m *MockGlueAPI) GetJobBookmarkRequest(arg0 *glue.GetJobBookmarkInput) (*request.Request, *glue.GetJobBookmarkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobBookmarkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetJobBookmarkOutput)
	return ret0, ret1
}

// GetJobBookmarkRequest indicates an expected call of GetJobBookmarkRequest.
func (mr *MockGlueAPIMockRecorder) GetJobBookmarkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobBookmarkRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetJobBookmarkRequest), arg0)
}

// GetJobBookmarkWithContext mocks base method.
func (m *MockGlueAPI) GetJobBookmarkWithContext(arg0 aws.Context, arg1 *glue.GetJobBookmarkInput, arg2 ...request.Option) (*glue.GetJobBookmarkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobBookmarkWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetJobBookmarkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobBookmarkWithContext indicates an expected call of GetJobBookmarkWithContext.
func (mr *MockGlueAPIMockRecorder) GetJobBookmarkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobBookmarkWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetJobBookmarkWithContext), varargs...)
}

// GetJobRequest mocks base method.
func (m *MockGlueAPI) GetJobRequest(arg0 *glue.GetJobInput) (*request.Request, *glue.GetJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetJobOutput)
	return ret0, ret1
}

// GetJobRequest indicates an expected call of GetJobRequest.
func (mr *MockGlueAPIMockRecorder) GetJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRequest), arg0)
}

// GetJobRun mocks base method.
func (m *MockGlueAPI) GetJobRun(arg0 *glue.GetJobRunInput) (*glue.GetJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRun", arg0)
	ret0, _ := ret[0].(*glue.GetJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRun indicates an expected call of GetJobRun.
func (mr *MockGlueAPIMockRecorder) GetJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRun", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRun), arg0)
}

// GetJobRunRequest mocks base method.
func (m *MockGlueAPI) GetJobRunRequest(arg0 *glue.GetJobRunInput) (*request.Request, *glue.GetJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetJobRunOutput)
	return ret0, ret1
}

// GetJobRunRequest indicates an expected call of GetJobRunRequest.
func (mr *MockGlueAPIMockRecorder) GetJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRunRequest), arg0)
}

// GetJobRunWithContext mocks base method.
func (m *MockGlueAPI) GetJobRunWithContext(arg0 aws.Context, arg1 *glue.GetJobRunInput, arg2 ...request.Option) (*glue.GetJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRunWithContext indicates an expected call of GetJobRunWithContext.
func (mr *MockGlueAPIMockRecorder) GetJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRunWithContext), varargs...)
}

// GetJobRuns mocks base method.
func (m *MockGlueAPI) GetJobRuns(arg0 *glue.GetJobRunsInput) (*glue.GetJobRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRuns", arg0)
	ret0, _ := ret[0].(*glue.GetJobRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRuns indicates an expected call of GetJobRuns.
func (mr *MockGlueAPIMockRecorder) GetJobRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRuns", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRuns), arg0)
}

// GetJobRunsPages mocks base method.
func (m *MockGlueAPI) GetJobRunsPages(arg0 *glue.GetJobRunsInput, arg1 func(*glue.GetJobRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJobRunsPages indicates an expected call of GetJobRunsPages.
func (mr *MockGlueAPIMockRecorder) GetJobRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRunsPages), arg0, arg1)
}

// GetJobRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetJobRunsPagesWithContext(arg0 aws.Context, arg1 *glue.GetJobRunsInput, arg2 func(*glue.GetJobRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJobRunsPagesWithContext indicates an expected call of GetJobRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetJobRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRunsPagesWithContext), varargs...)
}

// GetJobRunsRequest mocks base method.
func (m *MockGlueAPI) GetJobRunsRequest(arg0 *glue.GetJobRunsInput) (*request.Request, *glue.GetJobRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetJobRunsOutput)
	return ret0, ret1
}

// GetJobRunsRequest indicates an expected call of GetJobRunsRequest.
func (mr *MockGlueAPIMockRecorder) GetJobRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRunsRequest), arg0)
}

// GetJobRunsWithContext mocks base method.
func (m *MockGlueAPI) GetJobRunsWithContext(arg0 aws.Context, arg1 *glue.GetJobRunsInput, arg2 ...request.Option) (*glue.GetJobRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetJobRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRunsWithContext indicates an expected call of GetJobRunsWithContext.
func (mr *MockGlueAPIMockRecorder) GetJobRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetJobRunsWithContext), varargs...)
}

// GetJobWithContext mocks base method.
func (m *MockGlueAPI) GetJobWithContext(arg0 aws.Context, arg1 *glue.GetJobInput, arg2 ...request.Option) (*glue.GetJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobWithContext indicates an expected call of GetJobWithContext.
func (mr *MockGlueAPIMockRecorder) GetJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetJobWithContext), varargs...)
}

// GetJobs mocks base method.
func (m *MockGlueAPI) GetJobs(arg0 *glue.GetJobsInput) (*glue.GetJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs", arg0)
	ret0, _ := ret[0].(*glue.GetJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs.
func (mr *MockGlueAPIMockRecorder) GetJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockGlueAPI)(nil).GetJobs), arg0)
}

// GetJobsPages mocks base method.
func (m *MockGlueAPI) GetJobsPages(arg0 *glue.GetJobsInput, arg1 func(*glue.GetJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJobsPages indicates an expected call of GetJobsPages.
func (mr *MockGlueAPIMockRecorder) GetJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetJobsPages), arg0, arg1)
}

// GetJobsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetJobsPagesWithContext(arg0 aws.Context, arg1 *glue.GetJobsInput, arg2 func(*glue.GetJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJobsPagesWithContext indicates an expected call of GetJobsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetJobsPagesWithContext), varargs...)
}

// GetJobsRequest mocks base method.
func (m *MockGlueAPI) GetJobsRequest(arg0 *glue.GetJobsInput) (*request.Request, *glue.GetJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetJobsOutput)
	return ret0, ret1
}

// GetJobsRequest indicates an expected call of GetJobsRequest.
func (mr *MockGlueAPIMockRecorder) GetJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetJobsRequest), arg0)
}

// GetJobsWithContext mocks base method.
func (m *MockGlueAPI) GetJobsWithContext(arg0 aws.Context, arg1 *glue.GetJobsInput, arg2 ...request.Option) (*glue.GetJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobsWithContext indicates an expected call of GetJobsWithContext.
func (mr *MockGlueAPIMockRecorder) GetJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetJobsWithContext), varargs...)
}

// GetMLTaskRun mocks base method.
func (m *MockGlueAPI) GetMLTaskRun(arg0 *glue.GetMLTaskRunInput) (*glue.GetMLTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTaskRun", arg0)
	ret0, _ := ret[0].(*glue.GetMLTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLTaskRun indicates an expected call of GetMLTaskRun.
func (mr *MockGlueAPIMockRecorder) GetMLTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTaskRun), arg0)
}

// GetMLTaskRunRequest mocks base method.
func (m *MockGlueAPI) GetMLTaskRunRequest(arg0 *glue.GetMLTaskRunInput) (*request.Request, *glue.GetMLTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetMLTaskRunOutput)
	return ret0, ret1
}

// GetMLTaskRunRequest indicates an expected call of GetMLTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) GetMLTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTaskRunRequest), arg0)
}

// GetMLTaskRunWithContext mocks base method.
func (m *MockGlueAPI) GetMLTaskRunWithContext(arg0 aws.Context, arg1 *glue.GetMLTaskRunInput, arg2 ...request.Option) (*glue.GetMLTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetMLTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLTaskRunWithContext indicates an expected call of GetMLTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) GetMLTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTaskRunWithContext), varargs...)
}

// GetMLTaskRuns mocks base method.
func (m *MockGlueAPI) GetMLTaskRuns(arg0 *glue.GetMLTaskRunsInput) (*glue.GetMLTaskRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTaskRuns", arg0)
	ret0, _ := ret[0].(*glue.GetMLTaskRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLTaskRuns indicates an expected call of GetMLTaskRuns.
func (mr *MockGlueAPIMockRecorder) GetMLTaskRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTaskRuns", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTaskRuns), arg0)
}

// GetMLTaskRunsPages mocks base method.
func (m *MockGlueAPI) GetMLTaskRunsPages(arg0 *glue.GetMLTaskRunsInput, arg1 func(*glue.GetMLTaskRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTaskRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMLTaskRunsPages indicates an expected call of GetMLTaskRunsPages.
func (mr *MockGlueAPIMockRecorder) GetMLTaskRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTaskRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTaskRunsPages), arg0, arg1)
}

// GetMLTaskRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetMLTaskRunsPagesWithContext(arg0 aws.Context, arg1 *glue.GetMLTaskRunsInput, arg2 func(*glue.GetMLTaskRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLTaskRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMLTaskRunsPagesWithContext indicates an expected call of GetMLTaskRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetMLTaskRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTaskRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTaskRunsPagesWithContext), varargs...)
}

// GetMLTaskRunsRequest mocks base method.
func (m *MockGlueAPI) GetMLTaskRunsRequest(arg0 *glue.GetMLTaskRunsInput) (*request.Request, *glue.GetMLTaskRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTaskRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetMLTaskRunsOutput)
	return ret0, ret1
}

// GetMLTaskRunsRequest indicates an expected call of GetMLTaskRunsRequest.
func (mr *MockGlueAPIMockRecorder) GetMLTaskRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTaskRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTaskRunsRequest), arg0)
}

// GetMLTaskRunsWithContext mocks base method.
func (m *MockGlueAPI) GetMLTaskRunsWithContext(arg0 aws.Context, arg1 *glue.GetMLTaskRunsInput, arg2 ...request.Option) (*glue.GetMLTaskRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLTaskRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetMLTaskRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLTaskRunsWithContext indicates an expected call of GetMLTaskRunsWithContext.
func (mr *MockGlueAPIMockRecorder) GetMLTaskRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTaskRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTaskRunsWithContext), varargs...)
}

// GetMLTransform mocks base method.
func (m *MockGlueAPI) GetMLTransform(arg0 *glue.GetMLTransformInput) (*glue.GetMLTransformOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTransform", arg0)
	ret0, _ := ret[0].(*glue.GetMLTransformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLTransform indicates an expected call of GetMLTransform.
func (mr *MockGlueAPIMockRecorder) GetMLTransform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTransform", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTransform), arg0)
}

// GetMLTransformRequest mocks base method.
func (m *MockGlueAPI) GetMLTransformRequest(arg0 *glue.GetMLTransformInput) (*request.Request, *glue.GetMLTransformOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTransformRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetMLTransformOutput)
	return ret0, ret1
}

// GetMLTransformRequest indicates an expected call of GetMLTransformRequest.
func (mr *MockGlueAPIMockRecorder) GetMLTransformRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTransformRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTransformRequest), arg0)
}

// GetMLTransformWithContext mocks base method.
func (m *MockGlueAPI) GetMLTransformWithContext(arg0 aws.Context, arg1 *glue.GetMLTransformInput, arg2 ...request.Option) (*glue.GetMLTransformOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLTransformWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetMLTransformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLTransformWithContext indicates an expected call of GetMLTransformWithContext.
func (mr *MockGlueAPIMockRecorder) GetMLTransformWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTransformWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTransformWithContext), varargs...)
}

// GetMLTransforms mocks base method.
func (m *MockGlueAPI) GetMLTransforms(arg0 *glue.GetMLTransformsInput) (*glue.GetMLTransformsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTransforms", arg0)
	ret0, _ := ret[0].(*glue.GetMLTransformsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLTransforms indicates an expected call of GetMLTransforms.
func (mr *MockGlueAPIMockRecorder) GetMLTransforms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTransforms", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTransforms), arg0)
}

// GetMLTransformsPages mocks base method.
func (m *MockGlueAPI) GetMLTransformsPages(arg0 *glue.GetMLTransformsInput, arg1 func(*glue.GetMLTransformsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTransformsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMLTransformsPages indicates an expected call of GetMLTransformsPages.
func (mr *MockGlueAPIMockRecorder) GetMLTransformsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTransformsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTransformsPages), arg0, arg1)
}

// GetMLTransformsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetMLTransformsPagesWithContext(arg0 aws.Context, arg1 *glue.GetMLTransformsInput, arg2 func(*glue.GetMLTransformsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLTransformsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMLTransformsPagesWithContext indicates an expected call of GetMLTransformsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetMLTransformsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTransformsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTransformsPagesWithContext), varargs...)
}

// GetMLTransformsRequest mocks base method.
func (m *MockGlueAPI) GetMLTransformsRequest(arg0 *glue.GetMLTransformsInput) (*request.Request, *glue.GetMLTransformsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMLTransformsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetMLTransformsOutput)
	return ret0, ret1
}

// GetMLTransformsRequest indicates an expected call of GetMLTransformsRequest.
func (mr *MockGlueAPIMockRecorder) GetMLTransformsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTransformsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTransformsRequest), arg0)
}

// GetMLTransformsWithContext mocks base method.
func (m *MockGlueAPI) GetMLTransformsWithContext(arg0 aws.Context, arg1 *glue.GetMLTransformsInput, arg2 ...request.Option) (*glue.GetMLTransformsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMLTransformsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetMLTransformsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMLTransformsWithContext indicates an expected call of GetMLTransformsWithContext.
func (mr *MockGlueAPIMockRecorder) GetMLTransformsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMLTransformsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetMLTransformsWithContext), varargs...)
}

// GetMapping mocks base method.
func (m *MockGlueAPI) GetMapping(arg0 *glue.GetMappingInput) (*glue.GetMappingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapping", arg0)
	ret0, _ := ret[0].(*glue.GetMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapping indicates an expected call of GetMapping.
func (mr *MockGlueAPIMockRecorder) GetMapping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapping", reflect.TypeOf((*MockGlueAPI)(nil).GetMapping), arg0)
}

// GetMappingRequest mocks base method.
func (m *MockGlueAPI) GetMappingRequest(arg0 *glue.GetMappingInput) (*request.Request, *glue.GetMappingOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMappingRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetMappingOutput)
	return ret0, ret1
}

// GetMappingRequest indicates an expected call of GetMappingRequest.
func (mr *MockGlueAPIMockRecorder) GetMappingRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMappingRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetMappingRequest), arg0)
}

// GetMappingWithContext mocks base method.
func (m *MockGlueAPI) GetMappingWithContext(arg0 aws.Context, arg1 *glue.GetMappingInput, arg2 ...request.Option) (*glue.GetMappingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMappingWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetMappingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMappingWithContext indicates an expected call of GetMappingWithContext.
func (mr *MockGlueAPIMockRecorder) GetMappingWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMappingWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetMappingWithContext), varargs...)
}

// GetPartition mocks base method.
func (m *MockGlueAPI) GetPartition(arg0 *glue.GetPartitionInput) (*glue.GetPartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartition", arg0)
	ret0, _ := ret[0].(*glue.GetPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartition indicates an expected call of GetPartition.
func (mr *MockGlueAPIMockRecorder) GetPartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartition", reflect.TypeOf((*MockGlueAPI)(nil).GetPartition), arg0)
}

// GetPartitionIndexes mocks base method.
func (m *MockGlueAPI) GetPartitionIndexes(arg0 *glue.GetPartitionIndexesInput) (*glue.GetPartitionIndexesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionIndexes", arg0)
	ret0, _ := ret[0].(*glue.GetPartitionIndexesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionIndexes indicates an expected call of GetPartitionIndexes.
func (mr *MockGlueAPIMockRecorder) GetPartitionIndexes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionIndexes", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionIndexes), arg0)
}

// GetPartitionIndexesPages mocks base method.
func (m *MockGlueAPI) GetPartitionIndexesPages(arg0 *glue.GetPartitionIndexesInput, arg1 func(*glue.GetPartitionIndexesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionIndexesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPartitionIndexesPages indicates an expected call of GetPartitionIndexesPages.
func (mr *MockGlueAPIMockRecorder) GetPartitionIndexesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionIndexesPages", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionIndexesPages), arg0, arg1)
}

// GetPartitionIndexesPagesWithContext mocks base method.
func (m *MockGlueAPI) GetPartitionIndexesPagesWithContext(arg0 aws.Context, arg1 *glue.GetPartitionIndexesInput, arg2 func(*glue.GetPartitionIndexesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartitionIndexesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPartitionIndexesPagesWithContext indicates an expected call of GetPartitionIndexesPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetPartitionIndexesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionIndexesPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionIndexesPagesWithContext), varargs...)
}

// GetPartitionIndexesRequest mocks base method.
func (m *MockGlueAPI) GetPartitionIndexesRequest(arg0 *glue.GetPartitionIndexesInput) (*request.Request, *glue.GetPartitionIndexesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionIndexesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetPartitionIndexesOutput)
	return ret0, ret1
}

// GetPartitionIndexesRequest indicates an expected call of GetPartitionIndexesRequest.
func (mr *MockGlueAPIMockRecorder) GetPartitionIndexesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionIndexesRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionIndexesRequest), arg0)
}

// GetPartitionIndexesWithContext mocks base method.
func (m *MockGlueAPI) GetPartitionIndexesWithContext(arg0 aws.Context, arg1 *glue.GetPartitionIndexesInput, arg2 ...request.Option) (*glue.GetPartitionIndexesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartitionIndexesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetPartitionIndexesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionIndexesWithContext indicates an expected call of GetPartitionIndexesWithContext.
func (mr *MockGlueAPIMockRecorder) GetPartitionIndexesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionIndexesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionIndexesWithContext), varargs...)
}

// GetPartitionRequest mocks base method.
func (m *MockGlueAPI) GetPartitionRequest(arg0 *glue.GetPartitionInput) (*request.Request, *glue.GetPartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetPartitionOutput)
	return ret0, ret1
}

// GetPartitionRequest indicates an expected call of GetPartitionRequest.
func (mr *MockGlueAPIMockRecorder) GetPartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionRequest), arg0)
}

// GetPartitionWithContext mocks base method.
func (m *MockGlueAPI) GetPartitionWithContext(arg0 aws.Context, arg1 *glue.GetPartitionInput, arg2 ...request.Option) (*glue.GetPartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionWithContext indicates an expected call of GetPartitionWithContext.
func (mr *MockGlueAPIMockRecorder) GetPartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionWithContext), varargs...)
}

// GetPartitions mocks base method.
func (m *MockGlueAPI) GetPartitions(arg0 *glue.GetPartitionsInput) (*glue.GetPartitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitions", arg0)
	ret0, _ := ret[0].(*glue.GetPartitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitions indicates an expected call of GetPartitions.
func (mr *MockGlueAPIMockRecorder) GetPartitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitions", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitions), arg0)
}

// GetPartitionsPages mocks base method.
func (m *MockGlueAPI) GetPartitionsPages(arg0 *glue.GetPartitionsInput, arg1 func(*glue.GetPartitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPartitionsPages indicates an expected call of GetPartitionsPages.
func (mr *MockGlueAPIMockRecorder) GetPartitionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionsPages), arg0, arg1)
}

// GetPartitionsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetPartitionsPagesWithContext(arg0 aws.Context, arg1 *glue.GetPartitionsInput, arg2 func(*glue.GetPartitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPartitionsPagesWithContext indicates an expected call of GetPartitionsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetPartitionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionsPagesWithContext), varargs...)
}

// GetPartitionsRequest mocks base method.
func (m *MockGlueAPI) GetPartitionsRequest(arg0 *glue.GetPartitionsInput) (*request.Request, *glue.GetPartitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetPartitionsOutput)
	return ret0, ret1
}

// GetPartitionsRequest indicates an expected call of GetPartitionsRequest.
func (mr *MockGlueAPIMockRecorder) GetPartitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionsRequest), arg0)
}

// GetPartitionsWithContext mocks base method.
func (m *MockGlueAPI) GetPartitionsWithContext(arg0 aws.Context, arg1 *glue.GetPartitionsInput, arg2 ...request.Option) (*glue.GetPartitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartitionsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetPartitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionsWithContext indicates an expected call of GetPartitionsWithContext.
func (mr *MockGlueAPIMockRecorder) GetPartitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetPartitionsWithContext), varargs...)
}

// GetPlan mocks base method.
func (m *MockGlueAPI) GetPlan(arg0 *glue.GetPlanInput) (*glue.GetPlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlan", arg0)
	ret0, _ := ret[0].(*glue.GetPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlan indicates an expected call of GetPlan.
func (mr *MockGlueAPIMockRecorder) GetPlan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlan", reflect.TypeOf((*MockGlueAPI)(nil).GetPlan), arg0)
}

// GetPlanRequest mocks base method.
func (m *MockGlueAPI) GetPlanRequest(arg0 *glue.GetPlanInput) (*request.Request, *glue.GetPlanOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetPlanOutput)
	return ret0, ret1
}

// GetPlanRequest indicates an expected call of GetPlanRequest.
func (mr *MockGlueAPIMockRecorder) GetPlanRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetPlanRequest), arg0)
}

// GetPlanWithContext mocks base method.
func (m *MockGlueAPI) GetPlanWithContext(arg0 aws.Context, arg1 *glue.GetPlanInput, arg2 ...request.Option) (*glue.GetPlanOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlanWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetPlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlanWithContext indicates an expected call of GetPlanWithContext.
func (mr *MockGlueAPIMockRecorder) GetPlanWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetPlanWithContext), varargs...)
}

// GetRegistry mocks base method.
func (m *MockGlueAPI) GetRegistry(arg0 *glue.GetRegistryInput) (*glue.GetRegistryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistry", arg0)
	ret0, _ := ret[0].(*glue.GetRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistry indicates an expected call of GetRegistry.
func (mr *MockGlueAPIMockRecorder) GetRegistry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistry", reflect.TypeOf((*MockGlueAPI)(nil).GetRegistry), arg0)
}

// GetRegistryRequest mocks base method.
func (m *MockGlueAPI) GetRegistryRequest(arg0 *glue.GetRegistryInput) (*request.Request, *glue.GetRegistryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetRegistryOutput)
	return ret0, ret1
}

// GetRegistryRequest indicates an expected call of GetRegistryRequest.
func (mr *MockGlueAPIMockRecorder) GetRegistryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetRegistryRequest), arg0)
}

// GetRegistryWithContext mocks base method.
func (m *MockGlueAPI) GetRegistryWithContext(arg0 aws.Context, arg1 *glue.GetRegistryInput, arg2 ...request.Option) (*glue.GetRegistryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRegistryWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryWithContext indicates an expected call of GetRegistryWithContext.
func (mr *MockGlueAPIMockRecorder) GetRegistryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetRegistryWithContext), varargs...)
}

// GetResourcePolicies mocks base method.
func (m *MockGlueAPI) GetResourcePolicies(arg0 *glue.GetResourcePoliciesInput) (*glue.GetResourcePoliciesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicies", arg0)
	ret0, _ := ret[0].(*glue.GetResourcePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicies indicates an expected call of GetResourcePolicies.
func (mr *MockGlueAPIMockRecorder) GetResourcePolicies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicies", reflect.TypeOf((*MockGlueAPI)(nil).GetResourcePolicies), arg0)
}

// GetResourcePoliciesPages mocks base method.
func (m *MockGlueAPI) GetResourcePoliciesPages(arg0 *glue.GetResourcePoliciesInput, arg1 func(*glue.GetResourcePoliciesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePoliciesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourcePoliciesPages indicates an expected call of GetResourcePoliciesPages.
func (mr *MockGlueAPIMockRecorder) GetResourcePoliciesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesPages", reflect.TypeOf((*MockGlueAPI)(nil).GetResourcePoliciesPages), arg0, arg1)
}

// GetResourcePoliciesPagesWithContext mocks base method.
func (m *MockGlueAPI) GetResourcePoliciesPagesWithContext(arg0 aws.Context, arg1 *glue.GetResourcePoliciesInput, arg2 func(*glue.GetResourcePoliciesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePoliciesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResourcePoliciesPagesWithContext indicates an expected call of GetResourcePoliciesPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetResourcePoliciesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetResourcePoliciesPagesWithContext), varargs...)
}

// GetResourcePoliciesRequest mocks base method.
func (m *MockGlueAPI) GetResourcePoliciesRequest(arg0 *glue.GetResourcePoliciesInput) (*request.Request, *glue.GetResourcePoliciesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePoliciesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetResourcePoliciesOutput)
	return ret0, ret1
}

// GetResourcePoliciesRequest indicates an expected call of GetResourcePoliciesRequest.
func (mr *MockGlueAPIMockRecorder) GetResourcePoliciesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetResourcePoliciesRequest), arg0)
}

// GetResourcePoliciesWithContext mocks base method.
func (m *MockGlueAPI) GetResourcePoliciesWithContext(arg0 aws.Context, arg1 *glue.GetResourcePoliciesInput, arg2 ...request.Option) (*glue.GetResourcePoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePoliciesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetResourcePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePoliciesWithContext indicates an expected call of GetResourcePoliciesWithContext.
func (mr *MockGlueAPIMockRecorder) GetResourcePoliciesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePoliciesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetResourcePoliciesWithContext), varargs...)
}

// GetResourcePolicy mocks base method.
func (m *MockGlueAPI) GetResourcePolicy(arg0 *glue.GetResourcePolicyInput) (*glue.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", arg0)
	ret0, _ := ret[0].(*glue.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy.
func (mr *MockGlueAPIMockRecorder) GetResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockGlueAPI)(nil).GetResourcePolicy), arg0)
}

// GetResourcePolicyRequest mocks base method.
func (m *MockGlueAPI) GetResourcePolicyRequest(arg0 *glue.GetResourcePolicyInput) (*request.Request, *glue.GetResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetResourcePolicyOutput)
	return ret0, ret1
}

// GetResourcePolicyRequest indicates an expected call of GetResourcePolicyRequest.
func (mr *MockGlueAPIMockRecorder) GetResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetResourcePolicyRequest), arg0)
}

// GetResourcePolicyWithContext mocks base method.
func (m *MockGlueAPI) GetResourcePolicyWithContext(arg0 aws.Context, arg1 *glue.GetResourcePolicyInput, arg2 ...request.Option) (*glue.GetResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicyWithContext indicates an expected call of GetResourcePolicyWithContext.
func (mr *MockGlueAPIMockRecorder) GetResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicyWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetResourcePolicyWithContext), varargs...)
}

// GetSchema mocks base method.
func (m *MockGlueAPI) GetSchema(arg0 *glue.GetSchemaInput) (*glue.GetSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema", arg0)
	ret0, _ := ret[0].(*glue.GetSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockGlueAPIMockRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockGlueAPI)(nil).GetSchema), arg0)
}

// GetSchemaByDefinition mocks base method.
func (m *MockGlueAPI) GetSchemaByDefinition(arg0 *glue.GetSchemaByDefinitionInput) (*glue.GetSchemaByDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaByDefinition", arg0)
	ret0, _ := ret[0].(*glue.GetSchemaByDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByDefinition indicates an expected call of GetSchemaByDefinition.
func (mr *MockGlueAPIMockRecorder) GetSchemaByDefinition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByDefinition", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaByDefinition), arg0)
}

// GetSchemaByDefinitionRequest mocks base method.
func (m *MockGlueAPI) GetSchemaByDefinitionRequest(arg0 *glue.GetSchemaByDefinitionInput) (*request.Request, *glue.GetSchemaByDefinitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaByDefinitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetSchemaByDefinitionOutput)
	return ret0, ret1
}

// GetSchemaByDefinitionRequest indicates an expected call of GetSchemaByDefinitionRequest.
func (mr *MockGlueAPIMockRecorder) GetSchemaByDefinitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByDefinitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaByDefinitionRequest), arg0)
}

// GetSchemaByDefinitionWithContext mocks base method.
func (m *MockGlueAPI) GetSchemaByDefinitionWithContext(arg0 aws.Context, arg1 *glue.GetSchemaByDefinitionInput, arg2 ...request.Option) (*glue.GetSchemaByDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaByDefinitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetSchemaByDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaByDefinitionWithContext indicates an expected call of GetSchemaByDefinitionWithContext.
func (mr *MockGlueAPIMockRecorder) GetSchemaByDefinitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaByDefinitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaByDefinitionWithContext), varargs...)
}

// GetSchemaRequest mocks base method.
func (m *MockGlueAPI) GetSchemaRequest(arg0 *glue.GetSchemaInput) (*request.Request, *glue.GetSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetSchemaOutput)
	return ret0, ret1
}

// GetSchemaRequest indicates an expected call of GetSchemaRequest.
func (mr *MockGlueAPIMockRecorder) GetSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaRequest), arg0)
}

// GetSchemaVersion mocks base method.
func (m *MockGlueAPI) GetSchemaVersion(arg0 *glue.GetSchemaVersionInput) (*glue.GetSchemaVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaVersion", arg0)
	ret0, _ := ret[0].(*glue.GetSchemaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaVersion indicates an expected call of GetSchemaVersion.
func (mr *MockGlueAPIMockRecorder) GetSchemaVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaVersion", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaVersion), arg0)
}

// GetSchemaVersionRequest mocks base method.
func (m *MockGlueAPI) GetSchemaVersionRequest(arg0 *glue.GetSchemaVersionInput) (*request.Request, *glue.GetSchemaVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetSchemaVersionOutput)
	return ret0, ret1
}

// GetSchemaVersionRequest indicates an expected call of GetSchemaVersionRequest.
func (mr *MockGlueAPIMockRecorder) GetSchemaVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaVersionRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaVersionRequest), arg0)
}

// GetSchemaVersionWithContext mocks base method.
func (m *MockGlueAPI) GetSchemaVersionWithContext(arg0 aws.Context, arg1 *glue.GetSchemaVersionInput, arg2 ...request.Option) (*glue.GetSchemaVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaVersionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetSchemaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaVersionWithContext indicates an expected call of GetSchemaVersionWithContext.
func (mr *MockGlueAPIMockRecorder) GetSchemaVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaVersionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaVersionWithContext), varargs...)
}

// GetSchemaVersionsDiff mocks base method.
func (m *MockGlueAPI) GetSchemaVersionsDiff(arg0 *glue.GetSchemaVersionsDiffInput) (*glue.GetSchemaVersionsDiffOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaVersionsDiff", arg0)
	ret0, _ := ret[0].(*glue.GetSchemaVersionsDiffOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaVersionsDiff indicates an expected call of GetSchemaVersionsDiff.
func (mr *MockGlueAPIMockRecorder) GetSchemaVersionsDiff(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaVersionsDiff", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaVersionsDiff), arg0)
}

// GetSchemaVersionsDiffRequest mocks base method.
func (m *MockGlueAPI) GetSchemaVersionsDiffRequest(arg0 *glue.GetSchemaVersionsDiffInput) (*request.Request, *glue.GetSchemaVersionsDiffOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaVersionsDiffRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetSchemaVersionsDiffOutput)
	return ret0, ret1
}

// GetSchemaVersionsDiffRequest indicates an expected call of GetSchemaVersionsDiffRequest.
func (mr *MockGlueAPIMockRecorder) GetSchemaVersionsDiffRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaVersionsDiffRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaVersionsDiffRequest), arg0)
}

// GetSchemaVersionsDiffWithContext mocks base method.
func (m *MockGlueAPI) GetSchemaVersionsDiffWithContext(arg0 aws.Context, arg1 *glue.GetSchemaVersionsDiffInput, arg2 ...request.Option) (*glue.GetSchemaVersionsDiffOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaVersionsDiffWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetSchemaVersionsDiffOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaVersionsDiffWithContext indicates an expected call of GetSchemaVersionsDiffWithContext.
func (mr *MockGlueAPIMockRecorder) GetSchemaVersionsDiffWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaVersionsDiffWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaVersionsDiffWithContext), varargs...)
}

// GetSchemaWithContext mocks base method.
func (m *MockGlueAPI) GetSchemaWithContext(arg0 aws.Context, arg1 *glue.GetSchemaInput, arg2 ...request.Option) (*glue.GetSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaWithContext indicates an expected call of GetSchemaWithContext.
func (mr *MockGlueAPIMockRecorder) GetSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetSchemaWithContext), varargs...)
}

// GetSecurityConfiguration mocks base method.
func (m *MockGlueAPI) GetSecurityConfiguration(arg0 *glue.GetSecurityConfigurationInput) (*glue.GetSecurityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityConfiguration", arg0)
	ret0, _ := ret[0].(*glue.GetSecurityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityConfiguration indicates an expected call of GetSecurityConfiguration.
func (mr *MockGlueAPIMockRecorder) GetSecurityConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfiguration", reflect.TypeOf((*MockGlueAPI)(nil).GetSecurityConfiguration), arg0)
}

// GetSecurityConfigurationRequest mocks base method.
func (m *MockGlueAPI) GetSecurityConfigurationRequest(arg0 *glue.GetSecurityConfigurationInput) (*request.Request, *glue.GetSecurityConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetSecurityConfigurationOutput)
	return ret0, ret1
}

// GetSecurityConfigurationRequest indicates an expected call of GetSecurityConfigurationRequest.
func (mr *MockGlueAPIMockRecorder) GetSecurityConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigurationRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetSecurityConfigurationRequest), arg0)
}

// GetSecurityConfigurationWithContext mocks base method.
func (m *MockGlueAPI) GetSecurityConfigurationWithContext(arg0 aws.Context, arg1 *glue.GetSecurityConfigurationInput, arg2 ...request.Option) (*glue.GetSecurityConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetSecurityConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityConfigurationWithContext indicates an expected call of GetSecurityConfigurationWithContext.
func (mr *MockGlueAPIMockRecorder) GetSecurityConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigurationWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetSecurityConfigurationWithContext), varargs...)
}

// GetSecurityConfigurations mocks base method.
func (m *MockGlueAPI) GetSecurityConfigurations(arg0 *glue.GetSecurityConfigurationsInput) (*glue.GetSecurityConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityConfigurations", arg0)
	ret0, _ := ret[0].(*glue.GetSecurityConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityConfigurations indicates an expected call of GetSecurityConfigurations.
func (mr *MockGlueAPIMockRecorder) GetSecurityConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigurations", reflect.TypeOf((*MockGlueAPI)(nil).GetSecurityConfigurations), arg0)
}

// GetSecurityConfigurationsPages mocks base method.
func (m *MockGlueAPI) GetSecurityConfigurationsPages(arg0 *glue.GetSecurityConfigurationsInput, arg1 func(*glue.GetSecurityConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSecurityConfigurationsPages indicates an expected call of GetSecurityConfigurationsPages.
func (mr *MockGlueAPIMockRecorder) GetSecurityConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigurationsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetSecurityConfigurationsPages), arg0, arg1)
}

// GetSecurityConfigurationsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetSecurityConfigurationsPagesWithContext(arg0 aws.Context, arg1 *glue.GetSecurityConfigurationsInput, arg2 func(*glue.GetSecurityConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSecurityConfigurationsPagesWithContext indicates an expected call of GetSecurityConfigurationsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetSecurityConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigurationsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetSecurityConfigurationsPagesWithContext), varargs...)
}

// GetSecurityConfigurationsRequest mocks base method.
func (m *MockGlueAPI) GetSecurityConfigurationsRequest(arg0 *glue.GetSecurityConfigurationsInput) (*request.Request, *glue.GetSecurityConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetSecurityConfigurationsOutput)
	return ret0, ret1
}

// GetSecurityConfigurationsRequest indicates an expected call of GetSecurityConfigurationsRequest.
func (mr *MockGlueAPIMockRecorder) GetSecurityConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigurationsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetSecurityConfigurationsRequest), arg0)
}

// GetSecurityConfigurationsWithContext mocks base method.
func (m *MockGlueAPI) GetSecurityConfigurationsWithContext(arg0 aws.Context, arg1 *glue.GetSecurityConfigurationsInput, arg2 ...request.Option) (*glue.GetSecurityConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSecurityConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetSecurityConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityConfigurationsWithContext indicates an expected call of GetSecurityConfigurationsWithContext.
func (mr *MockGlueAPIMockRecorder) GetSecurityConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityConfigurationsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetSecurityConfigurationsWithContext), varargs...)
}

// GetSession mocks base method.
func (m *MockGlueAPI) GetSession(arg0 *glue.GetSessionInput) (*glue.GetSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0)
	ret0, _ := ret[0].(*glue.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockGlueAPIMockRecorder) GetSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockGlueAPI)(nil).GetSession), arg0)
}

// GetSessionRequest mocks base method.
func (m *MockGlueAPI) GetSessionRequest(arg0 *glue.GetSessionInput) (*request.Request, *glue.GetSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetSessionOutput)
	return ret0, ret1
}

// GetSessionRequest indicates an expected call of GetSessionRequest.
func (mr *MockGlueAPIMockRecorder) GetSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetSessionRequest), arg0)
}

// GetSessionWithContext mocks base method.
func (m *MockGlueAPI) GetSessionWithContext(arg0 aws.Context, arg1 *glue.GetSessionInput, arg2 ...request.Option) (*glue.GetSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionWithContext indicates an expected call of GetSessionWithContext.
func (mr *MockGlueAPIMockRecorder) GetSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetSessionWithContext), varargs...)
}

// GetStatement mocks base method.
func (m *MockGlueAPI) GetStatement(arg0 *glue.GetStatementInput) (*glue.GetStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatement", arg0)
	ret0, _ := ret[0].(*glue.GetStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatement indicates an expected call of GetStatement.
func (mr *MockGlueAPIMockRecorder) GetStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatement", reflect.TypeOf((*MockGlueAPI)(nil).GetStatement), arg0)
}

// GetStatementRequest mocks base method.
func (m *MockGlueAPI) GetStatementRequest(arg0 *glue.GetStatementInput) (*request.Request, *glue.GetStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetStatementOutput)
	return ret0, ret1
}

// GetStatementRequest indicates an expected call of GetStatementRequest.
func (mr *MockGlueAPIMockRecorder) GetStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetStatementRequest), arg0)
}

// GetStatementWithContext mocks base method.
func (m *MockGlueAPI) GetStatementWithContext(arg0 aws.Context, arg1 *glue.GetStatementInput, arg2 ...request.Option) (*glue.GetStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatementWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementWithContext indicates an expected call of GetStatementWithContext.
func (mr *MockGlueAPIMockRecorder) GetStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetStatementWithContext), varargs...)
}

// GetTable mocks base method.
func (m *MockGlueAPI) GetTable(arg0 *glue.GetTableInput) (*glue.GetTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", arg0)
	ret0, _ := ret[0].(*glue.GetTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTable indicates an expected call of GetTable.
func (mr *MockGlueAPIMockRecorder) GetTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockGlueAPI)(nil).GetTable), arg0)
}

// GetTableOptimizer mocks base method.
func (m *MockGlueAPI) GetTableOptimizer(arg0 *glue.GetTableOptimizerInput) (*glue.GetTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableOptimizer", arg0)
	ret0, _ := ret[0].(*glue.GetTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableOptimizer indicates an expected call of GetTableOptimizer.
func (mr *MockGlueAPIMockRecorder) GetTableOptimizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableOptimizer", reflect.TypeOf((*MockGlueAPI)(nil).GetTableOptimizer), arg0)
}

// GetTableOptimizerRequest mocks base method.
func (m *MockGlueAPI) GetTableOptimizerRequest(arg0 *glue.GetTableOptimizerInput) (*request.Request, *glue.GetTableOptimizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableOptimizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetTableOptimizerOutput)
	return ret0, ret1
}

// GetTableOptimizerRequest indicates an expected call of GetTableOptimizerRequest.
func (mr *MockGlueAPIMockRecorder) GetTableOptimizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableOptimizerRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetTableOptimizerRequest), arg0)
}

// GetTableOptimizerWithContext mocks base method.
func (m *MockGlueAPI) GetTableOptimizerWithContext(arg0 aws.Context, arg1 *glue.GetTableOptimizerInput, arg2 ...request.Option) (*glue.GetTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableOptimizerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableOptimizerWithContext indicates an expected call of GetTableOptimizerWithContext.
func (mr *MockGlueAPIMockRecorder) GetTableOptimizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableOptimizerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTableOptimizerWithContext), varargs...)
}

// GetTableRequest mocks base method.
func (m *MockGlueAPI) GetTableRequest(arg0 *glue.GetTableInput) (*request.Request, *glue.GetTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetTableOutput)
	return ret0, ret1
}

// GetTableRequest indicates an expected call of GetTableRequest.
func (mr *MockGlueAPIMockRecorder) GetTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetTableRequest), arg0)
}

// GetTableVersion mocks base method.
func (m *MockGlueAPI) GetTableVersion(arg0 *glue.GetTableVersionInput) (*glue.GetTableVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableVersion", arg0)
	ret0, _ := ret[0].(*glue.GetTableVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableVersion indicates an expected call of GetTableVersion.
func (mr *MockGlueAPIMockRecorder) GetTableVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableVersion", reflect.TypeOf((*MockGlueAPI)(nil).GetTableVersion), arg0)
}

// GetTableVersionRequest mocks base method.
func (m *MockGlueAPI) GetTableVersionRequest(arg0 *glue.GetTableVersionInput) (*request.Request, *glue.GetTableVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetTableVersionOutput)
	return ret0, ret1
}

// GetTableVersionRequest indicates an expected call of GetTableVersionRequest.
func (mr *MockGlueAPIMockRecorder) GetTableVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableVersionRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetTableVersionRequest), arg0)
}

// GetTableVersionWithContext mocks base method.
func (m *MockGlueAPI) GetTableVersionWithContext(arg0 aws.Context, arg1 *glue.GetTableVersionInput, arg2 ...request.Option) (*glue.GetTableVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableVersionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetTableVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableVersionWithContext indicates an expected call of GetTableVersionWithContext.
func (mr *MockGlueAPIMockRecorder) GetTableVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableVersionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTableVersionWithContext), varargs...)
}

// GetTableVersions mocks base method.
func (m *MockGlueAPI) GetTableVersions(arg0 *glue.GetTableVersionsInput) (*glue.GetTableVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableVersions", arg0)
	ret0, _ := ret[0].(*glue.GetTableVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableVersions indicates an expected call of GetTableVersions.
func (mr *MockGlueAPIMockRecorder) GetTableVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableVersions", reflect.TypeOf((*MockGlueAPI)(nil).GetTableVersions), arg0)
}

// GetTableVersionsPages mocks base method.
func (m *MockGlueAPI) GetTableVersionsPages(arg0 *glue.GetTableVersionsInput, arg1 func(*glue.GetTableVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTableVersionsPages indicates an expected call of GetTableVersionsPages.
func (mr *MockGlueAPIMockRecorder) GetTableVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableVersionsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetTableVersionsPages), arg0, arg1)
}

// GetTableVersionsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetTableVersionsPagesWithContext(arg0 aws.Context, arg1 *glue.GetTableVersionsInput, arg2 func(*glue.GetTableVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTableVersionsPagesWithContext indicates an expected call of GetTableVersionsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetTableVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableVersionsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTableVersionsPagesWithContext), varargs...)
}

// GetTableVersionsRequest mocks base method.
func (m *MockGlueAPI) GetTableVersionsRequest(arg0 *glue.GetTableVersionsInput) (*request.Request, *glue.GetTableVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetTableVersionsOutput)
	return ret0, ret1
}

// GetTableVersionsRequest indicates an expected call of GetTableVersionsRequest.
func (mr *MockGlueAPIMockRecorder) GetTableVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableVersionsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetTableVersionsRequest), arg0)
}

// GetTableVersionsWithContext mocks base method.
func (m *MockGlueAPI) GetTableVersionsWithContext(arg0 aws.Context, arg1 *glue.GetTableVersionsInput, arg2 ...request.Option) (*glue.GetTableVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetTableVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableVersionsWithContext indicates an expected call of GetTableVersionsWithContext.
func (mr *MockGlueAPIMockRecorder) GetTableVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableVersionsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTableVersionsWithContext), varargs...)
}

// GetTableWithContext mocks base method.
func (m *MockGlueAPI) GetTableWithContext(arg0 aws.Context, arg1 *glue.GetTableInput, arg2 ...request.Option) (*glue.GetTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTableWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableWithContext indicates an expected call of GetTableWithContext.
func (mr *MockGlueAPIMockRecorder) GetTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTableWithContext), varargs...)
}

// GetTables mocks base method.
func (m *MockGlueAPI) GetTables(arg0 *glue.GetTablesInput) (*glue.GetTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables", arg0)
	ret0, _ := ret[0].(*glue.GetTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockGlueAPIMockRecorder) GetTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockGlueAPI)(nil).GetTables), arg0)
}

// GetTablesPages mocks base method.
func (m *MockGlueAPI) GetTablesPages(arg0 *glue.GetTablesInput, arg1 func(*glue.GetTablesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTablesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTablesPages indicates an expected call of GetTablesPages.
func (mr *MockGlueAPIMockRecorder) GetTablesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTablesPages", reflect.TypeOf((*MockGlueAPI)(nil).GetTablesPages), arg0, arg1)
}

// GetTablesPagesWithContext mocks base method.
func (m *MockGlueAPI) GetTablesPagesWithContext(arg0 aws.Context, arg1 *glue.GetTablesInput, arg2 func(*glue.GetTablesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTablesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTablesPagesWithContext indicates an expected call of GetTablesPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetTablesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTablesPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTablesPagesWithContext), varargs...)
}

// GetTablesRequest mocks base method.
func (m *MockGlueAPI) GetTablesRequest(arg0 *glue.GetTablesInput) (*request.Request, *glue.GetTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetTablesOutput)
	return ret0, ret1
}

// GetTablesRequest indicates an expected call of GetTablesRequest.
func (mr *MockGlueAPIMockRecorder) GetTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTablesRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetTablesRequest), arg0)
}

// GetTablesWithContext mocks base method.
func (m *MockGlueAPI) GetTablesWithContext(arg0 aws.Context, arg1 *glue.GetTablesInput, arg2 ...request.Option) (*glue.GetTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTablesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTablesWithContext indicates an expected call of GetTablesWithContext.
func (mr *MockGlueAPIMockRecorder) GetTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTablesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTablesWithContext), varargs...)
}

// GetTags mocks base method.
func (m *MockGlueAPI) GetTags(arg0 *glue.GetTagsInput) (*glue.GetTagsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0)
	ret0, _ := ret[0].(*glue.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockGlueAPIMockRecorder) GetTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockGlueAPI)(nil).GetTags), arg0)
}

// GetTagsRequest mocks base method.
func (m *MockGlueAPI) GetTagsRequest(arg0 *glue.GetTagsInput) (*request.Request, *glue.GetTagsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetTagsOutput)
	return ret0, ret1
}

// GetTagsRequest indicates an expected call of GetTagsRequest.
func (mr *MockGlueAPIMockRecorder) GetTagsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetTagsRequest), arg0)
}

// GetTagsWithContext mocks base method.
func (m *MockGlueAPI) GetTagsWithContext(arg0 aws.Context, arg1 *glue.GetTagsInput, arg2 ...request.Option) (*glue.GetTagsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetTagsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsWithContext indicates an expected call of GetTagsWithContext.
func (mr *MockGlueAPIMockRecorder) GetTagsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTagsWithContext), varargs...)
}

// GetTrigger mocks base method.
func (m *MockGlueAPI) GetTrigger(arg0 *glue.GetTriggerInput) (*glue.GetTriggerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrigger", arg0)
	ret0, _ := ret[0].(*glue.GetTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrigger indicates an expected call of GetTrigger.
func (mr *MockGlueAPIMockRecorder) GetTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrigger", reflect.TypeOf((*MockGlueAPI)(nil).GetTrigger), arg0)
}

// GetTriggerRequest mocks base method.
func (m *MockGlueAPI) GetTriggerRequest(arg0 *glue.GetTriggerInput) (*request.Request, *glue.GetTriggerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetTriggerOutput)
	return ret0, ret1
}

// GetTriggerRequest indicates an expected call of GetTriggerRequest.
func (mr *MockGlueAPIMockRecorder) GetTriggerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetTriggerRequest), arg0)
}

// GetTriggerWithContext mocks base method.
func (m *MockGlueAPI) GetTriggerWithContext(arg0 aws.Context, arg1 *glue.GetTriggerInput, arg2 ...request.Option) (*glue.GetTriggerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTriggerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerWithContext indicates an expected call of GetTriggerWithContext.
func (mr *MockGlueAPIMockRecorder) GetTriggerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTriggerWithContext), varargs...)
}

// GetTriggers mocks base method.
func (m *MockGlueAPI) GetTriggers(arg0 *glue.GetTriggersInput) (*glue.GetTriggersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggers", arg0)
	ret0, _ := ret[0].(*glue.GetTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggers indicates an expected call of GetTriggers.
func (mr *MockGlueAPIMockRecorder) GetTriggers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*MockGlueAPI)(nil).GetTriggers), arg0)
}

// GetTriggersPages mocks base method.
func (m *MockGlueAPI) GetTriggersPages(arg0 *glue.GetTriggersInput, arg1 func(*glue.GetTriggersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTriggersPages indicates an expected call of GetTriggersPages.
func (mr *MockGlueAPIMockRecorder) GetTriggersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggersPages", reflect.TypeOf((*MockGlueAPI)(nil).GetTriggersPages), arg0, arg1)
}

// GetTriggersPagesWithContext mocks base method.
func (m *MockGlueAPI) GetTriggersPagesWithContext(arg0 aws.Context, arg1 *glue.GetTriggersInput, arg2 func(*glue.GetTriggersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTriggersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTriggersPagesWithContext indicates an expected call of GetTriggersPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetTriggersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggersPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTriggersPagesWithContext), varargs...)
}

// GetTriggersRequest mocks base method.
func (m *MockGlueAPI) GetTriggersRequest(arg0 *glue.GetTriggersInput) (*request.Request, *glue.GetTriggersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetTriggersOutput)
	return ret0, ret1
}

// GetTriggersRequest indicates an expected call of GetTriggersRequest.
func (mr *MockGlueAPIMockRecorder) GetTriggersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggersRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetTriggersRequest), arg0)
}

// GetTriggersWithContext mocks base method.
func (m *MockGlueAPI) GetTriggersWithContext(arg0 aws.Context, arg1 *glue.GetTriggersInput, arg2 ...request.Option) (*glue.GetTriggersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTriggersWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggersWithContext indicates an expected call of GetTriggersWithContext.
func (mr *MockGlueAPIMockRecorder) GetTriggersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggersWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetTriggersWithContext), varargs...)
}

// GetUnfilteredPartitionMetadata mocks base method.
func (m *MockGlueAPI) GetUnfilteredPartitionMetadata(arg0 *glue.GetUnfilteredPartitionMetadataInput) (*glue.GetUnfilteredPartitionMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfilteredPartitionMetadata", arg0)
	ret0, _ := ret[0].(*glue.GetUnfilteredPartitionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfilteredPartitionMetadata indicates an expected call of GetUnfilteredPartitionMetadata.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredPartitionMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredPartitionMetadata", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredPartitionMetadata), arg0)
}

// GetUnfilteredPartitionMetadataRequest mocks base method.
func (m *MockGlueAPI) GetUnfilteredPartitionMetadataRequest(arg0 *glue.GetUnfilteredPartitionMetadataInput) (*request.Request, *glue.GetUnfilteredPartitionMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfilteredPartitionMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetUnfilteredPartitionMetadataOutput)
	return ret0, ret1
}

// GetUnfilteredPartitionMetadataRequest indicates an expected call of GetUnfilteredPartitionMetadataRequest.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredPartitionMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredPartitionMetadataRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredPartitionMetadataRequest), arg0)
}

// GetUnfilteredPartitionMetadataWithContext mocks base method.
func (m *MockGlueAPI) GetUnfilteredPartitionMetadataWithContext(arg0 aws.Context, arg1 *glue.GetUnfilteredPartitionMetadataInput, arg2 ...request.Option) (*glue.GetUnfilteredPartitionMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUnfilteredPartitionMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetUnfilteredPartitionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfilteredPartitionMetadataWithContext indicates an expected call of GetUnfilteredPartitionMetadataWithContext.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredPartitionMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredPartitionMetadataWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredPartitionMetadataWithContext), varargs...)
}

// GetUnfilteredPartitionsMetadata mocks base method.
func (m *MockGlueAPI) GetUnfilteredPartitionsMetadata(arg0 *glue.GetUnfilteredPartitionsMetadataInput) (*glue.GetUnfilteredPartitionsMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfilteredPartitionsMetadata", arg0)
	ret0, _ := ret[0].(*glue.GetUnfilteredPartitionsMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfilteredPartitionsMetadata indicates an expected call of GetUnfilteredPartitionsMetadata.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredPartitionsMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredPartitionsMetadata", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredPartitionsMetadata), arg0)
}

// GetUnfilteredPartitionsMetadataPages mocks base method.
func (m *MockGlueAPI) GetUnfilteredPartitionsMetadataPages(arg0 *glue.GetUnfilteredPartitionsMetadataInput, arg1 func(*glue.GetUnfilteredPartitionsMetadataOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfilteredPartitionsMetadataPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUnfilteredPartitionsMetadataPages indicates an expected call of GetUnfilteredPartitionsMetadataPages.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredPartitionsMetadataPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredPartitionsMetadataPages", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredPartitionsMetadataPages), arg0, arg1)
}

// GetUnfilteredPartitionsMetadataPagesWithContext mocks base method.
func (m *MockGlueAPI) GetUnfilteredPartitionsMetadataPagesWithContext(arg0 aws.Context, arg1 *glue.GetUnfilteredPartitionsMetadataInput, arg2 func(*glue.GetUnfilteredPartitionsMetadataOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUnfilteredPartitionsMetadataPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUnfilteredPartitionsMetadataPagesWithContext indicates an expected call of GetUnfilteredPartitionsMetadataPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredPartitionsMetadataPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredPartitionsMetadataPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredPartitionsMetadataPagesWithContext), varargs...)
}

// GetUnfilteredPartitionsMetadataRequest mocks base method.
func (m *MockGlueAPI) GetUnfilteredPartitionsMetadataRequest(arg0 *glue.GetUnfilteredPartitionsMetadataInput) (*request.Request, *glue.GetUnfilteredPartitionsMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfilteredPartitionsMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetUnfilteredPartitionsMetadataOutput)
	return ret0, ret1
}

// GetUnfilteredPartitionsMetadataRequest indicates an expected call of GetUnfilteredPartitionsMetadataRequest.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredPartitionsMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredPartitionsMetadataRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredPartitionsMetadataRequest), arg0)
}

// GetUnfilteredPartitionsMetadataWithContext mocks base method.
func (m *MockGlueAPI) GetUnfilteredPartitionsMetadataWithContext(arg0 aws.Context, arg1 *glue.GetUnfilteredPartitionsMetadataInput, arg2 ...request.Option) (*glue.GetUnfilteredPartitionsMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUnfilteredPartitionsMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetUnfilteredPartitionsMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfilteredPartitionsMetadataWithContext indicates an expected call of GetUnfilteredPartitionsMetadataWithContext.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredPartitionsMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredPartitionsMetadataWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredPartitionsMetadataWithContext), varargs...)
}

// GetUnfilteredTableMetadata mocks base method.
func (m *MockGlueAPI) GetUnfilteredTableMetadata(arg0 *glue.GetUnfilteredTableMetadataInput) (*glue.GetUnfilteredTableMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfilteredTableMetadata", arg0)
	ret0, _ := ret[0].(*glue.GetUnfilteredTableMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfilteredTableMetadata indicates an expected call of GetUnfilteredTableMetadata.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredTableMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredTableMetadata", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredTableMetadata), arg0)
}

// GetUnfilteredTableMetadataRequest mocks base method.
func (m *MockGlueAPI) GetUnfilteredTableMetadataRequest(arg0 *glue.GetUnfilteredTableMetadataInput) (*request.Request, *glue.GetUnfilteredTableMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfilteredTableMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetUnfilteredTableMetadataOutput)
	return ret0, ret1
}

// GetUnfilteredTableMetadataRequest indicates an expected call of GetUnfilteredTableMetadataRequest.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredTableMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredTableMetadataRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredTableMetadataRequest), arg0)
}

// GetUnfilteredTableMetadataWithContext mocks base method.
func (m *MockGlueAPI) GetUnfilteredTableMetadataWithContext(arg0 aws.Context, arg1 *glue.GetUnfilteredTableMetadataInput, arg2 ...request.Option) (*glue.GetUnfilteredTableMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUnfilteredTableMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetUnfilteredTableMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfilteredTableMetadataWithContext indicates an expected call of GetUnfilteredTableMetadataWithContext.
func (mr *MockGlueAPIMockRecorder) GetUnfilteredTableMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfilteredTableMetadataWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetUnfilteredTableMetadataWithContext), varargs...)
}

// GetUsageProfile mocks base method.
func (m *MockGlueAPI) GetUsageProfile(arg0 *glue.GetUsageProfileInput) (*glue.GetUsageProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsageProfile", arg0)
	ret0, _ := ret[0].(*glue.GetUsageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageProfile indicates an expected call of GetUsageProfile.
func (mr *MockGlueAPIMockRecorder) GetUsageProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageProfile", reflect.TypeOf((*MockGlueAPI)(nil).GetUsageProfile), arg0)
}

// GetUsageProfileRequest mocks base method.
func (m *MockGlueAPI) GetUsageProfileRequest(arg0 *glue.GetUsageProfileInput) (*request.Request, *glue.GetUsageProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsageProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetUsageProfileOutput)
	return ret0, ret1
}

// GetUsageProfileRequest indicates an expected call of GetUsageProfileRequest.
func (mr *MockGlueAPIMockRecorder) GetUsageProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageProfileRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetUsageProfileRequest), arg0)
}

// GetUsageProfileWithContext mocks base method.
func (m *MockGlueAPI) GetUsageProfileWithContext(arg0 aws.Context, arg1 *glue.GetUsageProfileInput, arg2 ...request.Option) (*glue.GetUsageProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsageProfileWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetUsageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsageProfileWithContext indicates an expected call of GetUsageProfileWithContext.
func (mr *MockGlueAPIMockRecorder) GetUsageProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsageProfileWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetUsageProfileWithContext), varargs...)
}

// GetUserDefinedFunction mocks base method.
func (m *MockGlueAPI) GetUserDefinedFunction(arg0 *glue.GetUserDefinedFunctionInput) (*glue.GetUserDefinedFunctionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDefinedFunction", arg0)
	ret0, _ := ret[0].(*glue.GetUserDefinedFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDefinedFunction indicates an expected call of GetUserDefinedFunction.
func (mr *MockGlueAPIMockRecorder) GetUserDefinedFunction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedFunction", reflect.TypeOf((*MockGlueAPI)(nil).GetUserDefinedFunction), arg0)
}

// GetUserDefinedFunctionRequest mocks base method.
func (m *MockGlueAPI) GetUserDefinedFunctionRequest(arg0 *glue.GetUserDefinedFunctionInput) (*request.Request, *glue.GetUserDefinedFunctionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDefinedFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetUserDefinedFunctionOutput)
	return ret0, ret1
}

// GetUserDefinedFunctionRequest indicates an expected call of GetUserDefinedFunctionRequest.
func (mr *MockGlueAPIMockRecorder) GetUserDefinedFunctionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedFunctionRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetUserDefinedFunctionRequest), arg0)
}

// GetUserDefinedFunctionWithContext mocks base method.
func (m *MockGlueAPI) GetUserDefinedFunctionWithContext(arg0 aws.Context, arg1 *glue.GetUserDefinedFunctionInput, arg2 ...request.Option) (*glue.GetUserDefinedFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserDefinedFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetUserDefinedFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDefinedFunctionWithContext indicates an expected call of GetUserDefinedFunctionWithContext.
func (mr *MockGlueAPIMockRecorder) GetUserDefinedFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedFunctionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetUserDefinedFunctionWithContext), varargs...)
}

// GetUserDefinedFunctions mocks base method.
func (m *MockGlueAPI) GetUserDefinedFunctions(arg0 *glue.GetUserDefinedFunctionsInput) (*glue.GetUserDefinedFunctionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDefinedFunctions", arg0)
	ret0, _ := ret[0].(*glue.GetUserDefinedFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDefinedFunctions indicates an expected call of GetUserDefinedFunctions.
func (mr *MockGlueAPIMockRecorder) GetUserDefinedFunctions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedFunctions", reflect.TypeOf((*MockGlueAPI)(nil).GetUserDefinedFunctions), arg0)
}

// GetUserDefinedFunctionsPages mocks base method.
func (m *MockGlueAPI) GetUserDefinedFunctionsPages(arg0 *glue.GetUserDefinedFunctionsInput, arg1 func(*glue.GetUserDefinedFunctionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDefinedFunctionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserDefinedFunctionsPages indicates an expected call of GetUserDefinedFunctionsPages.
func (mr *MockGlueAPIMockRecorder) GetUserDefinedFunctionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedFunctionsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetUserDefinedFunctionsPages), arg0, arg1)
}

// GetUserDefinedFunctionsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetUserDefinedFunctionsPagesWithContext(arg0 aws.Context, arg1 *glue.GetUserDefinedFunctionsInput, arg2 func(*glue.GetUserDefinedFunctionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserDefinedFunctionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserDefinedFunctionsPagesWithContext indicates an expected call of GetUserDefinedFunctionsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetUserDefinedFunctionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedFunctionsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetUserDefinedFunctionsPagesWithContext), varargs...)
}

// GetUserDefinedFunctionsRequest mocks base method.
func (m *MockGlueAPI) GetUserDefinedFunctionsRequest(arg0 *glue.GetUserDefinedFunctionsInput) (*request.Request, *glue.GetUserDefinedFunctionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDefinedFunctionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetUserDefinedFunctionsOutput)
	return ret0, ret1
}

// GetUserDefinedFunctionsRequest indicates an expected call of GetUserDefinedFunctionsRequest.
func (mr *MockGlueAPIMockRecorder) GetUserDefinedFunctionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedFunctionsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetUserDefinedFunctionsRequest), arg0)
}

// GetUserDefinedFunctionsWithContext mocks base method.
func (m *MockGlueAPI) GetUserDefinedFunctionsWithContext(arg0 aws.Context, arg1 *glue.GetUserDefinedFunctionsInput, arg2 ...request.Option) (*glue.GetUserDefinedFunctionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserDefinedFunctionsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetUserDefinedFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDefinedFunctionsWithContext indicates an expected call of GetUserDefinedFunctionsWithContext.
func (mr *MockGlueAPIMockRecorder) GetUserDefinedFunctionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDefinedFunctionsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetUserDefinedFunctionsWithContext), varargs...)
}

// GetWorkflow mocks base method.
func (m *MockGlueAPI) GetWorkflow(arg0 *glue.GetWorkflowInput) (*glue.GetWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflow", arg0)
	ret0, _ := ret[0].(*glue.GetWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflow indicates an expected call of GetWorkflow.
func (mr *MockGlueAPIMockRecorder) GetWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflow", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflow), arg0)
}

// GetWorkflowRequest mocks base method.
func (m *MockGlueAPI) GetWorkflowRequest(arg0 *glue.GetWorkflowInput) (*request.Request, *glue.GetWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetWorkflowOutput)
	return ret0, ret1
}

// GetWorkflowRequest indicates an expected call of GetWorkflowRequest.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRequest), arg0)
}

// GetWorkflowRun mocks base method.
func (m *MockGlueAPI) GetWorkflowRun(arg0 *glue.GetWorkflowRunInput) (*glue.GetWorkflowRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRun", arg0)
	ret0, _ := ret[0].(*glue.GetWorkflowRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowRun indicates an expected call of GetWorkflowRun.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRun", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRun), arg0)
}

// GetWorkflowRunProperties mocks base method.
func (m *MockGlueAPI) GetWorkflowRunProperties(arg0 *glue.GetWorkflowRunPropertiesInput) (*glue.GetWorkflowRunPropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunProperties", arg0)
	ret0, _ := ret[0].(*glue.GetWorkflowRunPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowRunProperties indicates an expected call of GetWorkflowRunProperties.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunProperties", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunProperties), arg0)
}

// GetWorkflowRunPropertiesRequest mocks base method.
func (m *MockGlueAPI) GetWorkflowRunPropertiesRequest(arg0 *glue.GetWorkflowRunPropertiesInput) (*request.Request, *glue.GetWorkflowRunPropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunPropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetWorkflowRunPropertiesOutput)
	return ret0, ret1
}

// GetWorkflowRunPropertiesRequest indicates an expected call of GetWorkflowRunPropertiesRequest.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunPropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunPropertiesRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunPropertiesRequest), arg0)
}

// GetWorkflowRunPropertiesWithContext mocks base method.
func (m *MockGlueAPI) GetWorkflowRunPropertiesWithContext(arg0 aws.Context, arg1 *glue.GetWorkflowRunPropertiesInput, arg2 ...request.Option) (*glue.GetWorkflowRunPropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowRunPropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetWorkflowRunPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowRunPropertiesWithContext indicates an expected call of GetWorkflowRunPropertiesWithContext.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunPropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunPropertiesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunPropertiesWithContext), varargs...)
}

// GetWorkflowRunRequest mocks base method.
func (m *MockGlueAPI) GetWorkflowRunRequest(arg0 *glue.GetWorkflowRunInput) (*request.Request, *glue.GetWorkflowRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetWorkflowRunOutput)
	return ret0, ret1
}

// GetWorkflowRunRequest indicates an expected call of GetWorkflowRunRequest.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunRequest), arg0)
}

// GetWorkflowRunWithContext mocks base method.
func (m *MockGlueAPI) GetWorkflowRunWithContext(arg0 aws.Context, arg1 *glue.GetWorkflowRunInput, arg2 ...request.Option) (*glue.GetWorkflowRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetWorkflowRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowRunWithContext indicates an expected call of GetWorkflowRunWithContext.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunWithContext), varargs...)
}

// GetWorkflowRuns mocks base method.
func (m *MockGlueAPI) GetWorkflowRuns(arg0 *glue.GetWorkflowRunsInput) (*glue.GetWorkflowRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRuns", arg0)
	ret0, _ := ret[0].(*glue.GetWorkflowRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowRuns indicates an expected call of GetWorkflowRuns.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRuns", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRuns), arg0)
}

// GetWorkflowRunsPages mocks base method.
func (m *MockGlueAPI) GetWorkflowRunsPages(arg0 *glue.GetWorkflowRunsInput, arg1 func(*glue.GetWorkflowRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWorkflowRunsPages indicates an expected call of GetWorkflowRunsPages.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunsPages), arg0, arg1)
}

// GetWorkflowRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) GetWorkflowRunsPagesWithContext(arg0 aws.Context, arg1 *glue.GetWorkflowRunsInput, arg2 func(*glue.GetWorkflowRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWorkflowRunsPagesWithContext indicates an expected call of GetWorkflowRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunsPagesWithContext), varargs...)
}

// GetWorkflowRunsRequest mocks base method.
func (m *MockGlueAPI) GetWorkflowRunsRequest(arg0 *glue.GetWorkflowRunsInput) (*request.Request, *glue.GetWorkflowRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.GetWorkflowRunsOutput)
	return ret0, ret1
}

// GetWorkflowRunsRequest indicates an expected call of GetWorkflowRunsRequest.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunsRequest), arg0)
}

// GetWorkflowRunsWithContext mocks base method.
func (m *MockGlueAPI) GetWorkflowRunsWithContext(arg0 aws.Context, arg1 *glue.GetWorkflowRunsInput, arg2 ...request.Option) (*glue.GetWorkflowRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetWorkflowRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowRunsWithContext indicates an expected call of GetWorkflowRunsWithContext.
func (mr *MockGlueAPIMockRecorder) GetWorkflowRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowRunsWithContext), varargs...)
}

// GetWorkflowWithContext mocks base method.
func (m *MockGlueAPI) GetWorkflowWithContext(arg0 aws.Context, arg1 *glue.GetWorkflowInput, arg2 ...request.Option) (*glue.GetWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*glue.GetWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowWithContext indicates an expected call of GetWorkflowWithContext.
func (mr *MockGlueAPIMockRecorder) GetWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowWithContext", reflect.TypeOf((*MockGlueAPI)(nil).GetWorkflowWithContext), varargs...)
}

// ImportCatalogToGlue mocks base method.
func (m *MockGlueAPI) ImportCatalogToGlue(arg0 *glue.ImportCatalogToGlueInput) (*glue.ImportCatalogToGlueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCatalogToGlue", arg0)
	ret0, _ := ret[0].(*glue.ImportCatalogToGlueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCatalogToGlue indicates an expected call of ImportCatalogToGlue.
func (mr *MockGlueAPIMockRecorder) ImportCatalogToGlue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCatalogToGlue", reflect.TypeOf((*MockGlueAPI)(nil).ImportCatalogToGlue), arg0)
}

// ImportCatalogToGlueRequest mocks base method.
func (m *MockGlueAPI) ImportCatalogToGlueRequest(arg0 *glue.ImportCatalogToGlueInput) (*request.Request, *glue.ImportCatalogToGlueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCatalogToGlueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ImportCatalogToGlueOutput)
	return ret0, ret1
}

// ImportCatalogToGlueRequest indicates an expected call of ImportCatalogToGlueRequest.
func (mr *MockGlueAPIMockRecorder) ImportCatalogToGlueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCatalogToGlueRequest", reflect.TypeOf((*MockGlueAPI)(nil).ImportCatalogToGlueRequest), arg0)
}

// ImportCatalogToGlueWithContext mocks base method.
func (m *MockGlueAPI) ImportCatalogToGlueWithContext(arg0 aws.Context, arg1 *glue.ImportCatalogToGlueInput, arg2 ...request.Option) (*glue.ImportCatalogToGlueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportCatalogToGlueWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ImportCatalogToGlueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCatalogToGlueWithContext indicates an expected call of ImportCatalogToGlueWithContext.
func (mr *MockGlueAPIMockRecorder) ImportCatalogToGlueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCatalogToGlueWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ImportCatalogToGlueWithContext), varargs...)
}

// ListBlueprints mocks base method.
func (m *MockGlueAPI) ListBlueprints(arg0 *glue.ListBlueprintsInput) (*glue.ListBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlueprints", arg0)
	ret0, _ := ret[0].(*glue.ListBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlueprints indicates an expected call of ListBlueprints.
func (mr *MockGlueAPIMockRecorder) ListBlueprints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlueprints", reflect.TypeOf((*MockGlueAPI)(nil).ListBlueprints), arg0)
}

// ListBlueprintsPages mocks base method.
func (m *MockGlueAPI) ListBlueprintsPages(arg0 *glue.ListBlueprintsInput, arg1 func(*glue.ListBlueprintsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlueprintsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBlueprintsPages indicates an expected call of ListBlueprintsPages.
func (mr *MockGlueAPIMockRecorder) ListBlueprintsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlueprintsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListBlueprintsPages), arg0, arg1)
}

// ListBlueprintsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListBlueprintsPagesWithContext(arg0 aws.Context, arg1 *glue.ListBlueprintsInput, arg2 func(*glue.ListBlueprintsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBlueprintsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListBlueprintsPagesWithContext indicates an expected call of ListBlueprintsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListBlueprintsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlueprintsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListBlueprintsPagesWithContext), varargs...)
}

// ListBlueprintsRequest mocks base method.
func (m *MockGlueAPI) ListBlueprintsRequest(arg0 *glue.ListBlueprintsInput) (*request.Request, *glue.ListBlueprintsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlueprintsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListBlueprintsOutput)
	return ret0, ret1
}

// ListBlueprintsRequest indicates an expected call of ListBlueprintsRequest.
func (mr *MockGlueAPIMockRecorder) ListBlueprintsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlueprintsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListBlueprintsRequest), arg0)
}

// ListBlueprintsWithContext mocks base method.
func (m *MockGlueAPI) ListBlueprintsWithContext(arg0 aws.Context, arg1 *glue.ListBlueprintsInput, arg2 ...request.Option) (*glue.ListBlueprintsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBlueprintsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListBlueprintsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlueprintsWithContext indicates an expected call of ListBlueprintsWithContext.
func (mr *MockGlueAPIMockRecorder) ListBlueprintsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlueprintsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListBlueprintsWithContext), varargs...)
}

// ListColumnStatisticsTaskRuns mocks base method.
func (m *MockGlueAPI) ListColumnStatisticsTaskRuns(arg0 *glue.ListColumnStatisticsTaskRunsInput) (*glue.ListColumnStatisticsTaskRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListColumnStatisticsTaskRuns", arg0)
	ret0, _ := ret[0].(*glue.ListColumnStatisticsTaskRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListColumnStatisticsTaskRuns indicates an expected call of ListColumnStatisticsTaskRuns.
func (mr *MockGlueAPIMockRecorder) ListColumnStatisticsTaskRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListColumnStatisticsTaskRuns", reflect.TypeOf((*MockGlueAPI)(nil).ListColumnStatisticsTaskRuns), arg0)
}

// ListColumnStatisticsTaskRunsPages mocks base method.
func (m *MockGlueAPI) ListColumnStatisticsTaskRunsPages(arg0 *glue.ListColumnStatisticsTaskRunsInput, arg1 func(*glue.ListColumnStatisticsTaskRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListColumnStatisticsTaskRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListColumnStatisticsTaskRunsPages indicates an expected call of ListColumnStatisticsTaskRunsPages.
func (mr *MockGlueAPIMockRecorder) ListColumnStatisticsTaskRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListColumnStatisticsTaskRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListColumnStatisticsTaskRunsPages), arg0, arg1)
}

// ListColumnStatisticsTaskRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListColumnStatisticsTaskRunsPagesWithContext(arg0 aws.Context, arg1 *glue.ListColumnStatisticsTaskRunsInput, arg2 func(*glue.ListColumnStatisticsTaskRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListColumnStatisticsTaskRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListColumnStatisticsTaskRunsPagesWithContext indicates an expected call of ListColumnStatisticsTaskRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListColumnStatisticsTaskRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListColumnStatisticsTaskRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListColumnStatisticsTaskRunsPagesWithContext), varargs...)
}

// ListColumnStatisticsTaskRunsRequest mocks base method.
func (m *MockGlueAPI) ListColumnStatisticsTaskRunsRequest(arg0 *glue.ListColumnStatisticsTaskRunsInput) (*request.Request, *glue.ListColumnStatisticsTaskRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListColumnStatisticsTaskRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListColumnStatisticsTaskRunsOutput)
	return ret0, ret1
}

// ListColumnStatisticsTaskRunsRequest indicates an expected call of ListColumnStatisticsTaskRunsRequest.
func (mr *MockGlueAPIMockRecorder) ListColumnStatisticsTaskRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListColumnStatisticsTaskRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListColumnStatisticsTaskRunsRequest), arg0)
}

// ListColumnStatisticsTaskRunsWithContext mocks base method.
func (m *MockGlueAPI) ListColumnStatisticsTaskRunsWithContext(arg0 aws.Context, arg1 *glue.ListColumnStatisticsTaskRunsInput, arg2 ...request.Option) (*glue.ListColumnStatisticsTaskRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListColumnStatisticsTaskRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListColumnStatisticsTaskRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListColumnStatisticsTaskRunsWithContext indicates an expected call of ListColumnStatisticsTaskRunsWithContext.
func (mr *MockGlueAPIMockRecorder) ListColumnStatisticsTaskRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListColumnStatisticsTaskRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListColumnStatisticsTaskRunsWithContext), varargs...)
}

// ListCrawlers mocks base method.
func (m *MockGlueAPI) ListCrawlers(arg0 *glue.ListCrawlersInput) (*glue.ListCrawlersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrawlers", arg0)
	ret0, _ := ret[0].(*glue.ListCrawlersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrawlers indicates an expected call of ListCrawlers.
func (mr *MockGlueAPIMockRecorder) ListCrawlers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrawlers", reflect.TypeOf((*MockGlueAPI)(nil).ListCrawlers), arg0)
}

// ListCrawlersPages mocks base method.
func (m *MockGlueAPI) ListCrawlersPages(arg0 *glue.ListCrawlersInput, arg1 func(*glue.ListCrawlersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrawlersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCrawlersPages indicates an expected call of ListCrawlersPages.
func (mr *MockGlueAPIMockRecorder) ListCrawlersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrawlersPages", reflect.TypeOf((*MockGlueAPI)(nil).ListCrawlersPages), arg0, arg1)
}

// ListCrawlersPagesWithContext mocks base method.
func (m *MockGlueAPI) ListCrawlersPagesWithContext(arg0 aws.Context, arg1 *glue.ListCrawlersInput, arg2 func(*glue.ListCrawlersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrawlersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCrawlersPagesWithContext indicates an expected call of ListCrawlersPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListCrawlersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrawlersPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListCrawlersPagesWithContext), varargs...)
}

// ListCrawlersRequest mocks base method.
func (m *MockGlueAPI) ListCrawlersRequest(arg0 *glue.ListCrawlersInput) (*request.Request, *glue.ListCrawlersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrawlersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListCrawlersOutput)
	return ret0, ret1
}

// ListCrawlersRequest indicates an expected call of ListCrawlersRequest.
func (mr *MockGlueAPIMockRecorder) ListCrawlersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrawlersRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListCrawlersRequest), arg0)
}

// ListCrawlersWithContext mocks base method.
func (m *MockGlueAPI) ListCrawlersWithContext(arg0 aws.Context, arg1 *glue.ListCrawlersInput, arg2 ...request.Option) (*glue.ListCrawlersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrawlersWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListCrawlersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrawlersWithContext indicates an expected call of ListCrawlersWithContext.
func (mr *MockGlueAPIMockRecorder) ListCrawlersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrawlersWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListCrawlersWithContext), varargs...)
}

// ListCrawls mocks base method.
func (m *MockGlueAPI) ListCrawls(arg0 *glue.ListCrawlsInput) (*glue.ListCrawlsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrawls", arg0)
	ret0, _ := ret[0].(*glue.ListCrawlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrawls indicates an expected call of ListCrawls.
func (mr *MockGlueAPIMockRecorder) ListCrawls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrawls", reflect.TypeOf((*MockGlueAPI)(nil).ListCrawls), arg0)
}

// ListCrawlsRequest mocks base method.
func (m *MockGlueAPI) ListCrawlsRequest(arg0 *glue.ListCrawlsInput) (*request.Request, *glue.ListCrawlsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrawlsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListCrawlsOutput)
	return ret0, ret1
}

// ListCrawlsRequest indicates an expected call of ListCrawlsRequest.
func (mr *MockGlueAPIMockRecorder) ListCrawlsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrawlsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListCrawlsRequest), arg0)
}

// ListCrawlsWithContext mocks base method.
func (m *MockGlueAPI) ListCrawlsWithContext(arg0 aws.Context, arg1 *glue.ListCrawlsInput, arg2 ...request.Option) (*glue.ListCrawlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrawlsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListCrawlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrawlsWithContext indicates an expected call of ListCrawlsWithContext.
func (mr *MockGlueAPIMockRecorder) ListCrawlsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrawlsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListCrawlsWithContext), varargs...)
}

// ListCustomEntityTypes mocks base method.
func (m *MockGlueAPI) ListCustomEntityTypes(arg0 *glue.ListCustomEntityTypesInput) (*glue.ListCustomEntityTypesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomEntityTypes", arg0)
	ret0, _ := ret[0].(*glue.ListCustomEntityTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomEntityTypes indicates an expected call of ListCustomEntityTypes.
func (mr *MockGlueAPIMockRecorder) ListCustomEntityTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomEntityTypes", reflect.TypeOf((*MockGlueAPI)(nil).ListCustomEntityTypes), arg0)
}

// ListCustomEntityTypesPages mocks base method.
func (m *MockGlueAPI) ListCustomEntityTypesPages(arg0 *glue.ListCustomEntityTypesInput, arg1 func(*glue.ListCustomEntityTypesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomEntityTypesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomEntityTypesPages indicates an expected call of ListCustomEntityTypesPages.
func (mr *MockGlueAPIMockRecorder) ListCustomEntityTypesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomEntityTypesPages", reflect.TypeOf((*MockGlueAPI)(nil).ListCustomEntityTypesPages), arg0, arg1)
}

// ListCustomEntityTypesPagesWithContext mocks base method.
func (m *MockGlueAPI) ListCustomEntityTypesPagesWithContext(arg0 aws.Context, arg1 *glue.ListCustomEntityTypesInput, arg2 func(*glue.ListCustomEntityTypesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomEntityTypesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCustomEntityTypesPagesWithContext indicates an expected call of ListCustomEntityTypesPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListCustomEntityTypesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomEntityTypesPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListCustomEntityTypesPagesWithContext), varargs...)
}

// ListCustomEntityTypesRequest mocks base method.
func (m *MockGlueAPI) ListCustomEntityTypesRequest(arg0 *glue.ListCustomEntityTypesInput) (*request.Request, *glue.ListCustomEntityTypesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomEntityTypesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListCustomEntityTypesOutput)
	return ret0, ret1
}

// ListCustomEntityTypesRequest indicates an expected call of ListCustomEntityTypesRequest.
func (mr *MockGlueAPIMockRecorder) ListCustomEntityTypesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomEntityTypesRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListCustomEntityTypesRequest), arg0)
}

// ListCustomEntityTypesWithContext mocks base method.
func (m *MockGlueAPI) ListCustomEntityTypesWithContext(arg0 aws.Context, arg1 *glue.ListCustomEntityTypesInput, arg2 ...request.Option) (*glue.ListCustomEntityTypesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomEntityTypesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListCustomEntityTypesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCustomEntityTypesWithContext indicates an expected call of ListCustomEntityTypesWithContext.
func (mr *MockGlueAPIMockRecorder) ListCustomEntityTypesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomEntityTypesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListCustomEntityTypesWithContext), varargs...)
}

// ListDataQualityResults mocks base method.
func (m *MockGlueAPI) ListDataQualityResults(arg0 *glue.ListDataQualityResultsInput) (*glue.ListDataQualityResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityResults", arg0)
	ret0, _ := ret[0].(*glue.ListDataQualityResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityResults indicates an expected call of ListDataQualityResults.
func (mr *MockGlueAPIMockRecorder) ListDataQualityResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityResults", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityResults), arg0)
}

// ListDataQualityResultsPages mocks base method.
func (m *MockGlueAPI) ListDataQualityResultsPages(arg0 *glue.ListDataQualityResultsInput, arg1 func(*glue.ListDataQualityResultsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityResultsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataQualityResultsPages indicates an expected call of ListDataQualityResultsPages.
func (mr *MockGlueAPIMockRecorder) ListDataQualityResultsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityResultsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityResultsPages), arg0, arg1)
}

// ListDataQualityResultsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListDataQualityResultsPagesWithContext(arg0 aws.Context, arg1 *glue.ListDataQualityResultsInput, arg2 func(*glue.ListDataQualityResultsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityResultsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataQualityResultsPagesWithContext indicates an expected call of ListDataQualityResultsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListDataQualityResultsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityResultsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityResultsPagesWithContext), varargs...)
}

// ListDataQualityResultsRequest mocks base method.
func (m *MockGlueAPI) ListDataQualityResultsRequest(arg0 *glue.ListDataQualityResultsInput) (*request.Request, *glue.ListDataQualityResultsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityResultsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListDataQualityResultsOutput)
	return ret0, ret1
}

// ListDataQualityResultsRequest indicates an expected call of ListDataQualityResultsRequest.
func (mr *MockGlueAPIMockRecorder) ListDataQualityResultsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityResultsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityResultsRequest), arg0)
}

// ListDataQualityResultsWithContext mocks base method.
func (m *MockGlueAPI) ListDataQualityResultsWithContext(arg0 aws.Context, arg1 *glue.ListDataQualityResultsInput, arg2 ...request.Option) (*glue.ListDataQualityResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityResultsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListDataQualityResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityResultsWithContext indicates an expected call of ListDataQualityResultsWithContext.
func (mr *MockGlueAPIMockRecorder) ListDataQualityResultsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityResultsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityResultsWithContext), varargs...)
}

// ListDataQualityRuleRecommendationRuns mocks base method.
func (m *MockGlueAPI) ListDataQualityRuleRecommendationRuns(arg0 *glue.ListDataQualityRuleRecommendationRunsInput) (*glue.ListDataQualityRuleRecommendationRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRuleRecommendationRuns", arg0)
	ret0, _ := ret[0].(*glue.ListDataQualityRuleRecommendationRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityRuleRecommendationRuns indicates an expected call of ListDataQualityRuleRecommendationRuns.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRuleRecommendationRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRuleRecommendationRuns", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRuleRecommendationRuns), arg0)
}

// ListDataQualityRuleRecommendationRunsPages mocks base method.
func (m *MockGlueAPI) ListDataQualityRuleRecommendationRunsPages(arg0 *glue.ListDataQualityRuleRecommendationRunsInput, arg1 func(*glue.ListDataQualityRuleRecommendationRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRuleRecommendationRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataQualityRuleRecommendationRunsPages indicates an expected call of ListDataQualityRuleRecommendationRunsPages.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRuleRecommendationRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRuleRecommendationRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRuleRecommendationRunsPages), arg0, arg1)
}

// ListDataQualityRuleRecommendationRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListDataQualityRuleRecommendationRunsPagesWithContext(arg0 aws.Context, arg1 *glue.ListDataQualityRuleRecommendationRunsInput, arg2 func(*glue.ListDataQualityRuleRecommendationRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityRuleRecommendationRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataQualityRuleRecommendationRunsPagesWithContext indicates an expected call of ListDataQualityRuleRecommendationRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRuleRecommendationRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRuleRecommendationRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRuleRecommendationRunsPagesWithContext), varargs...)
}

// ListDataQualityRuleRecommendationRunsRequest mocks base method.
func (m *MockGlueAPI) ListDataQualityRuleRecommendationRunsRequest(arg0 *glue.ListDataQualityRuleRecommendationRunsInput) (*request.Request, *glue.ListDataQualityRuleRecommendationRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRuleRecommendationRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListDataQualityRuleRecommendationRunsOutput)
	return ret0, ret1
}

// ListDataQualityRuleRecommendationRunsRequest indicates an expected call of ListDataQualityRuleRecommendationRunsRequest.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRuleRecommendationRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRuleRecommendationRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRuleRecommendationRunsRequest), arg0)
}

// ListDataQualityRuleRecommendationRunsWithContext mocks base method.
func (m *MockGlueAPI) ListDataQualityRuleRecommendationRunsWithContext(arg0 aws.Context, arg1 *glue.ListDataQualityRuleRecommendationRunsInput, arg2 ...request.Option) (*glue.ListDataQualityRuleRecommendationRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityRuleRecommendationRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListDataQualityRuleRecommendationRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityRuleRecommendationRunsWithContext indicates an expected call of ListDataQualityRuleRecommendationRunsWithContext.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRuleRecommendationRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRuleRecommendationRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRuleRecommendationRunsWithContext), varargs...)
}

// ListDataQualityRulesetEvaluationRuns mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetEvaluationRuns(arg0 *glue.ListDataQualityRulesetEvaluationRunsInput) (*glue.ListDataQualityRulesetEvaluationRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRulesetEvaluationRuns", arg0)
	ret0, _ := ret[0].(*glue.ListDataQualityRulesetEvaluationRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityRulesetEvaluationRuns indicates an expected call of ListDataQualityRulesetEvaluationRuns.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetEvaluationRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetEvaluationRuns", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetEvaluationRuns), arg0)
}

// ListDataQualityRulesetEvaluationRunsPages mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetEvaluationRunsPages(arg0 *glue.ListDataQualityRulesetEvaluationRunsInput, arg1 func(*glue.ListDataQualityRulesetEvaluationRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRulesetEvaluationRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataQualityRulesetEvaluationRunsPages indicates an expected call of ListDataQualityRulesetEvaluationRunsPages.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetEvaluationRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetEvaluationRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetEvaluationRunsPages), arg0, arg1)
}

// ListDataQualityRulesetEvaluationRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetEvaluationRunsPagesWithContext(arg0 aws.Context, arg1 *glue.ListDataQualityRulesetEvaluationRunsInput, arg2 func(*glue.ListDataQualityRulesetEvaluationRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityRulesetEvaluationRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataQualityRulesetEvaluationRunsPagesWithContext indicates an expected call of ListDataQualityRulesetEvaluationRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetEvaluationRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetEvaluationRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetEvaluationRunsPagesWithContext), varargs...)
}

// ListDataQualityRulesetEvaluationRunsRequest mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetEvaluationRunsRequest(arg0 *glue.ListDataQualityRulesetEvaluationRunsInput) (*request.Request, *glue.ListDataQualityRulesetEvaluationRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRulesetEvaluationRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListDataQualityRulesetEvaluationRunsOutput)
	return ret0, ret1
}

// ListDataQualityRulesetEvaluationRunsRequest indicates an expected call of ListDataQualityRulesetEvaluationRunsRequest.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetEvaluationRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetEvaluationRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetEvaluationRunsRequest), arg0)
}

// ListDataQualityRulesetEvaluationRunsWithContext mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetEvaluationRunsWithContext(arg0 aws.Context, arg1 *glue.ListDataQualityRulesetEvaluationRunsInput, arg2 ...request.Option) (*glue.ListDataQualityRulesetEvaluationRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityRulesetEvaluationRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListDataQualityRulesetEvaluationRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityRulesetEvaluationRunsWithContext indicates an expected call of ListDataQualityRulesetEvaluationRunsWithContext.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetEvaluationRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetEvaluationRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetEvaluationRunsWithContext), varargs...)
}

// ListDataQualityRulesets mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesets(arg0 *glue.ListDataQualityRulesetsInput) (*glue.ListDataQualityRulesetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRulesets", arg0)
	ret0, _ := ret[0].(*glue.ListDataQualityRulesetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityRulesets indicates an expected call of ListDataQualityRulesets.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesets", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesets), arg0)
}

// ListDataQualityRulesetsPages mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetsPages(arg0 *glue.ListDataQualityRulesetsInput, arg1 func(*glue.ListDataQualityRulesetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRulesetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataQualityRulesetsPages indicates an expected call of ListDataQualityRulesetsPages.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetsPages), arg0, arg1)
}

// ListDataQualityRulesetsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetsPagesWithContext(arg0 aws.Context, arg1 *glue.ListDataQualityRulesetsInput, arg2 func(*glue.ListDataQualityRulesetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityRulesetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDataQualityRulesetsPagesWithContext indicates an expected call of ListDataQualityRulesetsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetsPagesWithContext), varargs...)
}

// ListDataQualityRulesetsRequest mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetsRequest(arg0 *glue.ListDataQualityRulesetsInput) (*request.Request, *glue.ListDataQualityRulesetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDataQualityRulesetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListDataQualityRulesetsOutput)
	return ret0, ret1
}

// ListDataQualityRulesetsRequest indicates an expected call of ListDataQualityRulesetsRequest.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetsRequest), arg0)
}

// ListDataQualityRulesetsWithContext mocks base method.
func (m *MockGlueAPI) ListDataQualityRulesetsWithContext(arg0 aws.Context, arg1 *glue.ListDataQualityRulesetsInput, arg2 ...request.Option) (*glue.ListDataQualityRulesetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDataQualityRulesetsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListDataQualityRulesetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDataQualityRulesetsWithContext indicates an expected call of ListDataQualityRulesetsWithContext.
func (mr *MockGlueAPIMockRecorder) ListDataQualityRulesetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDataQualityRulesetsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDataQualityRulesetsWithContext), varargs...)
}

// ListDevEndpoints mocks base method.
func (m *MockGlueAPI) ListDevEndpoints(arg0 *glue.ListDevEndpointsInput) (*glue.ListDevEndpointsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevEndpoints", arg0)
	ret0, _ := ret[0].(*glue.ListDevEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevEndpoints indicates an expected call of ListDevEndpoints.
func (mr *MockGlueAPIMockRecorder) ListDevEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevEndpoints", reflect.TypeOf((*MockGlueAPI)(nil).ListDevEndpoints), arg0)
}

// ListDevEndpointsPages mocks base method.
func (m *MockGlueAPI) ListDevEndpointsPages(arg0 *glue.ListDevEndpointsInput, arg1 func(*glue.ListDevEndpointsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevEndpointsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevEndpointsPages indicates an expected call of ListDevEndpointsPages.
func (mr *MockGlueAPIMockRecorder) ListDevEndpointsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevEndpointsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListDevEndpointsPages), arg0, arg1)
}

// ListDevEndpointsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListDevEndpointsPagesWithContext(arg0 aws.Context, arg1 *glue.ListDevEndpointsInput, arg2 func(*glue.ListDevEndpointsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevEndpointsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListDevEndpointsPagesWithContext indicates an expected call of ListDevEndpointsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListDevEndpointsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevEndpointsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDevEndpointsPagesWithContext), varargs...)
}

// ListDevEndpointsRequest mocks base method.
func (m *MockGlueAPI) ListDevEndpointsRequest(arg0 *glue.ListDevEndpointsInput) (*request.Request, *glue.ListDevEndpointsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevEndpointsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListDevEndpointsOutput)
	return ret0, ret1
}

// ListDevEndpointsRequest indicates an expected call of ListDevEndpointsRequest.
func (mr *MockGlueAPIMockRecorder) ListDevEndpointsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevEndpointsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListDevEndpointsRequest), arg0)
}

// ListDevEndpointsWithContext mocks base method.
func (m *MockGlueAPI) ListDevEndpointsWithContext(arg0 aws.Context, arg1 *glue.ListDevEndpointsInput, arg2 ...request.Option) (*glue.ListDevEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDevEndpointsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListDevEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDevEndpointsWithContext indicates an expected call of ListDevEndpointsWithContext.
func (mr *MockGlueAPIMockRecorder) ListDevEndpointsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevEndpointsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListDevEndpointsWithContext), varargs...)
}

// ListJobs mocks base method.
func (m *MockGlueAPI) ListJobs(arg0 *glue.ListJobsInput) (*glue.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0)
	ret0, _ := ret[0].(*glue.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockGlueAPIMockRecorder) ListJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockGlueAPI)(nil).ListJobs), arg0)
}

// ListJobsPages mocks base method.
func (m *MockGlueAPI) ListJobsPages(arg0 *glue.ListJobsInput, arg1 func(*glue.ListJobsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPages indicates an expected call of ListJobsPages.
func (mr *MockGlueAPIMockRecorder) ListJobsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListJobsPages), arg0, arg1)
}

// ListJobsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListJobsPagesWithContext(arg0 aws.Context, arg1 *glue.ListJobsInput, arg2 func(*glue.ListJobsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListJobsPagesWithContext indicates an expected call of ListJobsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListJobsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListJobsPagesWithContext), varargs...)
}

// ListJobsRequest mocks base method.
func (m *MockGlueAPI) ListJobsRequest(arg0 *glue.ListJobsInput) (*request.Request, *glue.ListJobsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListJobsOutput)
	return ret0, ret1
}

// ListJobsRequest indicates an expected call of ListJobsRequest.
func (mr *MockGlueAPIMockRecorder) ListJobsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListJobsRequest), arg0)
}

// ListJobsWithContext mocks base method.
func (m *MockGlueAPI) ListJobsWithContext(arg0 aws.Context, arg1 *glue.ListJobsInput, arg2 ...request.Option) (*glue.ListJobsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListJobsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsWithContext indicates an expected call of ListJobsWithContext.
func (mr *MockGlueAPIMockRecorder) ListJobsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListJobsWithContext), varargs...)
}

// ListMLTransforms mocks base method.
func (m *MockGlueAPI) ListMLTransforms(arg0 *glue.ListMLTransformsInput) (*glue.ListMLTransformsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLTransforms", arg0)
	ret0, _ := ret[0].(*glue.ListMLTransformsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLTransforms indicates an expected call of ListMLTransforms.
func (mr *MockGlueAPIMockRecorder) ListMLTransforms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLTransforms", reflect.TypeOf((*MockGlueAPI)(nil).ListMLTransforms), arg0)
}

// ListMLTransformsPages mocks base method.
func (m *MockGlueAPI) ListMLTransformsPages(arg0 *glue.ListMLTransformsInput, arg1 func(*glue.ListMLTransformsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLTransformsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMLTransformsPages indicates an expected call of ListMLTransformsPages.
func (mr *MockGlueAPIMockRecorder) ListMLTransformsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLTransformsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListMLTransformsPages), arg0, arg1)
}

// ListMLTransformsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListMLTransformsPagesWithContext(arg0 aws.Context, arg1 *glue.ListMLTransformsInput, arg2 func(*glue.ListMLTransformsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMLTransformsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMLTransformsPagesWithContext indicates an expected call of ListMLTransformsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListMLTransformsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLTransformsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListMLTransformsPagesWithContext), varargs...)
}

// ListMLTransformsRequest mocks base method.
func (m *MockGlueAPI) ListMLTransformsRequest(arg0 *glue.ListMLTransformsInput) (*request.Request, *glue.ListMLTransformsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMLTransformsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListMLTransformsOutput)
	return ret0, ret1
}

// ListMLTransformsRequest indicates an expected call of ListMLTransformsRequest.
func (mr *MockGlueAPIMockRecorder) ListMLTransformsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLTransformsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListMLTransformsRequest), arg0)
}

// ListMLTransformsWithContext mocks base method.
func (m *MockGlueAPI) ListMLTransformsWithContext(arg0 aws.Context, arg1 *glue.ListMLTransformsInput, arg2 ...request.Option) (*glue.ListMLTransformsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMLTransformsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListMLTransformsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMLTransformsWithContext indicates an expected call of ListMLTransformsWithContext.
func (mr *MockGlueAPIMockRecorder) ListMLTransformsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMLTransformsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListMLTransformsWithContext), varargs...)
}

// ListRegistries mocks base method.
func (m *MockGlueAPI) ListRegistries(arg0 *glue.ListRegistriesInput) (*glue.ListRegistriesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistries", arg0)
	ret0, _ := ret[0].(*glue.ListRegistriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistries indicates an expected call of ListRegistries.
func (mr *MockGlueAPIMockRecorder) ListRegistries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistries", reflect.TypeOf((*MockGlueAPI)(nil).ListRegistries), arg0)
}

// ListRegistriesPages mocks base method.
func (m *MockGlueAPI) ListRegistriesPages(arg0 *glue.ListRegistriesInput, arg1 func(*glue.ListRegistriesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistriesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegistriesPages indicates an expected call of ListRegistriesPages.
func (mr *MockGlueAPIMockRecorder) ListRegistriesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistriesPages", reflect.TypeOf((*MockGlueAPI)(nil).ListRegistriesPages), arg0, arg1)
}

// ListRegistriesPagesWithContext mocks base method.
func (m *MockGlueAPI) ListRegistriesPagesWithContext(arg0 aws.Context, arg1 *glue.ListRegistriesInput, arg2 func(*glue.ListRegistriesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegistriesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegistriesPagesWithContext indicates an expected call of ListRegistriesPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListRegistriesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistriesPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListRegistriesPagesWithContext), varargs...)
}

// ListRegistriesRequest mocks base method.
func (m *MockGlueAPI) ListRegistriesRequest(arg0 *glue.ListRegistriesInput) (*request.Request, *glue.ListRegistriesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistriesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListRegistriesOutput)
	return ret0, ret1
}

// ListRegistriesRequest indicates an expected call of ListRegistriesRequest.
func (mr *MockGlueAPIMockRecorder) ListRegistriesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistriesRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListRegistriesRequest), arg0)
}

// ListRegistriesWithContext mocks base method.
func (m *MockGlueAPI) ListRegistriesWithContext(arg0 aws.Context, arg1 *glue.ListRegistriesInput, arg2 ...request.Option) (*glue.ListRegistriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegistriesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListRegistriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistriesWithContext indicates an expected call of ListRegistriesWithContext.
func (mr *MockGlueAPIMockRecorder) ListRegistriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistriesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListRegistriesWithContext), varargs...)
}

// ListSchemaVersions mocks base method.
func (m *MockGlueAPI) ListSchemaVersions(arg0 *glue.ListSchemaVersionsInput) (*glue.ListSchemaVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaVersions", arg0)
	ret0, _ := ret[0].(*glue.ListSchemaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaVersions indicates an expected call of ListSchemaVersions.
func (mr *MockGlueAPIMockRecorder) ListSchemaVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersions", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemaVersions), arg0)
}

// ListSchemaVersionsPages mocks base method.
func (m *MockGlueAPI) ListSchemaVersionsPages(arg0 *glue.ListSchemaVersionsInput, arg1 func(*glue.ListSchemaVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemaVersionsPages indicates an expected call of ListSchemaVersionsPages.
func (mr *MockGlueAPIMockRecorder) ListSchemaVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersionsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemaVersionsPages), arg0, arg1)
}

// ListSchemaVersionsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListSchemaVersionsPagesWithContext(arg0 aws.Context, arg1 *glue.ListSchemaVersionsInput, arg2 func(*glue.ListSchemaVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemaVersionsPagesWithContext indicates an expected call of ListSchemaVersionsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListSchemaVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersionsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemaVersionsPagesWithContext), varargs...)
}

// ListSchemaVersionsRequest mocks base method.
func (m *MockGlueAPI) ListSchemaVersionsRequest(arg0 *glue.ListSchemaVersionsInput) (*request.Request, *glue.ListSchemaVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemaVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListSchemaVersionsOutput)
	return ret0, ret1
}

// ListSchemaVersionsRequest indicates an expected call of ListSchemaVersionsRequest.
func (mr *MockGlueAPIMockRecorder) ListSchemaVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersionsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemaVersionsRequest), arg0)
}

// ListSchemaVersionsWithContext mocks base method.
func (m *MockGlueAPI) ListSchemaVersionsWithContext(arg0 aws.Context, arg1 *glue.ListSchemaVersionsInput, arg2 ...request.Option) (*glue.ListSchemaVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemaVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListSchemaVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemaVersionsWithContext indicates an expected call of ListSchemaVersionsWithContext.
func (mr *MockGlueAPIMockRecorder) ListSchemaVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemaVersionsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemaVersionsWithContext), varargs...)
}

// ListSchemas mocks base method.
func (m *MockGlueAPI) ListSchemas(arg0 *glue.ListSchemasInput) (*glue.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemas", arg0)
	ret0, _ := ret[0].(*glue.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemas indicates an expected call of ListSchemas.
func (mr *MockGlueAPIMockRecorder) ListSchemas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemas", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemas), arg0)
}

// ListSchemasPages mocks base method.
func (m *MockGlueAPI) ListSchemasPages(arg0 *glue.ListSchemasInput, arg1 func(*glue.ListSchemasOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPages indicates an expected call of ListSchemasPages.
func (mr *MockGlueAPIMockRecorder) ListSchemasPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPages", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemasPages), arg0, arg1)
}

// ListSchemasPagesWithContext mocks base method.
func (m *MockGlueAPI) ListSchemasPagesWithContext(arg0 aws.Context, arg1 *glue.ListSchemasInput, arg2 func(*glue.ListSchemasOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSchemasPagesWithContext indicates an expected call of ListSchemasPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListSchemasPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemasPagesWithContext), varargs...)
}

// ListSchemasRequest mocks base method.
func (m *MockGlueAPI) ListSchemasRequest(arg0 *glue.ListSchemasInput) (*request.Request, *glue.ListSchemasOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchemasRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListSchemasOutput)
	return ret0, ret1
}

// ListSchemasRequest indicates an expected call of ListSchemasRequest.
func (mr *MockGlueAPIMockRecorder) ListSchemasRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemasRequest), arg0)
}

// ListSchemasWithContext mocks base method.
func (m *MockGlueAPI) ListSchemasWithContext(arg0 aws.Context, arg1 *glue.ListSchemasInput, arg2 ...request.Option) (*glue.ListSchemasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchemasWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListSchemasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchemasWithContext indicates an expected call of ListSchemasWithContext.
func (mr *MockGlueAPIMockRecorder) ListSchemasWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchemasWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListSchemasWithContext), varargs...)
}

// ListSessions mocks base method.
func (m *MockGlueAPI) ListSessions(arg0 *glue.ListSessionsInput) (*glue.ListSessionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessions", arg0)
	ret0, _ := ret[0].(*glue.ListSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessions indicates an expected call of ListSessions.
func (mr *MockGlueAPIMockRecorder) ListSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessions", reflect.TypeOf((*MockGlueAPI)(nil).ListSessions), arg0)
}

// ListSessionsPages mocks base method.
func (m *MockGlueAPI) ListSessionsPages(arg0 *glue.ListSessionsInput, arg1 func(*glue.ListSessionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSessionsPages indicates an expected call of ListSessionsPages.
func (mr *MockGlueAPIMockRecorder) ListSessionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListSessionsPages), arg0, arg1)
}

// ListSessionsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListSessionsPagesWithContext(arg0 aws.Context, arg1 *glue.ListSessionsInput, arg2 func(*glue.ListSessionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListSessionsPagesWithContext indicates an expected call of ListSessionsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListSessionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListSessionsPagesWithContext), varargs...)
}

// ListSessionsRequest mocks base method.
func (m *MockGlueAPI) ListSessionsRequest(arg0 *glue.ListSessionsInput) (*request.Request, *glue.ListSessionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSessionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListSessionsOutput)
	return ret0, ret1
}

// ListSessionsRequest indicates an expected call of ListSessionsRequest.
func (mr *MockGlueAPIMockRecorder) ListSessionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListSessionsRequest), arg0)
}

// ListSessionsWithContext mocks base method.
func (m *MockGlueAPI) ListSessionsWithContext(arg0 aws.Context, arg1 *glue.ListSessionsInput, arg2 ...request.Option) (*glue.ListSessionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSessionsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListSessionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSessionsWithContext indicates an expected call of ListSessionsWithContext.
func (mr *MockGlueAPIMockRecorder) ListSessionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSessionsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListSessionsWithContext), varargs...)
}

// ListStatements mocks base method.
func (m *MockGlueAPI) ListStatements(arg0 *glue.ListStatementsInput) (*glue.ListStatementsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatements", arg0)
	ret0, _ := ret[0].(*glue.ListStatementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatements indicates an expected call of ListStatements.
func (mr *MockGlueAPIMockRecorder) ListStatements(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatements", reflect.TypeOf((*MockGlueAPI)(nil).ListStatements), arg0)
}

// ListStatementsRequest mocks base method.
func (m *MockGlueAPI) ListStatementsRequest(arg0 *glue.ListStatementsInput) (*request.Request, *glue.ListStatementsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatementsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListStatementsOutput)
	return ret0, ret1
}

// ListStatementsRequest indicates an expected call of ListStatementsRequest.
func (mr *MockGlueAPIMockRecorder) ListStatementsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatementsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListStatementsRequest), arg0)
}

// ListStatementsWithContext mocks base method.
func (m *MockGlueAPI) ListStatementsWithContext(arg0 aws.Context, arg1 *glue.ListStatementsInput, arg2 ...request.Option) (*glue.ListStatementsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStatementsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListStatementsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatementsWithContext indicates an expected call of ListStatementsWithContext.
func (mr *MockGlueAPIMockRecorder) ListStatementsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatementsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListStatementsWithContext), varargs...)
}

// ListTableOptimizerRuns mocks base method.
func (m *MockGlueAPI) ListTableOptimizerRuns(arg0 *glue.ListTableOptimizerRunsInput) (*glue.ListTableOptimizerRunsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableOptimizerRuns", arg0)
	ret0, _ := ret[0].(*glue.ListTableOptimizerRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableOptimizerRuns indicates an expected call of ListTableOptimizerRuns.
func (mr *MockGlueAPIMockRecorder) ListTableOptimizerRuns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableOptimizerRuns", reflect.TypeOf((*MockGlueAPI)(nil).ListTableOptimizerRuns), arg0)
}

// ListTableOptimizerRunsPages mocks base method.
func (m *MockGlueAPI) ListTableOptimizerRunsPages(arg0 *glue.ListTableOptimizerRunsInput, arg1 func(*glue.ListTableOptimizerRunsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableOptimizerRunsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTableOptimizerRunsPages indicates an expected call of ListTableOptimizerRunsPages.
func (mr *MockGlueAPIMockRecorder) ListTableOptimizerRunsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableOptimizerRunsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListTableOptimizerRunsPages), arg0, arg1)
}

// ListTableOptimizerRunsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListTableOptimizerRunsPagesWithContext(arg0 aws.Context, arg1 *glue.ListTableOptimizerRunsInput, arg2 func(*glue.ListTableOptimizerRunsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTableOptimizerRunsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTableOptimizerRunsPagesWithContext indicates an expected call of ListTableOptimizerRunsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListTableOptimizerRunsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableOptimizerRunsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListTableOptimizerRunsPagesWithContext), varargs...)
}

// ListTableOptimizerRunsRequest mocks base method.
func (m *MockGlueAPI) ListTableOptimizerRunsRequest(arg0 *glue.ListTableOptimizerRunsInput) (*request.Request, *glue.ListTableOptimizerRunsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTableOptimizerRunsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListTableOptimizerRunsOutput)
	return ret0, ret1
}

// ListTableOptimizerRunsRequest indicates an expected call of ListTableOptimizerRunsRequest.
func (mr *MockGlueAPIMockRecorder) ListTableOptimizerRunsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableOptimizerRunsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListTableOptimizerRunsRequest), arg0)
}

// ListTableOptimizerRunsWithContext mocks base method.
func (m *MockGlueAPI) ListTableOptimizerRunsWithContext(arg0 aws.Context, arg1 *glue.ListTableOptimizerRunsInput, arg2 ...request.Option) (*glue.ListTableOptimizerRunsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTableOptimizerRunsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListTableOptimizerRunsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTableOptimizerRunsWithContext indicates an expected call of ListTableOptimizerRunsWithContext.
func (mr *MockGlueAPIMockRecorder) ListTableOptimizerRunsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTableOptimizerRunsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListTableOptimizerRunsWithContext), varargs...)
}

// ListTriggers mocks base method.
func (m *MockGlueAPI) ListTriggers(arg0 *glue.ListTriggersInput) (*glue.ListTriggersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTriggers", arg0)
	ret0, _ := ret[0].(*glue.ListTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTriggers indicates an expected call of ListTriggers.
func (mr *MockGlueAPIMockRecorder) ListTriggers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTriggers", reflect.TypeOf((*MockGlueAPI)(nil).ListTriggers), arg0)
}

// ListTriggersPages mocks base method.
func (m *MockGlueAPI) ListTriggersPages(arg0 *glue.ListTriggersInput, arg1 func(*glue.ListTriggersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTriggersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTriggersPages indicates an expected call of ListTriggersPages.
func (mr *MockGlueAPIMockRecorder) ListTriggersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTriggersPages", reflect.TypeOf((*MockGlueAPI)(nil).ListTriggersPages), arg0, arg1)
}

// ListTriggersPagesWithContext mocks base method.
func (m *MockGlueAPI) ListTriggersPagesWithContext(arg0 aws.Context, arg1 *glue.ListTriggersInput, arg2 func(*glue.ListTriggersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTriggersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTriggersPagesWithContext indicates an expected call of ListTriggersPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListTriggersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTriggersPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListTriggersPagesWithContext), varargs...)
}

// ListTriggersRequest mocks base method.
func (m *MockGlueAPI) ListTriggersRequest(arg0 *glue.ListTriggersInput) (*request.Request, *glue.ListTriggersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTriggersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListTriggersOutput)
	return ret0, ret1
}

// ListTriggersRequest indicates an expected call of ListTriggersRequest.
func (mr *MockGlueAPIMockRecorder) ListTriggersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTriggersRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListTriggersRequest), arg0)
}

// ListTriggersWithContext mocks base method.
func (m *MockGlueAPI) ListTriggersWithContext(arg0 aws.Context, arg1 *glue.ListTriggersInput, arg2 ...request.Option) (*glue.ListTriggersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTriggersWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListTriggersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTriggersWithContext indicates an expected call of ListTriggersWithContext.
func (mr *MockGlueAPIMockRecorder) ListTriggersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTriggersWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListTriggersWithContext), varargs...)
}

// ListUsageProfiles mocks base method.
func (m *MockGlueAPI) ListUsageProfiles(arg0 *glue.ListUsageProfilesInput) (*glue.ListUsageProfilesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageProfiles", arg0)
	ret0, _ := ret[0].(*glue.ListUsageProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageProfiles indicates an expected call of ListUsageProfiles.
func (mr *MockGlueAPIMockRecorder) ListUsageProfiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageProfiles", reflect.TypeOf((*MockGlueAPI)(nil).ListUsageProfiles), arg0)
}

// ListUsageProfilesPages mocks base method.
func (m *MockGlueAPI) ListUsageProfilesPages(arg0 *glue.ListUsageProfilesInput, arg1 func(*glue.ListUsageProfilesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageProfilesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsageProfilesPages indicates an expected call of ListUsageProfilesPages.
func (mr *MockGlueAPIMockRecorder) ListUsageProfilesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageProfilesPages", reflect.TypeOf((*MockGlueAPI)(nil).ListUsageProfilesPages), arg0, arg1)
}

// ListUsageProfilesPagesWithContext mocks base method.
func (m *MockGlueAPI) ListUsageProfilesPagesWithContext(arg0 aws.Context, arg1 *glue.ListUsageProfilesInput, arg2 func(*glue.ListUsageProfilesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageProfilesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsageProfilesPagesWithContext indicates an expected call of ListUsageProfilesPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListUsageProfilesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageProfilesPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListUsageProfilesPagesWithContext), varargs...)
}

// ListUsageProfilesRequest mocks base method.
func (m *MockGlueAPI) ListUsageProfilesRequest(arg0 *glue.ListUsageProfilesInput) (*request.Request, *glue.ListUsageProfilesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageProfilesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListUsageProfilesOutput)
	return ret0, ret1
}

// ListUsageProfilesRequest indicates an expected call of ListUsageProfilesRequest.
func (mr *MockGlueAPIMockRecorder) ListUsageProfilesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageProfilesRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListUsageProfilesRequest), arg0)
}

// ListUsageProfilesWithContext mocks base method.
func (m *MockGlueAPI) ListUsageProfilesWithContext(arg0 aws.Context, arg1 *glue.ListUsageProfilesInput, arg2 ...request.Option) (*glue.ListUsageProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsageProfilesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListUsageProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageProfilesWithContext indicates an expected call of ListUsageProfilesWithContext.
func (mr *MockGlueAPIMockRecorder) ListUsageProfilesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageProfilesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListUsageProfilesWithContext), varargs...)
}

// ListWorkflows mocks base method.
func (m *MockGlueAPI) ListWorkflows(arg0 *glue.ListWorkflowsInput) (*glue.ListWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflows", arg0)
	ret0, _ := ret[0].(*glue.ListWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflows indicates an expected call of ListWorkflows.
func (mr *MockGlueAPIMockRecorder) ListWorkflows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflows", reflect.TypeOf((*MockGlueAPI)(nil).ListWorkflows), arg0)
}

// ListWorkflowsPages mocks base method.
func (m *MockGlueAPI) ListWorkflowsPages(arg0 *glue.ListWorkflowsInput, arg1 func(*glue.ListWorkflowsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowsPages indicates an expected call of ListWorkflowsPages.
func (mr *MockGlueAPIMockRecorder) ListWorkflowsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsPages", reflect.TypeOf((*MockGlueAPI)(nil).ListWorkflowsPages), arg0, arg1)
}

// ListWorkflowsPagesWithContext mocks base method.
func (m *MockGlueAPI) ListWorkflowsPagesWithContext(arg0 aws.Context, arg1 *glue.ListWorkflowsInput, arg2 func(*glue.ListWorkflowsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWorkflowsPagesWithContext indicates an expected call of ListWorkflowsPagesWithContext.
func (mr *MockGlueAPIMockRecorder) ListWorkflowsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListWorkflowsPagesWithContext), varargs...)
}

// ListWorkflowsRequest mocks base method.
func (m *MockGlueAPI) ListWorkflowsRequest(arg0 *glue.ListWorkflowsInput) (*request.Request, *glue.ListWorkflowsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ListWorkflowsOutput)
	return ret0, ret1
}

// ListWorkflowsRequest indicates an expected call of ListWorkflowsRequest.
func (mr *MockGlueAPIMockRecorder) ListWorkflowsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsRequest", reflect.TypeOf((*MockGlueAPI)(nil).ListWorkflowsRequest), arg0)
}

// ListWorkflowsWithContext mocks base method.
func (m *MockGlueAPI) ListWorkflowsWithContext(arg0 aws.Context, arg1 *glue.ListWorkflowsInput, arg2 ...request.Option) (*glue.ListWorkflowsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWorkflowsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ListWorkflowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowsWithContext indicates an expected call of ListWorkflowsWithContext.
func (mr *MockGlueAPIMockRecorder) ListWorkflowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ListWorkflowsWithContext), varargs...)
}

// PutDataCatalogEncryptionSettings mocks base method.
func (m *MockGlueAPI) PutDataCatalogEncryptionSettings(arg0 *glue.PutDataCatalogEncryptionSettingsInput) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDataCatalogEncryptionSettings", arg0)
	ret0, _ := ret[0].(*glue.PutDataCatalogEncryptionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDataCatalogEncryptionSettings indicates an expected call of PutDataCatalogEncryptionSettings.
func (mr *MockGlueAPIMockRecorder) PutDataCatalogEncryptionSettings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataCatalogEncryptionSettings", reflect.TypeOf((*MockGlueAPI)(nil).PutDataCatalogEncryptionSettings), arg0)
}

// PutDataCatalogEncryptionSettingsRequest mocks base method.
func (m *MockGlueAPI) PutDataCatalogEncryptionSettingsRequest(arg0 *glue.PutDataCatalogEncryptionSettingsInput) (*request.Request, *glue.PutDataCatalogEncryptionSettingsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDataCatalogEncryptionSettingsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.PutDataCatalogEncryptionSettingsOutput)
	return ret0, ret1
}

// PutDataCatalogEncryptionSettingsRequest indicates an expected call of PutDataCatalogEncryptionSettingsRequest.
func (mr *MockGlueAPIMockRecorder) PutDataCatalogEncryptionSettingsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataCatalogEncryptionSettingsRequest", reflect.TypeOf((*MockGlueAPI)(nil).PutDataCatalogEncryptionSettingsRequest), arg0)
}

// PutDataCatalogEncryptionSettingsWithContext mocks base method.
func (m *MockGlueAPI) PutDataCatalogEncryptionSettingsWithContext(arg0 aws.Context, arg1 *glue.PutDataCatalogEncryptionSettingsInput, arg2 ...request.Option) (*glue.PutDataCatalogEncryptionSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDataCatalogEncryptionSettingsWithContext", varargs...)
	ret0, _ := ret[0].(*glue.PutDataCatalogEncryptionSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDataCatalogEncryptionSettingsWithContext indicates an expected call of PutDataCatalogEncryptionSettingsWithContext.
func (mr *MockGlueAPIMockRecorder) PutDataCatalogEncryptionSettingsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDataCatalogEncryptionSettingsWithContext", reflect.TypeOf((*MockGlueAPI)(nil).PutDataCatalogEncryptionSettingsWithContext), varargs...)
}

// PutResourcePolicy mocks base method.
func (m *MockGlueAPI) PutResourcePolicy(arg0 *glue.PutResourcePolicyInput) (*glue.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicy", arg0)
	ret0, _ := ret[0].(*glue.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicy indicates an expected call of PutResourcePolicy.
func (mr *MockGlueAPIMockRecorder) PutResourcePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicy", reflect.TypeOf((*MockGlueAPI)(nil).PutResourcePolicy), arg0)
}

// PutResourcePolicyRequest mocks base method.
func (m *MockGlueAPI) PutResourcePolicyRequest(arg0 *glue.PutResourcePolicyInput) (*request.Request, *glue.PutResourcePolicyOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutResourcePolicyRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.PutResourcePolicyOutput)
	return ret0, ret1
}

// PutResourcePolicyRequest indicates an expected call of PutResourcePolicyRequest.
func (mr *MockGlueAPIMockRecorder) PutResourcePolicyRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyRequest", reflect.TypeOf((*MockGlueAPI)(nil).PutResourcePolicyRequest), arg0)
}

// PutResourcePolicyWithContext mocks base method.
func (m *MockGlueAPI) PutResourcePolicyWithContext(arg0 aws.Context, arg1 *glue.PutResourcePolicyInput, arg2 ...request.Option) (*glue.PutResourcePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutResourcePolicyWithContext", varargs...)
	ret0, _ := ret[0].(*glue.PutResourcePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutResourcePolicyWithContext indicates an expected call of PutResourcePolicyWithContext.
func (mr *MockGlueAPIMockRecorder) PutResourcePolicyWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutResourcePolicyWithContext", reflect.TypeOf((*MockGlueAPI)(nil).PutResourcePolicyWithContext), varargs...)
}

// PutSchemaVersionMetadata mocks base method.
func (m *MockGlueAPI) PutSchemaVersionMetadata(arg0 *glue.PutSchemaVersionMetadataInput) (*glue.PutSchemaVersionMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSchemaVersionMetadata", arg0)
	ret0, _ := ret[0].(*glue.PutSchemaVersionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSchemaVersionMetadata indicates an expected call of PutSchemaVersionMetadata.
func (mr *MockGlueAPIMockRecorder) PutSchemaVersionMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaVersionMetadata", reflect.TypeOf((*MockGlueAPI)(nil).PutSchemaVersionMetadata), arg0)
}

// PutSchemaVersionMetadataRequest mocks base method.
func (m *MockGlueAPI) PutSchemaVersionMetadataRequest(arg0 *glue.PutSchemaVersionMetadataInput) (*request.Request, *glue.PutSchemaVersionMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSchemaVersionMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.PutSchemaVersionMetadataOutput)
	return ret0, ret1
}

// PutSchemaVersionMetadataRequest indicates an expected call of PutSchemaVersionMetadataRequest.
func (mr *MockGlueAPIMockRecorder) PutSchemaVersionMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaVersionMetadataRequest", reflect.TypeOf((*MockGlueAPI)(nil).PutSchemaVersionMetadataRequest), arg0)
}

// PutSchemaVersionMetadataWithContext mocks base method.
func (m *MockGlueAPI) PutSchemaVersionMetadataWithContext(arg0 aws.Context, arg1 *glue.PutSchemaVersionMetadataInput, arg2 ...request.Option) (*glue.PutSchemaVersionMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutSchemaVersionMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*glue.PutSchemaVersionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutSchemaVersionMetadataWithContext indicates an expected call of PutSchemaVersionMetadataWithContext.
func (mr *MockGlueAPIMockRecorder) PutSchemaVersionMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSchemaVersionMetadataWithContext", reflect.TypeOf((*MockGlueAPI)(nil).PutSchemaVersionMetadataWithContext), varargs...)
}

// PutWorkflowRunProperties mocks base method.
func (m *MockGlueAPI) PutWorkflowRunProperties(arg0 *glue.PutWorkflowRunPropertiesInput) (*glue.PutWorkflowRunPropertiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutWorkflowRunProperties", arg0)
	ret0, _ := ret[0].(*glue.PutWorkflowRunPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutWorkflowRunProperties indicates an expected call of PutWorkflowRunProperties.
func (mr *MockGlueAPIMockRecorder) PutWorkflowRunProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWorkflowRunProperties", reflect.TypeOf((*MockGlueAPI)(nil).PutWorkflowRunProperties), arg0)
}

// PutWorkflowRunPropertiesRequest mocks base method.
func (m *MockGlueAPI) PutWorkflowRunPropertiesRequest(arg0 *glue.PutWorkflowRunPropertiesInput) (*request.Request, *glue.PutWorkflowRunPropertiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutWorkflowRunPropertiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.PutWorkflowRunPropertiesOutput)
	return ret0, ret1
}

// PutWorkflowRunPropertiesRequest indicates an expected call of PutWorkflowRunPropertiesRequest.
func (mr *MockGlueAPIMockRecorder) PutWorkflowRunPropertiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWorkflowRunPropertiesRequest", reflect.TypeOf((*MockGlueAPI)(nil).PutWorkflowRunPropertiesRequest), arg0)
}

// PutWorkflowRunPropertiesWithContext mocks base method.
func (m *MockGlueAPI) PutWorkflowRunPropertiesWithContext(arg0 aws.Context, arg1 *glue.PutWorkflowRunPropertiesInput, arg2 ...request.Option) (*glue.PutWorkflowRunPropertiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutWorkflowRunPropertiesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.PutWorkflowRunPropertiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutWorkflowRunPropertiesWithContext indicates an expected call of PutWorkflowRunPropertiesWithContext.
func (mr *MockGlueAPIMockRecorder) PutWorkflowRunPropertiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWorkflowRunPropertiesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).PutWorkflowRunPropertiesWithContext), varargs...)
}

// QuerySchemaVersionMetadata mocks base method.
func (m *MockGlueAPI) QuerySchemaVersionMetadata(arg0 *glue.QuerySchemaVersionMetadataInput) (*glue.QuerySchemaVersionMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySchemaVersionMetadata", arg0)
	ret0, _ := ret[0].(*glue.QuerySchemaVersionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySchemaVersionMetadata indicates an expected call of QuerySchemaVersionMetadata.
func (mr *MockGlueAPIMockRecorder) QuerySchemaVersionMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySchemaVersionMetadata", reflect.TypeOf((*MockGlueAPI)(nil).QuerySchemaVersionMetadata), arg0)
}

// QuerySchemaVersionMetadataRequest mocks base method.
func (m *MockGlueAPI) QuerySchemaVersionMetadataRequest(arg0 *glue.QuerySchemaVersionMetadataInput) (*request.Request, *glue.QuerySchemaVersionMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySchemaVersionMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.QuerySchemaVersionMetadataOutput)
	return ret0, ret1
}

// QuerySchemaVersionMetadataRequest indicates an expected call of QuerySchemaVersionMetadataRequest.
func (mr *MockGlueAPIMockRecorder) QuerySchemaVersionMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySchemaVersionMetadataRequest", reflect.TypeOf((*MockGlueAPI)(nil).QuerySchemaVersionMetadataRequest), arg0)
}

// QuerySchemaVersionMetadataWithContext mocks base method.
func (m *MockGlueAPI) QuerySchemaVersionMetadataWithContext(arg0 aws.Context, arg1 *glue.QuerySchemaVersionMetadataInput, arg2 ...request.Option) (*glue.QuerySchemaVersionMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QuerySchemaVersionMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*glue.QuerySchemaVersionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySchemaVersionMetadataWithContext indicates an expected call of QuerySchemaVersionMetadataWithContext.
func (mr *MockGlueAPIMockRecorder) QuerySchemaVersionMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySchemaVersionMetadataWithContext", reflect.TypeOf((*MockGlueAPI)(nil).QuerySchemaVersionMetadataWithContext), varargs...)
}

// RegisterSchemaVersion mocks base method.
func (m *MockGlueAPI) RegisterSchemaVersion(arg0 *glue.RegisterSchemaVersionInput) (*glue.RegisterSchemaVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSchemaVersion", arg0)
	ret0, _ := ret[0].(*glue.RegisterSchemaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSchemaVersion indicates an expected call of RegisterSchemaVersion.
func (mr *MockGlueAPIMockRecorder) RegisterSchemaVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSchemaVersion", reflect.TypeOf((*MockGlueAPI)(nil).RegisterSchemaVersion), arg0)
}

// RegisterSchemaVersionRequest mocks base method.
func (m *MockGlueAPI) RegisterSchemaVersionRequest(arg0 *glue.RegisterSchemaVersionInput) (*request.Request, *glue.RegisterSchemaVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSchemaVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.RegisterSchemaVersionOutput)
	return ret0, ret1
}

// RegisterSchemaVersionRequest indicates an expected call of RegisterSchemaVersionRequest.
func (mr *MockGlueAPIMockRecorder) RegisterSchemaVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSchemaVersionRequest", reflect.TypeOf((*MockGlueAPI)(nil).RegisterSchemaVersionRequest), arg0)
}

// RegisterSchemaVersionWithContext mocks base method.
func (m *MockGlueAPI) RegisterSchemaVersionWithContext(arg0 aws.Context, arg1 *glue.RegisterSchemaVersionInput, arg2 ...request.Option) (*glue.RegisterSchemaVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterSchemaVersionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.RegisterSchemaVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSchemaVersionWithContext indicates an expected call of RegisterSchemaVersionWithContext.
func (mr *MockGlueAPIMockRecorder) RegisterSchemaVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSchemaVersionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).RegisterSchemaVersionWithContext), varargs...)
}

// RemoveSchemaVersionMetadata mocks base method.
func (m *MockGlueAPI) RemoveSchemaVersionMetadata(arg0 *glue.RemoveSchemaVersionMetadataInput) (*glue.RemoveSchemaVersionMetadataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSchemaVersionMetadata", arg0)
	ret0, _ := ret[0].(*glue.RemoveSchemaVersionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSchemaVersionMetadata indicates an expected call of RemoveSchemaVersionMetadata.
func (mr *MockGlueAPIMockRecorder) RemoveSchemaVersionMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSchemaVersionMetadata", reflect.TypeOf((*MockGlueAPI)(nil).RemoveSchemaVersionMetadata), arg0)
}

// RemoveSchemaVersionMetadataRequest mocks base method.
func (m *MockGlueAPI) RemoveSchemaVersionMetadataRequest(arg0 *glue.RemoveSchemaVersionMetadataInput) (*request.Request, *glue.RemoveSchemaVersionMetadataOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSchemaVersionMetadataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.RemoveSchemaVersionMetadataOutput)
	return ret0, ret1
}

// RemoveSchemaVersionMetadataRequest indicates an expected call of RemoveSchemaVersionMetadataRequest.
func (mr *MockGlueAPIMockRecorder) RemoveSchemaVersionMetadataRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSchemaVersionMetadataRequest", reflect.TypeOf((*MockGlueAPI)(nil).RemoveSchemaVersionMetadataRequest), arg0)
}

// RemoveSchemaVersionMetadataWithContext mocks base method.
func (m *MockGlueAPI) RemoveSchemaVersionMetadataWithContext(arg0 aws.Context, arg1 *glue.RemoveSchemaVersionMetadataInput, arg2 ...request.Option) (*glue.RemoveSchemaVersionMetadataOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSchemaVersionMetadataWithContext", varargs...)
	ret0, _ := ret[0].(*glue.RemoveSchemaVersionMetadataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSchemaVersionMetadataWithContext indicates an expected call of RemoveSchemaVersionMetadataWithContext.
func (mr *MockGlueAPIMockRecorder) RemoveSchemaVersionMetadataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSchemaVersionMetadataWithContext", reflect.TypeOf((*MockGlueAPI)(nil).RemoveSchemaVersionMetadataWithContext), varargs...)
}

// ResetJobBookmark mocks base method.
func (m *MockGlueAPI) ResetJobBookmark(arg0 *glue.ResetJobBookmarkInput) (*glue.ResetJobBookmarkOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetJobBookmark", arg0)
	ret0, _ := ret[0].(*glue.ResetJobBookmarkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetJobBookmark indicates an expected call of ResetJobBookmark.
func (mr *MockGlueAPIMockRecorder) ResetJobBookmark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetJobBookmark", reflect.TypeOf((*MockGlueAPI)(nil).ResetJobBookmark), arg0)
}

// ResetJobBookmarkRequest mocks base method.
func (m *MockGlueAPI) ResetJobBookmarkRequest(arg0 *glue.ResetJobBookmarkInput) (*request.Request, *glue.ResetJobBookmarkOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetJobBookmarkRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ResetJobBookmarkOutput)
	return ret0, ret1
}

// ResetJobBookmarkRequest indicates an expected call of ResetJobBookmarkRequest.
func (mr *MockGlueAPIMockRecorder) ResetJobBookmarkRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetJobBookmarkRequest", reflect.TypeOf((*MockGlueAPI)(nil).ResetJobBookmarkRequest), arg0)
}

// ResetJobBookmarkWithContext mocks base method.
func (m *MockGlueAPI) ResetJobBookmarkWithContext(arg0 aws.Context, arg1 *glue.ResetJobBookmarkInput, arg2 ...request.Option) (*glue.ResetJobBookmarkOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetJobBookmarkWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ResetJobBookmarkOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetJobBookmarkWithContext indicates an expected call of ResetJobBookmarkWithContext.
func (mr *MockGlueAPIMockRecorder) ResetJobBookmarkWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetJobBookmarkWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ResetJobBookmarkWithContext), varargs...)
}

// ResumeWorkflowRun mocks base method.
func (m *MockGlueAPI) ResumeWorkflowRun(arg0 *glue.ResumeWorkflowRunInput) (*glue.ResumeWorkflowRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeWorkflowRun", arg0)
	ret0, _ := ret[0].(*glue.ResumeWorkflowRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeWorkflowRun indicates an expected call of ResumeWorkflowRun.
func (mr *MockGlueAPIMockRecorder) ResumeWorkflowRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeWorkflowRun", reflect.TypeOf((*MockGlueAPI)(nil).ResumeWorkflowRun), arg0)
}

// ResumeWorkflowRunRequest mocks base method.
func (m *MockGlueAPI) ResumeWorkflowRunRequest(arg0 *glue.ResumeWorkflowRunInput) (*request.Request, *glue.ResumeWorkflowRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeWorkflowRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.ResumeWorkflowRunOutput)
	return ret0, ret1
}

// ResumeWorkflowRunRequest indicates an expected call of ResumeWorkflowRunRequest.
func (mr *MockGlueAPIMockRecorder) ResumeWorkflowRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeWorkflowRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).ResumeWorkflowRunRequest), arg0)
}

// ResumeWorkflowRunWithContext mocks base method.
func (m *MockGlueAPI) ResumeWorkflowRunWithContext(arg0 aws.Context, arg1 *glue.ResumeWorkflowRunInput, arg2 ...request.Option) (*glue.ResumeWorkflowRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeWorkflowRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.ResumeWorkflowRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeWorkflowRunWithContext indicates an expected call of ResumeWorkflowRunWithContext.
func (mr *MockGlueAPIMockRecorder) ResumeWorkflowRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeWorkflowRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).ResumeWorkflowRunWithContext), varargs...)
}

// RunStatement mocks base method.
func (m *MockGlueAPI) RunStatement(arg0 *glue.RunStatementInput) (*glue.RunStatementOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunStatement", arg0)
	ret0, _ := ret[0].(*glue.RunStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunStatement indicates an expected call of RunStatement.
func (mr *MockGlueAPIMockRecorder) RunStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunStatement", reflect.TypeOf((*MockGlueAPI)(nil).RunStatement), arg0)
}

// RunStatementRequest mocks base method.
func (m *MockGlueAPI) RunStatementRequest(arg0 *glue.RunStatementInput) (*request.Request, *glue.RunStatementOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunStatementRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.RunStatementOutput)
	return ret0, ret1
}

// RunStatementRequest indicates an expected call of RunStatementRequest.
func (mr *MockGlueAPIMockRecorder) RunStatementRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunStatementRequest", reflect.TypeOf((*MockGlueAPI)(nil).RunStatementRequest), arg0)
}

// RunStatementWithContext mocks base method.
func (m *MockGlueAPI) RunStatementWithContext(arg0 aws.Context, arg1 *glue.RunStatementInput, arg2 ...request.Option) (*glue.RunStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunStatementWithContext", varargs...)
	ret0, _ := ret[0].(*glue.RunStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunStatementWithContext indicates an expected call of RunStatementWithContext.
func (mr *MockGlueAPIMockRecorder) RunStatementWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunStatementWithContext", reflect.TypeOf((*MockGlueAPI)(nil).RunStatementWithContext), varargs...)
}

// SearchTables mocks base method.
func (m *MockGlueAPI) SearchTables(arg0 *glue.SearchTablesInput) (*glue.SearchTablesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTables", arg0)
	ret0, _ := ret[0].(*glue.SearchTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTables indicates an expected call of SearchTables.
func (mr *MockGlueAPIMockRecorder) SearchTables(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTables", reflect.TypeOf((*MockGlueAPI)(nil).SearchTables), arg0)
}

// SearchTablesPages mocks base method.
func (m *MockGlueAPI) SearchTablesPages(arg0 *glue.SearchTablesInput, arg1 func(*glue.SearchTablesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTablesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTablesPages indicates an expected call of SearchTablesPages.
func (mr *MockGlueAPIMockRecorder) SearchTablesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesPages", reflect.TypeOf((*MockGlueAPI)(nil).SearchTablesPages), arg0, arg1)
}

// SearchTablesPagesWithContext mocks base method.
func (m *MockGlueAPI) SearchTablesPagesWithContext(arg0 aws.Context, arg1 *glue.SearchTablesInput, arg2 func(*glue.SearchTablesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTablesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchTablesPagesWithContext indicates an expected call of SearchTablesPagesWithContext.
func (mr *MockGlueAPIMockRecorder) SearchTablesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesPagesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).SearchTablesPagesWithContext), varargs...)
}

// SearchTablesRequest mocks base method.
func (m *MockGlueAPI) SearchTablesRequest(arg0 *glue.SearchTablesInput) (*request.Request, *glue.SearchTablesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTablesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.SearchTablesOutput)
	return ret0, ret1
}

// SearchTablesRequest indicates an expected call of SearchTablesRequest.
func (mr *MockGlueAPIMockRecorder) SearchTablesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesRequest", reflect.TypeOf((*MockGlueAPI)(nil).SearchTablesRequest), arg0)
}

// SearchTablesWithContext mocks base method.
func (m *MockGlueAPI) SearchTablesWithContext(arg0 aws.Context, arg1 *glue.SearchTablesInput, arg2 ...request.Option) (*glue.SearchTablesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTablesWithContext", varargs...)
	ret0, _ := ret[0].(*glue.SearchTablesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTablesWithContext indicates an expected call of SearchTablesWithContext.
func (mr *MockGlueAPIMockRecorder) SearchTablesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTablesWithContext", reflect.TypeOf((*MockGlueAPI)(nil).SearchTablesWithContext), varargs...)
}

// StartBlueprintRun mocks base method.
func (m *MockGlueAPI) StartBlueprintRun(arg0 *glue.StartBlueprintRunInput) (*glue.StartBlueprintRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBlueprintRun", arg0)
	ret0, _ := ret[0].(*glue.StartBlueprintRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBlueprintRun indicates an expected call of StartBlueprintRun.
func (mr *MockGlueAPIMockRecorder) StartBlueprintRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBlueprintRun", reflect.TypeOf((*MockGlueAPI)(nil).StartBlueprintRun), arg0)
}

// StartBlueprintRunRequest mocks base method.
func (m *MockGlueAPI) StartBlueprintRunRequest(arg0 *glue.StartBlueprintRunInput) (*request.Request, *glue.StartBlueprintRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBlueprintRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartBlueprintRunOutput)
	return ret0, ret1
}

// StartBlueprintRunRequest indicates an expected call of StartBlueprintRunRequest.
func (mr *MockGlueAPIMockRecorder) StartBlueprintRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBlueprintRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartBlueprintRunRequest), arg0)
}

// StartBlueprintRunWithContext mocks base method.
func (m *MockGlueAPI) StartBlueprintRunWithContext(arg0 aws.Context, arg1 *glue.StartBlueprintRunInput, arg2 ...request.Option) (*glue.StartBlueprintRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBlueprintRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartBlueprintRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBlueprintRunWithContext indicates an expected call of StartBlueprintRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartBlueprintRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBlueprintRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartBlueprintRunWithContext), varargs...)
}

// StartColumnStatisticsTaskRun mocks base method.
func (m *MockGlueAPI) StartColumnStatisticsTaskRun(arg0 *glue.StartColumnStatisticsTaskRunInput) (*glue.StartColumnStatisticsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartColumnStatisticsTaskRun", arg0)
	ret0, _ := ret[0].(*glue.StartColumnStatisticsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartColumnStatisticsTaskRun indicates an expected call of StartColumnStatisticsTaskRun.
func (mr *MockGlueAPIMockRecorder) StartColumnStatisticsTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartColumnStatisticsTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).StartColumnStatisticsTaskRun), arg0)
}

// StartColumnStatisticsTaskRunRequest mocks base method.
func (m *MockGlueAPI) StartColumnStatisticsTaskRunRequest(arg0 *glue.StartColumnStatisticsTaskRunInput) (*request.Request, *glue.StartColumnStatisticsTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartColumnStatisticsTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartColumnStatisticsTaskRunOutput)
	return ret0, ret1
}

// StartColumnStatisticsTaskRunRequest indicates an expected call of StartColumnStatisticsTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) StartColumnStatisticsTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartColumnStatisticsTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartColumnStatisticsTaskRunRequest), arg0)
}

// StartColumnStatisticsTaskRunWithContext mocks base method.
func (m *MockGlueAPI) StartColumnStatisticsTaskRunWithContext(arg0 aws.Context, arg1 *glue.StartColumnStatisticsTaskRunInput, arg2 ...request.Option) (*glue.StartColumnStatisticsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartColumnStatisticsTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartColumnStatisticsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartColumnStatisticsTaskRunWithContext indicates an expected call of StartColumnStatisticsTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartColumnStatisticsTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartColumnStatisticsTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartColumnStatisticsTaskRunWithContext), varargs...)
}

// StartCrawler mocks base method.
func (m *MockGlueAPI) StartCrawler(arg0 *glue.StartCrawlerInput) (*glue.StartCrawlerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCrawler", arg0)
	ret0, _ := ret[0].(*glue.StartCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCrawler indicates an expected call of StartCrawler.
func (mr *MockGlueAPIMockRecorder) StartCrawler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCrawler", reflect.TypeOf((*MockGlueAPI)(nil).StartCrawler), arg0)
}

// StartCrawlerRequest mocks base method.
func (m *MockGlueAPI) StartCrawlerRequest(arg0 *glue.StartCrawlerInput) (*request.Request, *glue.StartCrawlerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCrawlerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartCrawlerOutput)
	return ret0, ret1
}

// StartCrawlerRequest indicates an expected call of StartCrawlerRequest.
func (mr *MockGlueAPIMockRecorder) StartCrawlerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCrawlerRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartCrawlerRequest), arg0)
}

// StartCrawlerSchedule mocks base method.
func (m *MockGlueAPI) StartCrawlerSchedule(arg0 *glue.StartCrawlerScheduleInput) (*glue.StartCrawlerScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCrawlerSchedule", arg0)
	ret0, _ := ret[0].(*glue.StartCrawlerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCrawlerSchedule indicates an expected call of StartCrawlerSchedule.
func (mr *MockGlueAPIMockRecorder) StartCrawlerSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCrawlerSchedule", reflect.TypeOf((*MockGlueAPI)(nil).StartCrawlerSchedule), arg0)
}

// StartCrawlerScheduleRequest mocks base method.
func (m *MockGlueAPI) StartCrawlerScheduleRequest(arg0 *glue.StartCrawlerScheduleInput) (*request.Request, *glue.StartCrawlerScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCrawlerScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartCrawlerScheduleOutput)
	return ret0, ret1
}

// StartCrawlerScheduleRequest indicates an expected call of StartCrawlerScheduleRequest.
func (mr *MockGlueAPIMockRecorder) StartCrawlerScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCrawlerScheduleRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartCrawlerScheduleRequest), arg0)
}

// StartCrawlerScheduleWithContext mocks base method.
func (m *MockGlueAPI) StartCrawlerScheduleWithContext(arg0 aws.Context, arg1 *glue.StartCrawlerScheduleInput, arg2 ...request.Option) (*glue.StartCrawlerScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCrawlerScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartCrawlerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCrawlerScheduleWithContext indicates an expected call of StartCrawlerScheduleWithContext.
func (mr *MockGlueAPIMockRecorder) StartCrawlerScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCrawlerScheduleWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartCrawlerScheduleWithContext), varargs...)
}

// StartCrawlerWithContext mocks base method.
func (m *MockGlueAPI) StartCrawlerWithContext(arg0 aws.Context, arg1 *glue.StartCrawlerInput, arg2 ...request.Option) (*glue.StartCrawlerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartCrawlerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCrawlerWithContext indicates an expected call of StartCrawlerWithContext.
func (mr *MockGlueAPIMockRecorder) StartCrawlerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCrawlerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartCrawlerWithContext), varargs...)
}

// StartDataQualityRuleRecommendationRun mocks base method.
func (m *MockGlueAPI) StartDataQualityRuleRecommendationRun(arg0 *glue.StartDataQualityRuleRecommendationRunInput) (*glue.StartDataQualityRuleRecommendationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataQualityRuleRecommendationRun", arg0)
	ret0, _ := ret[0].(*glue.StartDataQualityRuleRecommendationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataQualityRuleRecommendationRun indicates an expected call of StartDataQualityRuleRecommendationRun.
func (mr *MockGlueAPIMockRecorder) StartDataQualityRuleRecommendationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataQualityRuleRecommendationRun", reflect.TypeOf((*MockGlueAPI)(nil).StartDataQualityRuleRecommendationRun), arg0)
}

// StartDataQualityRuleRecommendationRunRequest mocks base method.
func (m *MockGlueAPI) StartDataQualityRuleRecommendationRunRequest(arg0 *glue.StartDataQualityRuleRecommendationRunInput) (*request.Request, *glue.StartDataQualityRuleRecommendationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataQualityRuleRecommendationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartDataQualityRuleRecommendationRunOutput)
	return ret0, ret1
}

// StartDataQualityRuleRecommendationRunRequest indicates an expected call of StartDataQualityRuleRecommendationRunRequest.
func (mr *MockGlueAPIMockRecorder) StartDataQualityRuleRecommendationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataQualityRuleRecommendationRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartDataQualityRuleRecommendationRunRequest), arg0)
}

// StartDataQualityRuleRecommendationRunWithContext mocks base method.
func (m *MockGlueAPI) StartDataQualityRuleRecommendationRunWithContext(arg0 aws.Context, arg1 *glue.StartDataQualityRuleRecommendationRunInput, arg2 ...request.Option) (*glue.StartDataQualityRuleRecommendationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDataQualityRuleRecommendationRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartDataQualityRuleRecommendationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataQualityRuleRecommendationRunWithContext indicates an expected call of StartDataQualityRuleRecommendationRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartDataQualityRuleRecommendationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataQualityRuleRecommendationRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartDataQualityRuleRecommendationRunWithContext), varargs...)
}

// StartDataQualityRulesetEvaluationRun mocks base method.
func (m *MockGlueAPI) StartDataQualityRulesetEvaluationRun(arg0 *glue.StartDataQualityRulesetEvaluationRunInput) (*glue.StartDataQualityRulesetEvaluationRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataQualityRulesetEvaluationRun", arg0)
	ret0, _ := ret[0].(*glue.StartDataQualityRulesetEvaluationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataQualityRulesetEvaluationRun indicates an expected call of StartDataQualityRulesetEvaluationRun.
func (mr *MockGlueAPIMockRecorder) StartDataQualityRulesetEvaluationRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataQualityRulesetEvaluationRun", reflect.TypeOf((*MockGlueAPI)(nil).StartDataQualityRulesetEvaluationRun), arg0)
}

// StartDataQualityRulesetEvaluationRunRequest mocks base method.
func (m *MockGlueAPI) StartDataQualityRulesetEvaluationRunRequest(arg0 *glue.StartDataQualityRulesetEvaluationRunInput) (*request.Request, *glue.StartDataQualityRulesetEvaluationRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDataQualityRulesetEvaluationRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartDataQualityRulesetEvaluationRunOutput)
	return ret0, ret1
}

// StartDataQualityRulesetEvaluationRunRequest indicates an expected call of StartDataQualityRulesetEvaluationRunRequest.
func (mr *MockGlueAPIMockRecorder) StartDataQualityRulesetEvaluationRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataQualityRulesetEvaluationRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartDataQualityRulesetEvaluationRunRequest), arg0)
}

// StartDataQualityRulesetEvaluationRunWithContext mocks base method.
func (m *MockGlueAPI) StartDataQualityRulesetEvaluationRunWithContext(arg0 aws.Context, arg1 *glue.StartDataQualityRulesetEvaluationRunInput, arg2 ...request.Option) (*glue.StartDataQualityRulesetEvaluationRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartDataQualityRulesetEvaluationRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartDataQualityRulesetEvaluationRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDataQualityRulesetEvaluationRunWithContext indicates an expected call of StartDataQualityRulesetEvaluationRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartDataQualityRulesetEvaluationRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDataQualityRulesetEvaluationRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartDataQualityRulesetEvaluationRunWithContext), varargs...)
}

// StartExportLabelsTaskRun mocks base method.
func (m *MockGlueAPI) StartExportLabelsTaskRun(arg0 *glue.StartExportLabelsTaskRunInput) (*glue.StartExportLabelsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExportLabelsTaskRun", arg0)
	ret0, _ := ret[0].(*glue.StartExportLabelsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExportLabelsTaskRun indicates an expected call of StartExportLabelsTaskRun.
func (mr *MockGlueAPIMockRecorder) StartExportLabelsTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExportLabelsTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).StartExportLabelsTaskRun), arg0)
}

// StartExportLabelsTaskRunRequest mocks base method.
func (m *MockGlueAPI) StartExportLabelsTaskRunRequest(arg0 *glue.StartExportLabelsTaskRunInput) (*request.Request, *glue.StartExportLabelsTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExportLabelsTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartExportLabelsTaskRunOutput)
	return ret0, ret1
}

// StartExportLabelsTaskRunRequest indicates an expected call of StartExportLabelsTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) StartExportLabelsTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExportLabelsTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartExportLabelsTaskRunRequest), arg0)
}

// StartExportLabelsTaskRunWithContext mocks base method.
func (m *MockGlueAPI) StartExportLabelsTaskRunWithContext(arg0 aws.Context, arg1 *glue.StartExportLabelsTaskRunInput, arg2 ...request.Option) (*glue.StartExportLabelsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartExportLabelsTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartExportLabelsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExportLabelsTaskRunWithContext indicates an expected call of StartExportLabelsTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartExportLabelsTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExportLabelsTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartExportLabelsTaskRunWithContext), varargs...)
}

// StartImportLabelsTaskRun mocks base method.
func (m *MockGlueAPI) StartImportLabelsTaskRun(arg0 *glue.StartImportLabelsTaskRunInput) (*glue.StartImportLabelsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImportLabelsTaskRun", arg0)
	ret0, _ := ret[0].(*glue.StartImportLabelsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartImportLabelsTaskRun indicates an expected call of StartImportLabelsTaskRun.
func (mr *MockGlueAPIMockRecorder) StartImportLabelsTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImportLabelsTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).StartImportLabelsTaskRun), arg0)
}

// StartImportLabelsTaskRunRequest mocks base method.
func (m *MockGlueAPI) StartImportLabelsTaskRunRequest(arg0 *glue.StartImportLabelsTaskRunInput) (*request.Request, *glue.StartImportLabelsTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartImportLabelsTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartImportLabelsTaskRunOutput)
	return ret0, ret1
}

// StartImportLabelsTaskRunRequest indicates an expected call of StartImportLabelsTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) StartImportLabelsTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImportLabelsTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartImportLabelsTaskRunRequest), arg0)
}

// StartImportLabelsTaskRunWithContext mocks base method.
func (m *MockGlueAPI) StartImportLabelsTaskRunWithContext(arg0 aws.Context, arg1 *glue.StartImportLabelsTaskRunInput, arg2 ...request.Option) (*glue.StartImportLabelsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartImportLabelsTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartImportLabelsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartImportLabelsTaskRunWithContext indicates an expected call of StartImportLabelsTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartImportLabelsTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartImportLabelsTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartImportLabelsTaskRunWithContext), varargs...)
}

// StartJobRun mocks base method.
func (m *MockGlueAPI) StartJobRun(arg0 *glue.StartJobRunInput) (*glue.StartJobRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRun", arg0)
	ret0, _ := ret[0].(*glue.StartJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobRun indicates an expected call of StartJobRun.
func (mr *MockGlueAPIMockRecorder) StartJobRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRun", reflect.TypeOf((*MockGlueAPI)(nil).StartJobRun), arg0)
}

// StartJobRunRequest mocks base method.
func (m *MockGlueAPI) StartJobRunRequest(arg0 *glue.StartJobRunInput) (*request.Request, *glue.StartJobRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartJobRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartJobRunOutput)
	return ret0, ret1
}

// StartJobRunRequest indicates an expected call of StartJobRunRequest.
func (mr *MockGlueAPIMockRecorder) StartJobRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartJobRunRequest), arg0)
}

// StartJobRunWithContext mocks base method.
func (m *MockGlueAPI) StartJobRunWithContext(arg0 aws.Context, arg1 *glue.StartJobRunInput, arg2 ...request.Option) (*glue.StartJobRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartJobRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartJobRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartJobRunWithContext indicates an expected call of StartJobRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartJobRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartJobRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartJobRunWithContext), varargs...)
}

// StartMLEvaluationTaskRun mocks base method.
func (m *MockGlueAPI) StartMLEvaluationTaskRun(arg0 *glue.StartMLEvaluationTaskRunInput) (*glue.StartMLEvaluationTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLEvaluationTaskRun", arg0)
	ret0, _ := ret[0].(*glue.StartMLEvaluationTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLEvaluationTaskRun indicates an expected call of StartMLEvaluationTaskRun.
func (mr *MockGlueAPIMockRecorder) StartMLEvaluationTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLEvaluationTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).StartMLEvaluationTaskRun), arg0)
}

// StartMLEvaluationTaskRunRequest mocks base method.
func (m *MockGlueAPI) StartMLEvaluationTaskRunRequest(arg0 *glue.StartMLEvaluationTaskRunInput) (*request.Request, *glue.StartMLEvaluationTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLEvaluationTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartMLEvaluationTaskRunOutput)
	return ret0, ret1
}

// StartMLEvaluationTaskRunRequest indicates an expected call of StartMLEvaluationTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) StartMLEvaluationTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLEvaluationTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartMLEvaluationTaskRunRequest), arg0)
}

// StartMLEvaluationTaskRunWithContext mocks base method.
func (m *MockGlueAPI) StartMLEvaluationTaskRunWithContext(arg0 aws.Context, arg1 *glue.StartMLEvaluationTaskRunInput, arg2 ...request.Option) (*glue.StartMLEvaluationTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMLEvaluationTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartMLEvaluationTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLEvaluationTaskRunWithContext indicates an expected call of StartMLEvaluationTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartMLEvaluationTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLEvaluationTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartMLEvaluationTaskRunWithContext), varargs...)
}

// StartMLLabelingSetGenerationTaskRun mocks base method.
func (m *MockGlueAPI) StartMLLabelingSetGenerationTaskRun(arg0 *glue.StartMLLabelingSetGenerationTaskRunInput) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLLabelingSetGenerationTaskRun", arg0)
	ret0, _ := ret[0].(*glue.StartMLLabelingSetGenerationTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLLabelingSetGenerationTaskRun indicates an expected call of StartMLLabelingSetGenerationTaskRun.
func (mr *MockGlueAPIMockRecorder) StartMLLabelingSetGenerationTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLLabelingSetGenerationTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).StartMLLabelingSetGenerationTaskRun), arg0)
}

// StartMLLabelingSetGenerationTaskRunRequest mocks base method.
func (m *MockGlueAPI) StartMLLabelingSetGenerationTaskRunRequest(arg0 *glue.StartMLLabelingSetGenerationTaskRunInput) (*request.Request, *glue.StartMLLabelingSetGenerationTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartMLLabelingSetGenerationTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartMLLabelingSetGenerationTaskRunOutput)
	return ret0, ret1
}

// StartMLLabelingSetGenerationTaskRunRequest indicates an expected call of StartMLLabelingSetGenerationTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) StartMLLabelingSetGenerationTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLLabelingSetGenerationTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartMLLabelingSetGenerationTaskRunRequest), arg0)
}

// StartMLLabelingSetGenerationTaskRunWithContext mocks base method.
func (m *MockGlueAPI) StartMLLabelingSetGenerationTaskRunWithContext(arg0 aws.Context, arg1 *glue.StartMLLabelingSetGenerationTaskRunInput, arg2 ...request.Option) (*glue.StartMLLabelingSetGenerationTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartMLLabelingSetGenerationTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartMLLabelingSetGenerationTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartMLLabelingSetGenerationTaskRunWithContext indicates an expected call of StartMLLabelingSetGenerationTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartMLLabelingSetGenerationTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartMLLabelingSetGenerationTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartMLLabelingSetGenerationTaskRunWithContext), varargs...)
}

// StartTrigger mocks base method.
func (m *MockGlueAPI) StartTrigger(arg0 *glue.StartTriggerInput) (*glue.StartTriggerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTrigger", arg0)
	ret0, _ := ret[0].(*glue.StartTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTrigger indicates an expected call of StartTrigger.
func (mr *MockGlueAPIMockRecorder) StartTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTrigger", reflect.TypeOf((*MockGlueAPI)(nil).StartTrigger), arg0)
}

// StartTriggerRequest mocks base method.
func (m *MockGlueAPI) StartTriggerRequest(arg0 *glue.StartTriggerInput) (*request.Request, *glue.StartTriggerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTriggerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartTriggerOutput)
	return ret0, ret1
}

// StartTriggerRequest indicates an expected call of StartTriggerRequest.
func (mr *MockGlueAPIMockRecorder) StartTriggerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTriggerRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartTriggerRequest), arg0)
}

// StartTriggerWithContext mocks base method.
func (m *MockGlueAPI) StartTriggerWithContext(arg0 aws.Context, arg1 *glue.StartTriggerInput, arg2 ...request.Option) (*glue.StartTriggerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartTriggerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTriggerWithContext indicates an expected call of StartTriggerWithContext.
func (mr *MockGlueAPIMockRecorder) StartTriggerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTriggerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartTriggerWithContext), varargs...)
}

// StartWorkflowRun mocks base method.
func (m *MockGlueAPI) StartWorkflowRun(arg0 *glue.StartWorkflowRunInput) (*glue.StartWorkflowRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflowRun", arg0)
	ret0, _ := ret[0].(*glue.StartWorkflowRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkflowRun indicates an expected call of StartWorkflowRun.
func (mr *MockGlueAPIMockRecorder) StartWorkflowRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflowRun", reflect.TypeOf((*MockGlueAPI)(nil).StartWorkflowRun), arg0)
}

// StartWorkflowRunRequest mocks base method.
func (m *MockGlueAPI) StartWorkflowRunRequest(arg0 *glue.StartWorkflowRunInput) (*request.Request, *glue.StartWorkflowRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWorkflowRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StartWorkflowRunOutput)
	return ret0, ret1
}

// StartWorkflowRunRequest indicates an expected call of StartWorkflowRunRequest.
func (mr *MockGlueAPIMockRecorder) StartWorkflowRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflowRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StartWorkflowRunRequest), arg0)
}

// StartWorkflowRunWithContext mocks base method.
func (m *MockGlueAPI) StartWorkflowRunWithContext(arg0 aws.Context, arg1 *glue.StartWorkflowRunInput, arg2 ...request.Option) (*glue.StartWorkflowRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartWorkflowRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StartWorkflowRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWorkflowRunWithContext indicates an expected call of StartWorkflowRunWithContext.
func (mr *MockGlueAPIMockRecorder) StartWorkflowRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWorkflowRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StartWorkflowRunWithContext), varargs...)
}

// StopColumnStatisticsTaskRun mocks base method.
func (m *MockGlueAPI) StopColumnStatisticsTaskRun(arg0 *glue.StopColumnStatisticsTaskRunInput) (*glue.StopColumnStatisticsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopColumnStatisticsTaskRun", arg0)
	ret0, _ := ret[0].(*glue.StopColumnStatisticsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopColumnStatisticsTaskRun indicates an expected call of StopColumnStatisticsTaskRun.
func (mr *MockGlueAPIMockRecorder) StopColumnStatisticsTaskRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopColumnStatisticsTaskRun", reflect.TypeOf((*MockGlueAPI)(nil).StopColumnStatisticsTaskRun), arg0)
}

// StopColumnStatisticsTaskRunRequest mocks base method.
func (m *MockGlueAPI) StopColumnStatisticsTaskRunRequest(arg0 *glue.StopColumnStatisticsTaskRunInput) (*request.Request, *glue.StopColumnStatisticsTaskRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopColumnStatisticsTaskRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StopColumnStatisticsTaskRunOutput)
	return ret0, ret1
}

// StopColumnStatisticsTaskRunRequest indicates an expected call of StopColumnStatisticsTaskRunRequest.
func (mr *MockGlueAPIMockRecorder) StopColumnStatisticsTaskRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopColumnStatisticsTaskRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StopColumnStatisticsTaskRunRequest), arg0)
}

// StopColumnStatisticsTaskRunWithContext mocks base method.
func (m *MockGlueAPI) StopColumnStatisticsTaskRunWithContext(arg0 aws.Context, arg1 *glue.StopColumnStatisticsTaskRunInput, arg2 ...request.Option) (*glue.StopColumnStatisticsTaskRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopColumnStatisticsTaskRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StopColumnStatisticsTaskRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopColumnStatisticsTaskRunWithContext indicates an expected call of StopColumnStatisticsTaskRunWithContext.
func (mr *MockGlueAPIMockRecorder) StopColumnStatisticsTaskRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopColumnStatisticsTaskRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StopColumnStatisticsTaskRunWithContext), varargs...)
}

// StopCrawler mocks base method.
func (m *MockGlueAPI) StopCrawler(arg0 *glue.StopCrawlerInput) (*glue.StopCrawlerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCrawler", arg0)
	ret0, _ := ret[0].(*glue.StopCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCrawler indicates an expected call of StopCrawler.
func (mr *MockGlueAPIMockRecorder) StopCrawler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCrawler", reflect.TypeOf((*MockGlueAPI)(nil).StopCrawler), arg0)
}

// StopCrawlerRequest mocks base method.
func (m *MockGlueAPI) StopCrawlerRequest(arg0 *glue.StopCrawlerInput) (*request.Request, *glue.StopCrawlerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCrawlerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StopCrawlerOutput)
	return ret0, ret1
}

// StopCrawlerRequest indicates an expected call of StopCrawlerRequest.
func (mr *MockGlueAPIMockRecorder) StopCrawlerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCrawlerRequest", reflect.TypeOf((*MockGlueAPI)(nil).StopCrawlerRequest), arg0)
}

// StopCrawlerSchedule mocks base method.
func (m *MockGlueAPI) StopCrawlerSchedule(arg0 *glue.StopCrawlerScheduleInput) (*glue.StopCrawlerScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCrawlerSchedule", arg0)
	ret0, _ := ret[0].(*glue.StopCrawlerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCrawlerSchedule indicates an expected call of StopCrawlerSchedule.
func (mr *MockGlueAPIMockRecorder) StopCrawlerSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCrawlerSchedule", reflect.TypeOf((*MockGlueAPI)(nil).StopCrawlerSchedule), arg0)
}

// StopCrawlerScheduleRequest mocks base method.
func (m *MockGlueAPI) StopCrawlerScheduleRequest(arg0 *glue.StopCrawlerScheduleInput) (*request.Request, *glue.StopCrawlerScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopCrawlerScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StopCrawlerScheduleOutput)
	return ret0, ret1
}

// StopCrawlerScheduleRequest indicates an expected call of StopCrawlerScheduleRequest.
func (mr *MockGlueAPIMockRecorder) StopCrawlerScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCrawlerScheduleRequest", reflect.TypeOf((*MockGlueAPI)(nil).StopCrawlerScheduleRequest), arg0)
}

// StopCrawlerScheduleWithContext mocks base method.
func (m *MockGlueAPI) StopCrawlerScheduleWithContext(arg0 aws.Context, arg1 *glue.StopCrawlerScheduleInput, arg2 ...request.Option) (*glue.StopCrawlerScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopCrawlerScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StopCrawlerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCrawlerScheduleWithContext indicates an expected call of StopCrawlerScheduleWithContext.
func (mr *MockGlueAPIMockRecorder) StopCrawlerScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCrawlerScheduleWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StopCrawlerScheduleWithContext), varargs...)
}

// StopCrawlerWithContext mocks base method.
func (m *MockGlueAPI) StopCrawlerWithContext(arg0 aws.Context, arg1 *glue.StopCrawlerInput, arg2 ...request.Option) (*glue.StopCrawlerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopCrawlerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StopCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopCrawlerWithContext indicates an expected call of StopCrawlerWithContext.
func (mr *MockGlueAPIMockRecorder) StopCrawlerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopCrawlerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StopCrawlerWithContext), varargs...)
}

// StopSession mocks base method.
func (m *MockGlueAPI) StopSession(arg0 *glue.StopSessionInput) (*glue.StopSessionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSession", arg0)
	ret0, _ := ret[0].(*glue.StopSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSession indicates an expected call of StopSession.
func (mr *MockGlueAPIMockRecorder) StopSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSession", reflect.TypeOf((*MockGlueAPI)(nil).StopSession), arg0)
}

// StopSessionRequest mocks base method.
func (m *MockGlueAPI) StopSessionRequest(arg0 *glue.StopSessionInput) (*request.Request, *glue.StopSessionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSessionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StopSessionOutput)
	return ret0, ret1
}

// StopSessionRequest indicates an expected call of StopSessionRequest.
func (mr *MockGlueAPIMockRecorder) StopSessionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSessionRequest", reflect.TypeOf((*MockGlueAPI)(nil).StopSessionRequest), arg0)
}

// StopSessionWithContext mocks base method.
func (m *MockGlueAPI) StopSessionWithContext(arg0 aws.Context, arg1 *glue.StopSessionInput, arg2 ...request.Option) (*glue.StopSessionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopSessionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StopSessionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSessionWithContext indicates an expected call of StopSessionWithContext.
func (mr *MockGlueAPIMockRecorder) StopSessionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSessionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StopSessionWithContext), varargs...)
}

// StopTrigger mocks base method.
func (m *MockGlueAPI) StopTrigger(arg0 *glue.StopTriggerInput) (*glue.StopTriggerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTrigger", arg0)
	ret0, _ := ret[0].(*glue.StopTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTrigger indicates an expected call of StopTrigger.
func (mr *MockGlueAPIMockRecorder) StopTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTrigger", reflect.TypeOf((*MockGlueAPI)(nil).StopTrigger), arg0)
}

// StopTriggerRequest mocks base method.
func (m *MockGlueAPI) StopTriggerRequest(arg0 *glue.StopTriggerInput) (*request.Request, *glue.StopTriggerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopTriggerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StopTriggerOutput)
	return ret0, ret1
}

// StopTriggerRequest indicates an expected call of StopTriggerRequest.
func (mr *MockGlueAPIMockRecorder) StopTriggerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTriggerRequest", reflect.TypeOf((*MockGlueAPI)(nil).StopTriggerRequest), arg0)
}

// StopTriggerWithContext mocks base method.
func (m *MockGlueAPI) StopTriggerWithContext(arg0 aws.Context, arg1 *glue.StopTriggerInput, arg2 ...request.Option) (*glue.StopTriggerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopTriggerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StopTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopTriggerWithContext indicates an expected call of StopTriggerWithContext.
func (mr *MockGlueAPIMockRecorder) StopTriggerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopTriggerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StopTriggerWithContext), varargs...)
}

// StopWorkflowRun mocks base method.
func (m *MockGlueAPI) StopWorkflowRun(arg0 *glue.StopWorkflowRunInput) (*glue.StopWorkflowRunOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkflowRun", arg0)
	ret0, _ := ret[0].(*glue.StopWorkflowRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWorkflowRun indicates an expected call of StopWorkflowRun.
func (mr *MockGlueAPIMockRecorder) StopWorkflowRun(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflowRun", reflect.TypeOf((*MockGlueAPI)(nil).StopWorkflowRun), arg0)
}

// StopWorkflowRunRequest mocks base method.
func (m *MockGlueAPI) StopWorkflowRunRequest(arg0 *glue.StopWorkflowRunInput) (*request.Request, *glue.StopWorkflowRunOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkflowRunRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.StopWorkflowRunOutput)
	return ret0, ret1
}

// StopWorkflowRunRequest indicates an expected call of StopWorkflowRunRequest.
func (mr *MockGlueAPIMockRecorder) StopWorkflowRunRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflowRunRequest", reflect.TypeOf((*MockGlueAPI)(nil).StopWorkflowRunRequest), arg0)
}

// StopWorkflowRunWithContext mocks base method.
func (m *MockGlueAPI) StopWorkflowRunWithContext(arg0 aws.Context, arg1 *glue.StopWorkflowRunInput, arg2 ...request.Option) (*glue.StopWorkflowRunOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopWorkflowRunWithContext", varargs...)
	ret0, _ := ret[0].(*glue.StopWorkflowRunOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWorkflowRunWithContext indicates an expected call of StopWorkflowRunWithContext.
func (mr *MockGlueAPIMockRecorder) StopWorkflowRunWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflowRunWithContext", reflect.TypeOf((*MockGlueAPI)(nil).StopWorkflowRunWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockGlueAPI) TagResource(arg0 *glue.TagResourceInput) (*glue.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*glue.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockGlueAPIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockGlueAPI)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockGlueAPI) TagResourceRequest(arg0 *glue.TagResourceInput) (*request.Request, *glue.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockGlueAPIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockGlueAPI)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockGlueAPI) TagResourceWithContext(arg0 aws.Context, arg1 *glue.TagResourceInput, arg2 ...request.Option) (*glue.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*glue.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockGlueAPIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockGlueAPI)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockGlueAPI) UntagResource(arg0 *glue.UntagResourceInput) (*glue.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*glue.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockGlueAPIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockGlueAPI)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockGlueAPI) UntagResourceRequest(arg0 *glue.UntagResourceInput) (*request.Request, *glue.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockGlueAPIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockGlueAPI)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockGlueAPI) UntagResourceWithContext(arg0 aws.Context, arg1 *glue.UntagResourceInput, arg2 ...request.Option) (*glue.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockGlueAPIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UntagResourceWithContext), varargs...)
}

// UpdateBlueprint mocks base method.
func (m *MockGlueAPI) UpdateBlueprint(arg0 *glue.UpdateBlueprintInput) (*glue.UpdateBlueprintOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlueprint", arg0)
	ret0, _ := ret[0].(*glue.UpdateBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlueprint indicates an expected call of UpdateBlueprint.
func (mr *MockGlueAPIMockRecorder) UpdateBlueprint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlueprint", reflect.TypeOf((*MockGlueAPI)(nil).UpdateBlueprint), arg0)
}

// UpdateBlueprintRequest mocks base method.
func (m *MockGlueAPI) UpdateBlueprintRequest(arg0 *glue.UpdateBlueprintInput) (*request.Request, *glue.UpdateBlueprintOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlueprintRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateBlueprintOutput)
	return ret0, ret1
}

// UpdateBlueprintRequest indicates an expected call of UpdateBlueprintRequest.
func (mr *MockGlueAPIMockRecorder) UpdateBlueprintRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlueprintRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateBlueprintRequest), arg0)
}

// UpdateBlueprintWithContext mocks base method.
func (m *MockGlueAPI) UpdateBlueprintWithContext(arg0 aws.Context, arg1 *glue.UpdateBlueprintInput, arg2 ...request.Option) (*glue.UpdateBlueprintOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBlueprintWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateBlueprintOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlueprintWithContext indicates an expected call of UpdateBlueprintWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateBlueprintWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlueprintWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateBlueprintWithContext), varargs...)
}

// UpdateClassifier mocks base method.
func (m *MockGlueAPI) UpdateClassifier(arg0 *glue.UpdateClassifierInput) (*glue.UpdateClassifierOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassifier", arg0)
	ret0, _ := ret[0].(*glue.UpdateClassifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassifier indicates an expected call of UpdateClassifier.
func (mr *MockGlueAPIMockRecorder) UpdateClassifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassifier", reflect.TypeOf((*MockGlueAPI)(nil).UpdateClassifier), arg0)
}

// UpdateClassifierRequest mocks base method.
func (m *MockGlueAPI) UpdateClassifierRequest(arg0 *glue.UpdateClassifierInput) (*request.Request, *glue.UpdateClassifierOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClassifierRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateClassifierOutput)
	return ret0, ret1
}

// UpdateClassifierRequest indicates an expected call of UpdateClassifierRequest.
func (mr *MockGlueAPIMockRecorder) UpdateClassifierRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassifierRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateClassifierRequest), arg0)
}

// UpdateClassifierWithContext mocks base method.
func (m *MockGlueAPI) UpdateClassifierWithContext(arg0 aws.Context, arg1 *glue.UpdateClassifierInput, arg2 ...request.Option) (*glue.UpdateClassifierOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClassifierWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateClassifierOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClassifierWithContext indicates an expected call of UpdateClassifierWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateClassifierWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClassifierWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateClassifierWithContext), varargs...)
}

// UpdateColumnStatisticsForPartition mocks base method.
func (m *MockGlueAPI) UpdateColumnStatisticsForPartition(arg0 *glue.UpdateColumnStatisticsForPartitionInput) (*glue.UpdateColumnStatisticsForPartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumnStatisticsForPartition", arg0)
	ret0, _ := ret[0].(*glue.UpdateColumnStatisticsForPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateColumnStatisticsForPartition indicates an expected call of UpdateColumnStatisticsForPartition.
func (mr *MockGlueAPIMockRecorder) UpdateColumnStatisticsForPartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumnStatisticsForPartition", reflect.TypeOf((*MockGlueAPI)(nil).UpdateColumnStatisticsForPartition), arg0)
}

// UpdateColumnStatisticsForPartitionRequest mocks base method.
func (m *MockGlueAPI) UpdateColumnStatisticsForPartitionRequest(arg0 *glue.UpdateColumnStatisticsForPartitionInput) (*request.Request, *glue.UpdateColumnStatisticsForPartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumnStatisticsForPartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateColumnStatisticsForPartitionOutput)
	return ret0, ret1
}

// UpdateColumnStatisticsForPartitionRequest indicates an expected call of UpdateColumnStatisticsForPartitionRequest.
func (mr *MockGlueAPIMockRecorder) UpdateColumnStatisticsForPartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumnStatisticsForPartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateColumnStatisticsForPartitionRequest), arg0)
}

// UpdateColumnStatisticsForPartitionWithContext mocks base method.
func (m *MockGlueAPI) UpdateColumnStatisticsForPartitionWithContext(arg0 aws.Context, arg1 *glue.UpdateColumnStatisticsForPartitionInput, arg2 ...request.Option) (*glue.UpdateColumnStatisticsForPartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateColumnStatisticsForPartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateColumnStatisticsForPartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateColumnStatisticsForPartitionWithContext indicates an expected call of UpdateColumnStatisticsForPartitionWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateColumnStatisticsForPartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumnStatisticsForPartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateColumnStatisticsForPartitionWithContext), varargs...)
}

// UpdateColumnStatisticsForTable mocks base method.
func (m *MockGlueAPI) UpdateColumnStatisticsForTable(arg0 *glue.UpdateColumnStatisticsForTableInput) (*glue.UpdateColumnStatisticsForTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumnStatisticsForTable", arg0)
	ret0, _ := ret[0].(*glue.UpdateColumnStatisticsForTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateColumnStatisticsForTable indicates an expected call of UpdateColumnStatisticsForTable.
func (mr *MockGlueAPIMockRecorder) UpdateColumnStatisticsForTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumnStatisticsForTable", reflect.TypeOf((*MockGlueAPI)(nil).UpdateColumnStatisticsForTable), arg0)
}

// UpdateColumnStatisticsForTableRequest mocks base method.
func (m *MockGlueAPI) UpdateColumnStatisticsForTableRequest(arg0 *glue.UpdateColumnStatisticsForTableInput) (*request.Request, *glue.UpdateColumnStatisticsForTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumnStatisticsForTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateColumnStatisticsForTableOutput)
	return ret0, ret1
}

// UpdateColumnStatisticsForTableRequest indicates an expected call of UpdateColumnStatisticsForTableRequest.
func (mr *MockGlueAPIMockRecorder) UpdateColumnStatisticsForTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumnStatisticsForTableRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateColumnStatisticsForTableRequest), arg0)
}

// UpdateColumnStatisticsForTableWithContext mocks base method.
func (m *MockGlueAPI) UpdateColumnStatisticsForTableWithContext(arg0 aws.Context, arg1 *glue.UpdateColumnStatisticsForTableInput, arg2 ...request.Option) (*glue.UpdateColumnStatisticsForTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateColumnStatisticsForTableWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateColumnStatisticsForTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateColumnStatisticsForTableWithContext indicates an expected call of UpdateColumnStatisticsForTableWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateColumnStatisticsForTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumnStatisticsForTableWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateColumnStatisticsForTableWithContext), varargs...)
}

// UpdateConnection mocks base method.
func (m *MockGlueAPI) UpdateConnection(arg0 *glue.UpdateConnectionInput) (*glue.UpdateConnectionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnection", arg0)
	ret0, _ := ret[0].(*glue.UpdateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnection indicates an expected call of UpdateConnection.
func (mr *MockGlueAPIMockRecorder) UpdateConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnection", reflect.TypeOf((*MockGlueAPI)(nil).UpdateConnection), arg0)
}

// UpdateConnectionRequest mocks base method.
func (m *MockGlueAPI) UpdateConnectionRequest(arg0 *glue.UpdateConnectionInput) (*request.Request, *glue.UpdateConnectionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateConnectionOutput)
	return ret0, ret1
}

// UpdateConnectionRequest indicates an expected call of UpdateConnectionRequest.
func (mr *MockGlueAPIMockRecorder) UpdateConnectionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateConnectionRequest), arg0)
}

// UpdateConnectionWithContext mocks base method.
func (m *MockGlueAPI) UpdateConnectionWithContext(arg0 aws.Context, arg1 *glue.UpdateConnectionInput, arg2 ...request.Option) (*glue.UpdateConnectionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConnectionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateConnectionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectionWithContext indicates an expected call of UpdateConnectionWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateConnectionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateConnectionWithContext), varargs...)
}

// UpdateCrawler mocks base method.
func (m *MockGlueAPI) UpdateCrawler(arg0 *glue.UpdateCrawlerInput) (*glue.UpdateCrawlerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrawler", arg0)
	ret0, _ := ret[0].(*glue.UpdateCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCrawler indicates an expected call of UpdateCrawler.
func (mr *MockGlueAPIMockRecorder) UpdateCrawler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrawler", reflect.TypeOf((*MockGlueAPI)(nil).UpdateCrawler), arg0)
}

// UpdateCrawlerRequest mocks base method.
func (m *MockGlueAPI) UpdateCrawlerRequest(arg0 *glue.UpdateCrawlerInput) (*request.Request, *glue.UpdateCrawlerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrawlerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateCrawlerOutput)
	return ret0, ret1
}

// UpdateCrawlerRequest indicates an expected call of UpdateCrawlerRequest.
func (mr *MockGlueAPIMockRecorder) UpdateCrawlerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrawlerRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateCrawlerRequest), arg0)
}

// UpdateCrawlerSchedule mocks base method.
func (m *MockGlueAPI) UpdateCrawlerSchedule(arg0 *glue.UpdateCrawlerScheduleInput) (*glue.UpdateCrawlerScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrawlerSchedule", arg0)
	ret0, _ := ret[0].(*glue.UpdateCrawlerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCrawlerSchedule indicates an expected call of UpdateCrawlerSchedule.
func (mr *MockGlueAPIMockRecorder) UpdateCrawlerSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrawlerSchedule", reflect.TypeOf((*MockGlueAPI)(nil).UpdateCrawlerSchedule), arg0)
}

// UpdateCrawlerScheduleRequest mocks base method.
func (m *MockGlueAPI) UpdateCrawlerScheduleRequest(arg0 *glue.UpdateCrawlerScheduleInput) (*request.Request, *glue.UpdateCrawlerScheduleOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrawlerScheduleRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateCrawlerScheduleOutput)
	return ret0, ret1
}

// UpdateCrawlerScheduleRequest indicates an expected call of UpdateCrawlerScheduleRequest.
func (mr *MockGlueAPIMockRecorder) UpdateCrawlerScheduleRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrawlerScheduleRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateCrawlerScheduleRequest), arg0)
}

// UpdateCrawlerScheduleWithContext mocks base method.
func (m *MockGlueAPI) UpdateCrawlerScheduleWithContext(arg0 aws.Context, arg1 *glue.UpdateCrawlerScheduleInput, arg2 ...request.Option) (*glue.UpdateCrawlerScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCrawlerScheduleWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateCrawlerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCrawlerScheduleWithContext indicates an expected call of UpdateCrawlerScheduleWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateCrawlerScheduleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrawlerScheduleWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateCrawlerScheduleWithContext), varargs...)
}

// UpdateCrawlerWithContext mocks base method.
func (m *MockGlueAPI) UpdateCrawlerWithContext(arg0 aws.Context, arg1 *glue.UpdateCrawlerInput, arg2 ...request.Option) (*glue.UpdateCrawlerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCrawlerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateCrawlerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCrawlerWithContext indicates an expected call of UpdateCrawlerWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateCrawlerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrawlerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateCrawlerWithContext), varargs...)
}

// UpdateDataQualityRuleset mocks base method.
func (m *MockGlueAPI) UpdateDataQualityRuleset(arg0 *glue.UpdateDataQualityRulesetInput) (*glue.UpdateDataQualityRulesetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataQualityRuleset", arg0)
	ret0, _ := ret[0].(*glue.UpdateDataQualityRulesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataQualityRuleset indicates an expected call of UpdateDataQualityRuleset.
func (mr *MockGlueAPIMockRecorder) UpdateDataQualityRuleset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataQualityRuleset", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDataQualityRuleset), arg0)
}

// UpdateDataQualityRulesetRequest mocks base method.
func (m *MockGlueAPI) UpdateDataQualityRulesetRequest(arg0 *glue.UpdateDataQualityRulesetInput) (*request.Request, *glue.UpdateDataQualityRulesetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataQualityRulesetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateDataQualityRulesetOutput)
	return ret0, ret1
}

// UpdateDataQualityRulesetRequest indicates an expected call of UpdateDataQualityRulesetRequest.
func (mr *MockGlueAPIMockRecorder) UpdateDataQualityRulesetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataQualityRulesetRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDataQualityRulesetRequest), arg0)
}

// UpdateDataQualityRulesetWithContext mocks base method.
func (m *MockGlueAPI) UpdateDataQualityRulesetWithContext(arg0 aws.Context, arg1 *glue.UpdateDataQualityRulesetInput, arg2 ...request.Option) (*glue.UpdateDataQualityRulesetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataQualityRulesetWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateDataQualityRulesetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataQualityRulesetWithContext indicates an expected call of UpdateDataQualityRulesetWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateDataQualityRulesetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataQualityRulesetWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDataQualityRulesetWithContext), varargs...)
}

// UpdateDatabase mocks base method.
func (m *MockGlueAPI) UpdateDatabase(arg0 *glue.UpdateDatabaseInput) (*glue.UpdateDatabaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabase", arg0)
	ret0, _ := ret[0].(*glue.UpdateDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatabase indicates an expected call of UpdateDatabase.
func (mr *MockGlueAPIMockRecorder) UpdateDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabase", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDatabase), arg0)
}

// UpdateDatabaseRequest mocks base method.
func (m *MockGlueAPI) UpdateDatabaseRequest(arg0 *glue.UpdateDatabaseInput) (*request.Request, *glue.UpdateDatabaseOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatabaseRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateDatabaseOutput)
	return ret0, ret1
}

// UpdateDatabaseRequest indicates an expected call of UpdateDatabaseRequest.
func (mr *MockGlueAPIMockRecorder) UpdateDatabaseRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabaseRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDatabaseRequest), arg0)
}

// UpdateDatabaseWithContext mocks base method.
func (m *MockGlueAPI) UpdateDatabaseWithContext(arg0 aws.Context, arg1 *glue.UpdateDatabaseInput, arg2 ...request.Option) (*glue.UpdateDatabaseOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatabaseWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateDatabaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatabaseWithContext indicates an expected call of UpdateDatabaseWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateDatabaseWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatabaseWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDatabaseWithContext), varargs...)
}

// UpdateDevEndpoint mocks base method.
func (m *MockGlueAPI) UpdateDevEndpoint(arg0 *glue.UpdateDevEndpointInput) (*glue.UpdateDevEndpointOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevEndpoint", arg0)
	ret0, _ := ret[0].(*glue.UpdateDevEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevEndpoint indicates an expected call of UpdateDevEndpoint.
func (mr *MockGlueAPIMockRecorder) UpdateDevEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevEndpoint", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDevEndpoint), arg0)
}

// UpdateDevEndpointRequest mocks base method.
func (m *MockGlueAPI) UpdateDevEndpointRequest(arg0 *glue.UpdateDevEndpointInput) (*request.Request, *glue.UpdateDevEndpointOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevEndpointRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateDevEndpointOutput)
	return ret0, ret1
}

// UpdateDevEndpointRequest indicates an expected call of UpdateDevEndpointRequest.
func (mr *MockGlueAPIMockRecorder) UpdateDevEndpointRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevEndpointRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDevEndpointRequest), arg0)
}

// UpdateDevEndpointWithContext mocks base method.
func (m *MockGlueAPI) UpdateDevEndpointWithContext(arg0 aws.Context, arg1 *glue.UpdateDevEndpointInput, arg2 ...request.Option) (*glue.UpdateDevEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDevEndpointWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateDevEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevEndpointWithContext indicates an expected call of UpdateDevEndpointWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateDevEndpointWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevEndpointWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateDevEndpointWithContext), varargs...)
}

// UpdateJob mocks base method.
func (m *MockGlueAPI) UpdateJob(arg0 *glue.UpdateJobInput) (*glue.UpdateJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0)
	ret0, _ := ret[0].(*glue.UpdateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockGlueAPIMockRecorder) UpdateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockGlueAPI)(nil).UpdateJob), arg0)
}

// UpdateJobFromSourceControl mocks base method.
func (m *MockGlueAPI) UpdateJobFromSourceControl(arg0 *glue.UpdateJobFromSourceControlInput) (*glue.UpdateJobFromSourceControlOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobFromSourceControl", arg0)
	ret0, _ := ret[0].(*glue.UpdateJobFromSourceControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobFromSourceControl indicates an expected call of UpdateJobFromSourceControl.
func (mr *MockGlueAPIMockRecorder) UpdateJobFromSourceControl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobFromSourceControl", reflect.TypeOf((*MockGlueAPI)(nil).UpdateJobFromSourceControl), arg0)
}

// UpdateJobFromSourceControlRequest mocks base method.
func (m *MockGlueAPI) UpdateJobFromSourceControlRequest(arg0 *glue.UpdateJobFromSourceControlInput) (*request.Request, *glue.UpdateJobFromSourceControlOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobFromSourceControlRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateJobFromSourceControlOutput)
	return ret0, ret1
}

// UpdateJobFromSourceControlRequest indicates an expected call of UpdateJobFromSourceControlRequest.
func (mr *MockGlueAPIMockRecorder) UpdateJobFromSourceControlRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobFromSourceControlRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateJobFromSourceControlRequest), arg0)
}

// UpdateJobFromSourceControlWithContext mocks base method.
func (m *MockGlueAPI) UpdateJobFromSourceControlWithContext(arg0 aws.Context, arg1 *glue.UpdateJobFromSourceControlInput, arg2 ...request.Option) (*glue.UpdateJobFromSourceControlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobFromSourceControlWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateJobFromSourceControlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobFromSourceControlWithContext indicates an expected call of UpdateJobFromSourceControlWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateJobFromSourceControlWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobFromSourceControlWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateJobFromSourceControlWithContext), varargs...)
}

// UpdateJobRequest mocks base method.
func (m *MockGlueAPI) UpdateJobRequest(arg0 *glue.UpdateJobInput) (*request.Request, *glue.UpdateJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateJobOutput)
	return ret0, ret1
}

// UpdateJobRequest indicates an expected call of UpdateJobRequest.
func (mr *MockGlueAPIMockRecorder) UpdateJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateJobRequest), arg0)
}

// UpdateJobWithContext mocks base method.
func (m *MockGlueAPI) UpdateJobWithContext(arg0 aws.Context, arg1 *glue.UpdateJobInput, arg2 ...request.Option) (*glue.UpdateJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateJobWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobWithContext indicates an expected call of UpdateJobWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateJobWithContext), varargs...)
}

// UpdateMLTransform mocks base method.
func (m *MockGlueAPI) UpdateMLTransform(arg0 *glue.UpdateMLTransformInput) (*glue.UpdateMLTransformOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMLTransform", arg0)
	ret0, _ := ret[0].(*glue.UpdateMLTransformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMLTransform indicates an expected call of UpdateMLTransform.
func (mr *MockGlueAPIMockRecorder) UpdateMLTransform(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMLTransform", reflect.TypeOf((*MockGlueAPI)(nil).UpdateMLTransform), arg0)
}

// UpdateMLTransformRequest mocks base method.
func (m *MockGlueAPI) UpdateMLTransformRequest(arg0 *glue.UpdateMLTransformInput) (*request.Request, *glue.UpdateMLTransformOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMLTransformRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateMLTransformOutput)
	return ret0, ret1
}

// UpdateMLTransformRequest indicates an expected call of UpdateMLTransformRequest.
func (mr *MockGlueAPIMockRecorder) UpdateMLTransformRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMLTransformRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateMLTransformRequest), arg0)
}

// UpdateMLTransformWithContext mocks base method.
func (m *MockGlueAPI) UpdateMLTransformWithContext(arg0 aws.Context, arg1 *glue.UpdateMLTransformInput, arg2 ...request.Option) (*glue.UpdateMLTransformOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateMLTransformWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateMLTransformOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMLTransformWithContext indicates an expected call of UpdateMLTransformWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateMLTransformWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMLTransformWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateMLTransformWithContext), varargs...)
}

// UpdatePartition mocks base method.
func (m *MockGlueAPI) UpdatePartition(arg0 *glue.UpdatePartitionInput) (*glue.UpdatePartitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartition", arg0)
	ret0, _ := ret[0].(*glue.UpdatePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockGlueAPIMockRecorder) UpdatePartition(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockGlueAPI)(nil).UpdatePartition), arg0)
}

// UpdatePartitionRequest mocks base method.
func (m *MockGlueAPI) UpdatePartitionRequest(arg0 *glue.UpdatePartitionInput) (*request.Request, *glue.UpdatePartitionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartitionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdatePartitionOutput)
	return ret0, ret1
}

// UpdatePartitionRequest indicates an expected call of UpdatePartitionRequest.
func (mr *MockGlueAPIMockRecorder) UpdatePartitionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartitionRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdatePartitionRequest), arg0)
}

// UpdatePartitionWithContext mocks base method.
func (m *MockGlueAPI) UpdatePartitionWithContext(arg0 aws.Context, arg1 *glue.UpdatePartitionInput, arg2 ...request.Option) (*glue.UpdatePartitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePartitionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdatePartitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartitionWithContext indicates an expected call of UpdatePartitionWithContext.
func (mr *MockGlueAPIMockRecorder) UpdatePartitionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartitionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdatePartitionWithContext), varargs...)
}

// UpdateRegistry mocks base method.
func (m *MockGlueAPI) UpdateRegistry(arg0 *glue.UpdateRegistryInput) (*glue.UpdateRegistryOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistry", arg0)
	ret0, _ := ret[0].(*glue.UpdateRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistry indicates an expected call of UpdateRegistry.
func (mr *MockGlueAPIMockRecorder) UpdateRegistry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistry", reflect.TypeOf((*MockGlueAPI)(nil).UpdateRegistry), arg0)
}

// UpdateRegistryRequest mocks base method.
func (m *MockGlueAPI) UpdateRegistryRequest(arg0 *glue.UpdateRegistryInput) (*request.Request, *glue.UpdateRegistryOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateRegistryOutput)
	return ret0, ret1
}

// UpdateRegistryRequest indicates an expected call of UpdateRegistryRequest.
func (mr *MockGlueAPIMockRecorder) UpdateRegistryRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistryRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateRegistryRequest), arg0)
}

// UpdateRegistryWithContext mocks base method.
func (m *MockGlueAPI) UpdateRegistryWithContext(arg0 aws.Context, arg1 *glue.UpdateRegistryInput, arg2 ...request.Option) (*glue.UpdateRegistryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRegistryWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateRegistryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistryWithContext indicates an expected call of UpdateRegistryWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateRegistryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistryWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateRegistryWithContext), varargs...)
}

// UpdateSchema mocks base method.
func (m *MockGlueAPI) UpdateSchema(arg0 *glue.UpdateSchemaInput) (*glue.UpdateSchemaOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchema", arg0)
	ret0, _ := ret[0].(*glue.UpdateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchema indicates an expected call of UpdateSchema.
func (mr *MockGlueAPIMockRecorder) UpdateSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchema", reflect.TypeOf((*MockGlueAPI)(nil).UpdateSchema), arg0)
}

// UpdateSchemaRequest mocks base method.
func (m *MockGlueAPI) UpdateSchemaRequest(arg0 *glue.UpdateSchemaInput) (*request.Request, *glue.UpdateSchemaOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchemaRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateSchemaOutput)
	return ret0, ret1
}

// UpdateSchemaRequest indicates an expected call of UpdateSchemaRequest.
func (mr *MockGlueAPIMockRecorder) UpdateSchemaRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateSchemaRequest), arg0)
}

// UpdateSchemaWithContext mocks base method.
func (m *MockGlueAPI) UpdateSchemaWithContext(arg0 aws.Context, arg1 *glue.UpdateSchemaInput, arg2 ...request.Option) (*glue.UpdateSchemaOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchemaWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateSchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchemaWithContext indicates an expected call of UpdateSchemaWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateSchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchemaWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateSchemaWithContext), varargs...)
}

// UpdateSourceControlFromJob mocks base method.
func (m *MockGlueAPI) UpdateSourceControlFromJob(arg0 *glue.UpdateSourceControlFromJobInput) (*glue.UpdateSourceControlFromJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSourceControlFromJob", arg0)
	ret0, _ := ret[0].(*glue.UpdateSourceControlFromJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceControlFromJob indicates an expected call of UpdateSourceControlFromJob.
func (mr *MockGlueAPIMockRecorder) UpdateSourceControlFromJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceControlFromJob", reflect.TypeOf((*MockGlueAPI)(nil).UpdateSourceControlFromJob), arg0)
}

// UpdateSourceControlFromJobRequest mocks base method.
func (m *MockGlueAPI) UpdateSourceControlFromJobRequest(arg0 *glue.UpdateSourceControlFromJobInput) (*request.Request, *glue.UpdateSourceControlFromJobOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSourceControlFromJobRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateSourceControlFromJobOutput)
	return ret0, ret1
}

// UpdateSourceControlFromJobRequest indicates an expected call of UpdateSourceControlFromJobRequest.
func (mr *MockGlueAPIMockRecorder) UpdateSourceControlFromJobRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceControlFromJobRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateSourceControlFromJobRequest), arg0)
}

// UpdateSourceControlFromJobWithContext mocks base method.
func (m *MockGlueAPI) UpdateSourceControlFromJobWithContext(arg0 aws.Context, arg1 *glue.UpdateSourceControlFromJobInput, arg2 ...request.Option) (*glue.UpdateSourceControlFromJobOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSourceControlFromJobWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateSourceControlFromJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSourceControlFromJobWithContext indicates an expected call of UpdateSourceControlFromJobWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateSourceControlFromJobWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSourceControlFromJobWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateSourceControlFromJobWithContext), varargs...)
}

// UpdateTable mocks base method.
func (m *MockGlueAPI) UpdateTable(arg0 *glue.UpdateTableInput) (*glue.UpdateTableOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTable", arg0)
	ret0, _ := ret[0].(*glue.UpdateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTable indicates an expected call of UpdateTable.
func (mr *MockGlueAPIMockRecorder) UpdateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTable), arg0)
}

// UpdateTableOptimizer mocks base method.
func (m *MockGlueAPI) UpdateTableOptimizer(arg0 *glue.UpdateTableOptimizerInput) (*glue.UpdateTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableOptimizer", arg0)
	ret0, _ := ret[0].(*glue.UpdateTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableOptimizer indicates an expected call of UpdateTableOptimizer.
func (mr *MockGlueAPIMockRecorder) UpdateTableOptimizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableOptimizer", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTableOptimizer), arg0)
}

// UpdateTableOptimizerRequest mocks base method.
func (m *MockGlueAPI) UpdateTableOptimizerRequest(arg0 *glue.UpdateTableOptimizerInput) (*request.Request, *glue.UpdateTableOptimizerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableOptimizerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateTableOptimizerOutput)
	return ret0, ret1
}

// UpdateTableOptimizerRequest indicates an expected call of UpdateTableOptimizerRequest.
func (mr *MockGlueAPIMockRecorder) UpdateTableOptimizerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableOptimizerRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTableOptimizerRequest), arg0)
}

// UpdateTableOptimizerWithContext mocks base method.
func (m *MockGlueAPI) UpdateTableOptimizerWithContext(arg0 aws.Context, arg1 *glue.UpdateTableOptimizerInput, arg2 ...request.Option) (*glue.UpdateTableOptimizerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTableOptimizerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateTableOptimizerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableOptimizerWithContext indicates an expected call of UpdateTableOptimizerWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateTableOptimizerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableOptimizerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTableOptimizerWithContext), varargs...)
}

// UpdateTableRequest mocks base method.
func (m *MockGlueAPI) UpdateTableRequest(arg0 *glue.UpdateTableInput) (*request.Request, *glue.UpdateTableOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTableRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateTableOutput)
	return ret0, ret1
}

// UpdateTableRequest indicates an expected call of UpdateTableRequest.
func (mr *MockGlueAPIMockRecorder) UpdateTableRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTableRequest), arg0)
}

// UpdateTableWithContext mocks base method.
func (m *MockGlueAPI) UpdateTableWithContext(arg0 aws.Context, arg1 *glue.UpdateTableInput, arg2 ...request.Option) (*glue.UpdateTableOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTableWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateTableOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTableWithContext indicates an expected call of UpdateTableWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateTableWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTableWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTableWithContext), varargs...)
}

// UpdateTrigger mocks base method.
func (m *MockGlueAPI) UpdateTrigger(arg0 *glue.UpdateTriggerInput) (*glue.UpdateTriggerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrigger", arg0)
	ret0, _ := ret[0].(*glue.UpdateTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrigger indicates an expected call of UpdateTrigger.
func (mr *MockGlueAPIMockRecorder) UpdateTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrigger", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTrigger), arg0)
}

// UpdateTriggerRequest mocks base method.
func (m *MockGlueAPI) UpdateTriggerRequest(arg0 *glue.UpdateTriggerInput) (*request.Request, *glue.UpdateTriggerOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTriggerRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateTriggerOutput)
	return ret0, ret1
}

// UpdateTriggerRequest indicates an expected call of UpdateTriggerRequest.
func (mr *MockGlueAPIMockRecorder) UpdateTriggerRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTriggerRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTriggerRequest), arg0)
}

// UpdateTriggerWithContext mocks base method.
func (m *MockGlueAPI) UpdateTriggerWithContext(arg0 aws.Context, arg1 *glue.UpdateTriggerInput, arg2 ...request.Option) (*glue.UpdateTriggerOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTriggerWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateTriggerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTriggerWithContext indicates an expected call of UpdateTriggerWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateTriggerWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTriggerWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateTriggerWithContext), varargs...)
}

// UpdateUsageProfile mocks base method.
func (m *MockGlueAPI) UpdateUsageProfile(arg0 *glue.UpdateUsageProfileInput) (*glue.UpdateUsageProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsageProfile", arg0)
	ret0, _ := ret[0].(*glue.UpdateUsageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsageProfile indicates an expected call of UpdateUsageProfile.
func (mr *MockGlueAPIMockRecorder) UpdateUsageProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageProfile", reflect.TypeOf((*MockGlueAPI)(nil).UpdateUsageProfile), arg0)
}

// UpdateUsageProfileRequest mocks base method.
func (m *MockGlueAPI) UpdateUsageProfileRequest(arg0 *glue.UpdateUsageProfileInput) (*request.Request, *glue.UpdateUsageProfileOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsageProfileRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateUsageProfileOutput)
	return ret0, ret1
}

// UpdateUsageProfileRequest indicates an expected call of UpdateUsageProfileRequest.
func (mr *MockGlueAPIMockRecorder) UpdateUsageProfileRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageProfileRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateUsageProfileRequest), arg0)
}

// UpdateUsageProfileWithContext mocks base method.
func (m *MockGlueAPI) UpdateUsageProfileWithContext(arg0 aws.Context, arg1 *glue.UpdateUsageProfileInput, arg2 ...request.Option) (*glue.UpdateUsageProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsageProfileWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateUsageProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsageProfileWithContext indicates an expected call of UpdateUsageProfileWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateUsageProfileWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageProfileWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateUsageProfileWithContext), varargs...)
}

// UpdateUserDefinedFunction mocks base method.
func (m *MockGlueAPI) UpdateUserDefinedFunction(arg0 *glue.UpdateUserDefinedFunctionInput) (*glue.UpdateUserDefinedFunctionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDefinedFunction", arg0)
	ret0, _ := ret[0].(*glue.UpdateUserDefinedFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDefinedFunction indicates an expected call of UpdateUserDefinedFunction.
func (mr *MockGlueAPIMockRecorder) UpdateUserDefinedFunction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDefinedFunction", reflect.TypeOf((*MockGlueAPI)(nil).UpdateUserDefinedFunction), arg0)
}

// UpdateUserDefinedFunctionRequest mocks base method.
func (m *MockGlueAPI) UpdateUserDefinedFunctionRequest(arg0 *glue.UpdateUserDefinedFunctionInput) (*request.Request, *glue.UpdateUserDefinedFunctionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDefinedFunctionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateUserDefinedFunctionOutput)
	return ret0, ret1
}

// UpdateUserDefinedFunctionRequest indicates an expected call of UpdateUserDefinedFunctionRequest.
func (mr *MockGlueAPIMockRecorder) UpdateUserDefinedFunctionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDefinedFunctionRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateUserDefinedFunctionRequest), arg0)
}

// UpdateUserDefinedFunctionWithContext mocks base method.
func (m *MockGlueAPI) UpdateUserDefinedFunctionWithContext(arg0 aws.Context, arg1 *glue.UpdateUserDefinedFunctionInput, arg2 ...request.Option) (*glue.UpdateUserDefinedFunctionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserDefinedFunctionWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateUserDefinedFunctionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDefinedFunctionWithContext indicates an expected call of UpdateUserDefinedFunctionWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateUserDefinedFunctionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDefinedFunctionWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateUserDefinedFunctionWithContext), varargs...)
}

// UpdateWorkflow mocks base method.
func (m *MockGlueAPI) UpdateWorkflow(arg0 *glue.UpdateWorkflowInput) (*glue.UpdateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflow", arg0)
	ret0, _ := ret[0].(*glue.UpdateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflow indicates an expected call of UpdateWorkflow.
func (mr *MockGlueAPIMockRecorder) UpdateWorkflow(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflow", reflect.TypeOf((*MockGlueAPI)(nil).UpdateWorkflow), arg0)
}

// UpdateWorkflowRequest mocks base method.
func (m *MockGlueAPI) UpdateWorkflowRequest(arg0 *glue.UpdateWorkflowInput) (*request.Request, *glue.UpdateWorkflowOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*glue.UpdateWorkflowOutput)
	return ret0, ret1
}

// UpdateWorkflowRequest indicates an expected call of UpdateWorkflowRequest.
func (mr *MockGlueAPIMockRecorder) UpdateWorkflowRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowRequest", reflect.TypeOf((*MockGlueAPI)(nil).UpdateWorkflowRequest), arg0)
}

// UpdateWorkflowWithContext mocks base method.
func (m *MockGlueAPI) UpdateWorkflowWithContext(arg0 aws.Context, arg1 *glue.UpdateWorkflowInput, arg2 ...request.Option) (*glue.UpdateWorkflowOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkflowWithContext", varargs...)
	ret0, _ := ret[0].(*glue.UpdateWorkflowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowWithContext indicates an expected call of UpdateWorkflowWithContext.
func (mr *MockGlueAPIMockRecorder) UpdateWorkflowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowWithContext", reflect.TypeOf((*MockGlueAPI)(nil).UpdateWorkflowWithContext), varargs...)
}
