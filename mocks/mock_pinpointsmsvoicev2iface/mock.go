// Code generated by MockGen. DO NOT EDIT.
// Source: /home/runner/go/pkg/mod/github.com/aws/aws-sdk-go@v1.55.5/service/pinpointsmsvoicev2/pinpointsmsvoicev2iface/interface.go

// Package mock_pinpointsmsvoicev2iface is a generated GoMock package.
package mock_pinpointsmsvoicev2iface

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws" //nolint:staticcheck
	request "github.com/aws/aws-sdk-go/aws/request" //nolint:staticcheck
	pinpointsmsvoicev2 "github.com/aws/aws-sdk-go/service/pinpointsmsvoicev2" //nolint:staticcheck
	gomock "github.com/golang/mock/gomock"
)

// MockPinpointSMSVoiceV2API is a mock of PinpointSMSVoiceV2API interface.
type MockPinpointSMSVoiceV2API struct {
	ctrl     *gomock.Controller
	recorder *MockPinpointSMSVoiceV2APIMockRecorder
}

// MockPinpointSMSVoiceV2APIMockRecorder is the mock recorder for MockPinpointSMSVoiceV2API.
type MockPinpointSMSVoiceV2APIMockRecorder struct {
	mock *MockPinpointSMSVoiceV2API
}

// NewMockPinpointSMSVoiceV2API creates a new mock instance.
func NewMockPinpointSMSVoiceV2API(ctrl *gomock.Controller) *MockPinpointSMSVoiceV2API {
	mock := &MockPinpointSMSVoiceV2API{ctrl: ctrl}
	mock.recorder = &MockPinpointSMSVoiceV2APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinpointSMSVoiceV2API) EXPECT() *MockPinpointSMSVoiceV2APIMockRecorder {
	return m.recorder
}

// AssociateOriginationIdentity mocks base method.
func (m *MockPinpointSMSVoiceV2API) AssociateOriginationIdentity(arg0 *pinpointsmsvoicev2.AssociateOriginationIdentityInput) (*pinpointsmsvoicev2.AssociateOriginationIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateOriginationIdentity", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.AssociateOriginationIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateOriginationIdentity indicates an expected call of AssociateOriginationIdentity.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) AssociateOriginationIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateOriginationIdentity", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).AssociateOriginationIdentity), arg0)
}

// AssociateOriginationIdentityRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) AssociateOriginationIdentityRequest(arg0 *pinpointsmsvoicev2.AssociateOriginationIdentityInput) (*request.Request, *pinpointsmsvoicev2.AssociateOriginationIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateOriginationIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.AssociateOriginationIdentityOutput)
	return ret0, ret1
}

// AssociateOriginationIdentityRequest indicates an expected call of AssociateOriginationIdentityRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) AssociateOriginationIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateOriginationIdentityRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).AssociateOriginationIdentityRequest), arg0)
}

// AssociateOriginationIdentityWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) AssociateOriginationIdentityWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.AssociateOriginationIdentityInput, arg2 ...request.Option) (*pinpointsmsvoicev2.AssociateOriginationIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateOriginationIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.AssociateOriginationIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateOriginationIdentityWithContext indicates an expected call of AssociateOriginationIdentityWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) AssociateOriginationIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateOriginationIdentityWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).AssociateOriginationIdentityWithContext), varargs...)
}

// AssociateProtectConfiguration mocks base method.
func (m *MockPinpointSMSVoiceV2API) AssociateProtectConfiguration(arg0 *pinpointsmsvoicev2.AssociateProtectConfigurationInput) (*pinpointsmsvoicev2.AssociateProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateProtectConfiguration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.AssociateProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateProtectConfiguration indicates an expected call of AssociateProtectConfiguration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) AssociateProtectConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProtectConfiguration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).AssociateProtectConfiguration), arg0)
}

// AssociateProtectConfigurationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) AssociateProtectConfigurationRequest(arg0 *pinpointsmsvoicev2.AssociateProtectConfigurationInput) (*request.Request, *pinpointsmsvoicev2.AssociateProtectConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateProtectConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.AssociateProtectConfigurationOutput)
	return ret0, ret1
}

// AssociateProtectConfigurationRequest indicates an expected call of AssociateProtectConfigurationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) AssociateProtectConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProtectConfigurationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).AssociateProtectConfigurationRequest), arg0)
}

// AssociateProtectConfigurationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) AssociateProtectConfigurationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.AssociateProtectConfigurationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.AssociateProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssociateProtectConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.AssociateProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateProtectConfigurationWithContext indicates an expected call of AssociateProtectConfigurationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) AssociateProtectConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateProtectConfigurationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).AssociateProtectConfigurationWithContext), varargs...)
}

// CreateConfigurationSet mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateConfigurationSet(arg0 *pinpointsmsvoicev2.CreateConfigurationSetInput) (*pinpointsmsvoicev2.CreateConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSet", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSet indicates an expected call of CreateConfigurationSet.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSet", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateConfigurationSet), arg0)
}

// CreateConfigurationSetRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateConfigurationSetRequest(arg0 *pinpointsmsvoicev2.CreateConfigurationSetInput) (*request.Request, *pinpointsmsvoicev2.CreateConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateConfigurationSetOutput)
	return ret0, ret1
}

// CreateConfigurationSetRequest indicates an expected call of CreateConfigurationSetRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateConfigurationSetRequest), arg0)
}

// CreateConfigurationSetWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateConfigurationSetWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateConfigurationSetInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigurationSetWithContext indicates an expected call of CreateConfigurationSetWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigurationSetWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateConfigurationSetWithContext), varargs...)
}

// CreateEventDestination mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateEventDestination(arg0 *pinpointsmsvoicev2.CreateEventDestinationInput) (*pinpointsmsvoicev2.CreateEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventDestination", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventDestination indicates an expected call of CreateEventDestination.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventDestination", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateEventDestination), arg0)
}

// CreateEventDestinationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateEventDestinationRequest(arg0 *pinpointsmsvoicev2.CreateEventDestinationInput) (*request.Request, *pinpointsmsvoicev2.CreateEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateEventDestinationOutput)
	return ret0, ret1
}

// CreateEventDestinationRequest indicates an expected call of CreateEventDestinationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventDestinationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateEventDestinationRequest), arg0)
}

// CreateEventDestinationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateEventDestinationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateEventDestinationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventDestinationWithContext indicates an expected call of CreateEventDestinationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventDestinationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateEventDestinationWithContext), varargs...)
}

// CreateOptOutList mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateOptOutList(arg0 *pinpointsmsvoicev2.CreateOptOutListInput) (*pinpointsmsvoicev2.CreateOptOutListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOptOutList", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateOptOutListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOptOutList indicates an expected call of CreateOptOutList.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateOptOutList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOptOutList", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateOptOutList), arg0)
}

// CreateOptOutListRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateOptOutListRequest(arg0 *pinpointsmsvoicev2.CreateOptOutListInput) (*request.Request, *pinpointsmsvoicev2.CreateOptOutListOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOptOutListRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateOptOutListOutput)
	return ret0, ret1
}

// CreateOptOutListRequest indicates an expected call of CreateOptOutListRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateOptOutListRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOptOutListRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateOptOutListRequest), arg0)
}

// CreateOptOutListWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateOptOutListWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateOptOutListInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateOptOutListOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOptOutListWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateOptOutListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOptOutListWithContext indicates an expected call of CreateOptOutListWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateOptOutListWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOptOutListWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateOptOutListWithContext), varargs...)
}

// CreatePool mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreatePool(arg0 *pinpointsmsvoicev2.CreatePoolInput) (*pinpointsmsvoicev2.CreatePoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePool", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreatePoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePool indicates an expected call of CreatePool.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreatePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePool", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreatePool), arg0)
}

// CreatePoolRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreatePoolRequest(arg0 *pinpointsmsvoicev2.CreatePoolInput) (*request.Request, *pinpointsmsvoicev2.CreatePoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreatePoolOutput)
	return ret0, ret1
}

// CreatePoolRequest indicates an expected call of CreatePoolRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreatePoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoolRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreatePoolRequest), arg0)
}

// CreatePoolWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreatePoolWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreatePoolInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreatePoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePoolWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreatePoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePoolWithContext indicates an expected call of CreatePoolWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreatePoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoolWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreatePoolWithContext), varargs...)
}

// CreateProtectConfiguration mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateProtectConfiguration(arg0 *pinpointsmsvoicev2.CreateProtectConfigurationInput) (*pinpointsmsvoicev2.CreateProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProtectConfiguration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProtectConfiguration indicates an expected call of CreateProtectConfiguration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateProtectConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProtectConfiguration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateProtectConfiguration), arg0)
}

// CreateProtectConfigurationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateProtectConfigurationRequest(arg0 *pinpointsmsvoicev2.CreateProtectConfigurationInput) (*request.Request, *pinpointsmsvoicev2.CreateProtectConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProtectConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateProtectConfigurationOutput)
	return ret0, ret1
}

// CreateProtectConfigurationRequest indicates an expected call of CreateProtectConfigurationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateProtectConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProtectConfigurationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateProtectConfigurationRequest), arg0)
}

// CreateProtectConfigurationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateProtectConfigurationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateProtectConfigurationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProtectConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProtectConfigurationWithContext indicates an expected call of CreateProtectConfigurationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateProtectConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProtectConfigurationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateProtectConfigurationWithContext), varargs...)
}

// CreateRegistration mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistration(arg0 *pinpointsmsvoicev2.CreateRegistrationInput) (*pinpointsmsvoicev2.CreateRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistration indicates an expected call of CreateRegistration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistration), arg0)
}

// CreateRegistrationAssociation mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationAssociation(arg0 *pinpointsmsvoicev2.CreateRegistrationAssociationInput) (*pinpointsmsvoicev2.CreateRegistrationAssociationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationAssociation", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateRegistrationAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationAssociation indicates an expected call of CreateRegistrationAssociation.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationAssociation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationAssociation", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationAssociation), arg0)
}

// CreateRegistrationAssociationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationAssociationRequest(arg0 *pinpointsmsvoicev2.CreateRegistrationAssociationInput) (*request.Request, *pinpointsmsvoicev2.CreateRegistrationAssociationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationAssociationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateRegistrationAssociationOutput)
	return ret0, ret1
}

// CreateRegistrationAssociationRequest indicates an expected call of CreateRegistrationAssociationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationAssociationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationAssociationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationAssociationRequest), arg0)
}

// CreateRegistrationAssociationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationAssociationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateRegistrationAssociationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateRegistrationAssociationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegistrationAssociationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateRegistrationAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationAssociationWithContext indicates an expected call of CreateRegistrationAssociationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationAssociationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationAssociationWithContext), varargs...)
}

// CreateRegistrationAttachment mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationAttachment(arg0 *pinpointsmsvoicev2.CreateRegistrationAttachmentInput) (*pinpointsmsvoicev2.CreateRegistrationAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationAttachment", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateRegistrationAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationAttachment indicates an expected call of CreateRegistrationAttachment.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationAttachment", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationAttachment), arg0)
}

// CreateRegistrationAttachmentRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationAttachmentRequest(arg0 *pinpointsmsvoicev2.CreateRegistrationAttachmentInput) (*request.Request, *pinpointsmsvoicev2.CreateRegistrationAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateRegistrationAttachmentOutput)
	return ret0, ret1
}

// CreateRegistrationAttachmentRequest indicates an expected call of CreateRegistrationAttachmentRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationAttachmentRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationAttachmentRequest), arg0)
}

// CreateRegistrationAttachmentWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationAttachmentWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateRegistrationAttachmentInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateRegistrationAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegistrationAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateRegistrationAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationAttachmentWithContext indicates an expected call of CreateRegistrationAttachmentWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationAttachmentWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationAttachmentWithContext), varargs...)
}

// CreateRegistrationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationRequest(arg0 *pinpointsmsvoicev2.CreateRegistrationInput) (*request.Request, *pinpointsmsvoicev2.CreateRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateRegistrationOutput)
	return ret0, ret1
}

// CreateRegistrationRequest indicates an expected call of CreateRegistrationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationRequest), arg0)
}

// CreateRegistrationVersion mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationVersion(arg0 *pinpointsmsvoicev2.CreateRegistrationVersionInput) (*pinpointsmsvoicev2.CreateRegistrationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationVersion", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateRegistrationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationVersion indicates an expected call of CreateRegistrationVersion.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationVersion", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationVersion), arg0)
}

// CreateRegistrationVersionRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationVersionRequest(arg0 *pinpointsmsvoicev2.CreateRegistrationVersionInput) (*request.Request, *pinpointsmsvoicev2.CreateRegistrationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateRegistrationVersionOutput)
	return ret0, ret1
}

// CreateRegistrationVersionRequest indicates an expected call of CreateRegistrationVersionRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationVersionRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationVersionRequest), arg0)
}

// CreateRegistrationVersionWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationVersionWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateRegistrationVersionInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateRegistrationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegistrationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateRegistrationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationVersionWithContext indicates an expected call of CreateRegistrationVersionWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationVersionWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationVersionWithContext), varargs...)
}

// CreateRegistrationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateRegistrationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateRegistrationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationWithContext indicates an expected call of CreateRegistrationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateRegistrationWithContext), varargs...)
}

// CreateVerifiedDestinationNumber mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateVerifiedDestinationNumber(arg0 *pinpointsmsvoicev2.CreateVerifiedDestinationNumberInput) (*pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifiedDestinationNumber", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifiedDestinationNumber indicates an expected call of CreateVerifiedDestinationNumber.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateVerifiedDestinationNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifiedDestinationNumber", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateVerifiedDestinationNumber), arg0)
}

// CreateVerifiedDestinationNumberRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateVerifiedDestinationNumberRequest(arg0 *pinpointsmsvoicev2.CreateVerifiedDestinationNumberInput) (*request.Request, *pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifiedDestinationNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput)
	return ret0, ret1
}

// CreateVerifiedDestinationNumberRequest indicates an expected call of CreateVerifiedDestinationNumberRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateVerifiedDestinationNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifiedDestinationNumberRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateVerifiedDestinationNumberRequest), arg0)
}

// CreateVerifiedDestinationNumberWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) CreateVerifiedDestinationNumberWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.CreateVerifiedDestinationNumberInput, arg2 ...request.Option) (*pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVerifiedDestinationNumberWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.CreateVerifiedDestinationNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifiedDestinationNumberWithContext indicates an expected call of CreateVerifiedDestinationNumberWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) CreateVerifiedDestinationNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifiedDestinationNumberWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).CreateVerifiedDestinationNumberWithContext), varargs...)
}

// DeleteAccountDefaultProtectConfiguration mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteAccountDefaultProtectConfiguration(arg0 *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationInput) (*pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountDefaultProtectConfiguration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountDefaultProtectConfiguration indicates an expected call of DeleteAccountDefaultProtectConfiguration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteAccountDefaultProtectConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountDefaultProtectConfiguration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteAccountDefaultProtectConfiguration), arg0)
}

// DeleteAccountDefaultProtectConfigurationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteAccountDefaultProtectConfigurationRequest(arg0 *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationInput) (*request.Request, *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountDefaultProtectConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput)
	return ret0, ret1
}

// DeleteAccountDefaultProtectConfigurationRequest indicates an expected call of DeleteAccountDefaultProtectConfigurationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteAccountDefaultProtectConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountDefaultProtectConfigurationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteAccountDefaultProtectConfigurationRequest), arg0)
}

// DeleteAccountDefaultProtectConfigurationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteAccountDefaultProtectConfigurationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccountDefaultProtectConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteAccountDefaultProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccountDefaultProtectConfigurationWithContext indicates an expected call of DeleteAccountDefaultProtectConfigurationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteAccountDefaultProtectConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountDefaultProtectConfigurationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteAccountDefaultProtectConfigurationWithContext), varargs...)
}

// DeleteConfigurationSet mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteConfigurationSet(arg0 *pinpointsmsvoicev2.DeleteConfigurationSetInput) (*pinpointsmsvoicev2.DeleteConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSet", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSet indicates an expected call of DeleteConfigurationSet.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteConfigurationSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSet", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteConfigurationSet), arg0)
}

// DeleteConfigurationSetRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteConfigurationSetRequest(arg0 *pinpointsmsvoicev2.DeleteConfigurationSetInput) (*request.Request, *pinpointsmsvoicev2.DeleteConfigurationSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfigurationSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteConfigurationSetOutput)
	return ret0, ret1
}

// DeleteConfigurationSetRequest indicates an expected call of DeleteConfigurationSetRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteConfigurationSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteConfigurationSetRequest), arg0)
}

// DeleteConfigurationSetWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteConfigurationSetWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteConfigurationSetInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteConfigurationSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigurationSetWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteConfigurationSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigurationSetWithContext indicates an expected call of DeleteConfigurationSetWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteConfigurationSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigurationSetWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteConfigurationSetWithContext), varargs...)
}

// DeleteDefaultMessageType mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteDefaultMessageType(arg0 *pinpointsmsvoicev2.DeleteDefaultMessageTypeInput) (*pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDefaultMessageType", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDefaultMessageType indicates an expected call of DeleteDefaultMessageType.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteDefaultMessageType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultMessageType", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteDefaultMessageType), arg0)
}

// DeleteDefaultMessageTypeRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteDefaultMessageTypeRequest(arg0 *pinpointsmsvoicev2.DeleteDefaultMessageTypeInput) (*request.Request, *pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDefaultMessageTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput)
	return ret0, ret1
}

// DeleteDefaultMessageTypeRequest indicates an expected call of DeleteDefaultMessageTypeRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteDefaultMessageTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultMessageTypeRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteDefaultMessageTypeRequest), arg0)
}

// DeleteDefaultMessageTypeWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteDefaultMessageTypeWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteDefaultMessageTypeInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDefaultMessageTypeWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteDefaultMessageTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDefaultMessageTypeWithContext indicates an expected call of DeleteDefaultMessageTypeWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteDefaultMessageTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultMessageTypeWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteDefaultMessageTypeWithContext), varargs...)
}

// DeleteDefaultSenderId mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteDefaultSenderId(arg0 *pinpointsmsvoicev2.DeleteDefaultSenderIdInput) (*pinpointsmsvoicev2.DeleteDefaultSenderIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDefaultSenderId", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteDefaultSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDefaultSenderId indicates an expected call of DeleteDefaultSenderId.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteDefaultSenderId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultSenderId", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteDefaultSenderId), arg0)
}

// DeleteDefaultSenderIdRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteDefaultSenderIdRequest(arg0 *pinpointsmsvoicev2.DeleteDefaultSenderIdInput) (*request.Request, *pinpointsmsvoicev2.DeleteDefaultSenderIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDefaultSenderIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteDefaultSenderIdOutput)
	return ret0, ret1
}

// DeleteDefaultSenderIdRequest indicates an expected call of DeleteDefaultSenderIdRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteDefaultSenderIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultSenderIdRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteDefaultSenderIdRequest), arg0)
}

// DeleteDefaultSenderIdWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteDefaultSenderIdWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteDefaultSenderIdInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteDefaultSenderIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDefaultSenderIdWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteDefaultSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDefaultSenderIdWithContext indicates an expected call of DeleteDefaultSenderIdWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteDefaultSenderIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDefaultSenderIdWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteDefaultSenderIdWithContext), varargs...)
}

// DeleteEventDestination mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteEventDestination(arg0 *pinpointsmsvoicev2.DeleteEventDestinationInput) (*pinpointsmsvoicev2.DeleteEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventDestination", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventDestination indicates an expected call of DeleteEventDestination.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventDestination", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteEventDestination), arg0)
}

// DeleteEventDestinationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteEventDestinationRequest(arg0 *pinpointsmsvoicev2.DeleteEventDestinationInput) (*request.Request, *pinpointsmsvoicev2.DeleteEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteEventDestinationOutput)
	return ret0, ret1
}

// DeleteEventDestinationRequest indicates an expected call of DeleteEventDestinationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventDestinationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteEventDestinationRequest), arg0)
}

// DeleteEventDestinationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteEventDestinationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteEventDestinationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEventDestinationWithContext indicates an expected call of DeleteEventDestinationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventDestinationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteEventDestinationWithContext), varargs...)
}

// DeleteKeyword mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteKeyword(arg0 *pinpointsmsvoicev2.DeleteKeywordInput) (*pinpointsmsvoicev2.DeleteKeywordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyword", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteKeywordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyword indicates an expected call of DeleteKeyword.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteKeyword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyword", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteKeyword), arg0)
}

// DeleteKeywordRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteKeywordRequest(arg0 *pinpointsmsvoicev2.DeleteKeywordInput) (*request.Request, *pinpointsmsvoicev2.DeleteKeywordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeywordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteKeywordOutput)
	return ret0, ret1
}

// DeleteKeywordRequest indicates an expected call of DeleteKeywordRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteKeywordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeywordRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteKeywordRequest), arg0)
}

// DeleteKeywordWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteKeywordWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteKeywordInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteKeywordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeywordWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteKeywordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeywordWithContext indicates an expected call of DeleteKeywordWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteKeywordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeywordWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteKeywordWithContext), varargs...)
}

// DeleteMediaMessageSpendLimitOverride mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteMediaMessageSpendLimitOverride(arg0 *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideInput) (*pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMediaMessageSpendLimitOverride", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMediaMessageSpendLimitOverride indicates an expected call of DeleteMediaMessageSpendLimitOverride.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteMediaMessageSpendLimitOverride(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMediaMessageSpendLimitOverride", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteMediaMessageSpendLimitOverride), arg0)
}

// DeleteMediaMessageSpendLimitOverrideRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteMediaMessageSpendLimitOverrideRequest(arg0 *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideInput) (*request.Request, *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMediaMessageSpendLimitOverrideRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput)
	return ret0, ret1
}

// DeleteMediaMessageSpendLimitOverrideRequest indicates an expected call of DeleteMediaMessageSpendLimitOverrideRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteMediaMessageSpendLimitOverrideRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMediaMessageSpendLimitOverrideRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteMediaMessageSpendLimitOverrideRequest), arg0)
}

// DeleteMediaMessageSpendLimitOverrideWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteMediaMessageSpendLimitOverrideWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMediaMessageSpendLimitOverrideWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteMediaMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMediaMessageSpendLimitOverrideWithContext indicates an expected call of DeleteMediaMessageSpendLimitOverrideWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteMediaMessageSpendLimitOverrideWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMediaMessageSpendLimitOverrideWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteMediaMessageSpendLimitOverrideWithContext), varargs...)
}

// DeleteOptOutList mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteOptOutList(arg0 *pinpointsmsvoicev2.DeleteOptOutListInput) (*pinpointsmsvoicev2.DeleteOptOutListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOptOutList", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteOptOutListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOptOutList indicates an expected call of DeleteOptOutList.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteOptOutList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOptOutList", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteOptOutList), arg0)
}

// DeleteOptOutListRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteOptOutListRequest(arg0 *pinpointsmsvoicev2.DeleteOptOutListInput) (*request.Request, *pinpointsmsvoicev2.DeleteOptOutListOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOptOutListRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteOptOutListOutput)
	return ret0, ret1
}

// DeleteOptOutListRequest indicates an expected call of DeleteOptOutListRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteOptOutListRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOptOutListRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteOptOutListRequest), arg0)
}

// DeleteOptOutListWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteOptOutListWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteOptOutListInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteOptOutListOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOptOutListWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteOptOutListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOptOutListWithContext indicates an expected call of DeleteOptOutListWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteOptOutListWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOptOutListWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteOptOutListWithContext), varargs...)
}

// DeleteOptedOutNumber mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteOptedOutNumber(arg0 *pinpointsmsvoicev2.DeleteOptedOutNumberInput) (*pinpointsmsvoicev2.DeleteOptedOutNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOptedOutNumber", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteOptedOutNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOptedOutNumber indicates an expected call of DeleteOptedOutNumber.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteOptedOutNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOptedOutNumber", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteOptedOutNumber), arg0)
}

// DeleteOptedOutNumberRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteOptedOutNumberRequest(arg0 *pinpointsmsvoicev2.DeleteOptedOutNumberInput) (*request.Request, *pinpointsmsvoicev2.DeleteOptedOutNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOptedOutNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteOptedOutNumberOutput)
	return ret0, ret1
}

// DeleteOptedOutNumberRequest indicates an expected call of DeleteOptedOutNumberRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteOptedOutNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOptedOutNumberRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteOptedOutNumberRequest), arg0)
}

// DeleteOptedOutNumberWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteOptedOutNumberWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteOptedOutNumberInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteOptedOutNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOptedOutNumberWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteOptedOutNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOptedOutNumberWithContext indicates an expected call of DeleteOptedOutNumberWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteOptedOutNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOptedOutNumberWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteOptedOutNumberWithContext), varargs...)
}

// DeletePool mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeletePool(arg0 *pinpointsmsvoicev2.DeletePoolInput) (*pinpointsmsvoicev2.DeletePoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePool", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeletePoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePool indicates an expected call of DeletePool.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeletePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePool", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeletePool), arg0)
}

// DeletePoolRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeletePoolRequest(arg0 *pinpointsmsvoicev2.DeletePoolInput) (*request.Request, *pinpointsmsvoicev2.DeletePoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeletePoolOutput)
	return ret0, ret1
}

// DeletePoolRequest indicates an expected call of DeletePoolRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeletePoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoolRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeletePoolRequest), arg0)
}

// DeletePoolWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeletePoolWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeletePoolInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeletePoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePoolWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeletePoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePoolWithContext indicates an expected call of DeletePoolWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeletePoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoolWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeletePoolWithContext), varargs...)
}

// DeleteProtectConfiguration mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteProtectConfiguration(arg0 *pinpointsmsvoicev2.DeleteProtectConfigurationInput) (*pinpointsmsvoicev2.DeleteProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProtectConfiguration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProtectConfiguration indicates an expected call of DeleteProtectConfiguration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteProtectConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProtectConfiguration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteProtectConfiguration), arg0)
}

// DeleteProtectConfigurationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteProtectConfigurationRequest(arg0 *pinpointsmsvoicev2.DeleteProtectConfigurationInput) (*request.Request, *pinpointsmsvoicev2.DeleteProtectConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProtectConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteProtectConfigurationOutput)
	return ret0, ret1
}

// DeleteProtectConfigurationRequest indicates an expected call of DeleteProtectConfigurationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteProtectConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProtectConfigurationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteProtectConfigurationRequest), arg0)
}

// DeleteProtectConfigurationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteProtectConfigurationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteProtectConfigurationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProtectConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProtectConfigurationWithContext indicates an expected call of DeleteProtectConfigurationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteProtectConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProtectConfigurationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteProtectConfigurationWithContext), varargs...)
}

// DeleteRegistration mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistration(arg0 *pinpointsmsvoicev2.DeleteRegistrationInput) (*pinpointsmsvoicev2.DeleteRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistration indicates an expected call of DeleteRegistration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistration), arg0)
}

// DeleteRegistrationAttachment mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistrationAttachment(arg0 *pinpointsmsvoicev2.DeleteRegistrationAttachmentInput) (*pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistrationAttachment", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationAttachment indicates an expected call of DeleteRegistrationAttachment.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistrationAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationAttachment", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistrationAttachment), arg0)
}

// DeleteRegistrationAttachmentRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistrationAttachmentRequest(arg0 *pinpointsmsvoicev2.DeleteRegistrationAttachmentInput) (*request.Request, *pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistrationAttachmentRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput)
	return ret0, ret1
}

// DeleteRegistrationAttachmentRequest indicates an expected call of DeleteRegistrationAttachmentRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistrationAttachmentRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationAttachmentRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistrationAttachmentRequest), arg0)
}

// DeleteRegistrationAttachmentWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistrationAttachmentWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteRegistrationAttachmentInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistrationAttachmentWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteRegistrationAttachmentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationAttachmentWithContext indicates an expected call of DeleteRegistrationAttachmentWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistrationAttachmentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationAttachmentWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistrationAttachmentWithContext), varargs...)
}

// DeleteRegistrationFieldValue mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistrationFieldValue(arg0 *pinpointsmsvoicev2.DeleteRegistrationFieldValueInput) (*pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistrationFieldValue", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationFieldValue indicates an expected call of DeleteRegistrationFieldValue.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistrationFieldValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationFieldValue", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistrationFieldValue), arg0)
}

// DeleteRegistrationFieldValueRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistrationFieldValueRequest(arg0 *pinpointsmsvoicev2.DeleteRegistrationFieldValueInput) (*request.Request, *pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistrationFieldValueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput)
	return ret0, ret1
}

// DeleteRegistrationFieldValueRequest indicates an expected call of DeleteRegistrationFieldValueRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistrationFieldValueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationFieldValueRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistrationFieldValueRequest), arg0)
}

// DeleteRegistrationFieldValueWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistrationFieldValueWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteRegistrationFieldValueInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistrationFieldValueWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteRegistrationFieldValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationFieldValueWithContext indicates an expected call of DeleteRegistrationFieldValueWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistrationFieldValueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationFieldValueWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistrationFieldValueWithContext), varargs...)
}

// DeleteRegistrationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistrationRequest(arg0 *pinpointsmsvoicev2.DeleteRegistrationInput) (*request.Request, *pinpointsmsvoicev2.DeleteRegistrationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistrationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteRegistrationOutput)
	return ret0, ret1
}

// DeleteRegistrationRequest indicates an expected call of DeleteRegistrationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistrationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistrationRequest), arg0)
}

// DeleteRegistrationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteRegistrationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteRegistrationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteRegistrationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRegistrationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationWithContext indicates an expected call of DeleteRegistrationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteRegistrationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteRegistrationWithContext), varargs...)
}

// DeleteTextMessageSpendLimitOverride mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteTextMessageSpendLimitOverride(arg0 *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideInput) (*pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTextMessageSpendLimitOverride", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTextMessageSpendLimitOverride indicates an expected call of DeleteTextMessageSpendLimitOverride.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteTextMessageSpendLimitOverride(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextMessageSpendLimitOverride", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteTextMessageSpendLimitOverride), arg0)
}

// DeleteTextMessageSpendLimitOverrideRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteTextMessageSpendLimitOverrideRequest(arg0 *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideInput) (*request.Request, *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTextMessageSpendLimitOverrideRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput)
	return ret0, ret1
}

// DeleteTextMessageSpendLimitOverrideRequest indicates an expected call of DeleteTextMessageSpendLimitOverrideRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteTextMessageSpendLimitOverrideRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextMessageSpendLimitOverrideRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteTextMessageSpendLimitOverrideRequest), arg0)
}

// DeleteTextMessageSpendLimitOverrideWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteTextMessageSpendLimitOverrideWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTextMessageSpendLimitOverrideWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteTextMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTextMessageSpendLimitOverrideWithContext indicates an expected call of DeleteTextMessageSpendLimitOverrideWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteTextMessageSpendLimitOverrideWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTextMessageSpendLimitOverrideWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteTextMessageSpendLimitOverrideWithContext), varargs...)
}

// DeleteVerifiedDestinationNumber mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteVerifiedDestinationNumber(arg0 *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberInput) (*pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVerifiedDestinationNumber", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVerifiedDestinationNumber indicates an expected call of DeleteVerifiedDestinationNumber.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteVerifiedDestinationNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerifiedDestinationNumber", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteVerifiedDestinationNumber), arg0)
}

// DeleteVerifiedDestinationNumberRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteVerifiedDestinationNumberRequest(arg0 *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberInput) (*request.Request, *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVerifiedDestinationNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput)
	return ret0, ret1
}

// DeleteVerifiedDestinationNumberRequest indicates an expected call of DeleteVerifiedDestinationNumberRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteVerifiedDestinationNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerifiedDestinationNumberRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteVerifiedDestinationNumberRequest), arg0)
}

// DeleteVerifiedDestinationNumberWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteVerifiedDestinationNumberWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteVerifiedDestinationNumberInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVerifiedDestinationNumberWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteVerifiedDestinationNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVerifiedDestinationNumberWithContext indicates an expected call of DeleteVerifiedDestinationNumberWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteVerifiedDestinationNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerifiedDestinationNumberWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteVerifiedDestinationNumberWithContext), varargs...)
}

// DeleteVoiceMessageSpendLimitOverride mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteVoiceMessageSpendLimitOverride(arg0 *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideInput) (*pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceMessageSpendLimitOverride", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceMessageSpendLimitOverride indicates an expected call of DeleteVoiceMessageSpendLimitOverride.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteVoiceMessageSpendLimitOverride(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceMessageSpendLimitOverride", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteVoiceMessageSpendLimitOverride), arg0)
}

// DeleteVoiceMessageSpendLimitOverrideRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteVoiceMessageSpendLimitOverrideRequest(arg0 *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideInput) (*request.Request, *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoiceMessageSpendLimitOverrideRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput)
	return ret0, ret1
}

// DeleteVoiceMessageSpendLimitOverrideRequest indicates an expected call of DeleteVoiceMessageSpendLimitOverrideRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteVoiceMessageSpendLimitOverrideRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceMessageSpendLimitOverrideRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteVoiceMessageSpendLimitOverrideRequest), arg0)
}

// DeleteVoiceMessageSpendLimitOverrideWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DeleteVoiceMessageSpendLimitOverrideWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVoiceMessageSpendLimitOverrideWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DeleteVoiceMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVoiceMessageSpendLimitOverrideWithContext indicates an expected call of DeleteVoiceMessageSpendLimitOverrideWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DeleteVoiceMessageSpendLimitOverrideWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoiceMessageSpendLimitOverrideWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DeleteVoiceMessageSpendLimitOverrideWithContext), varargs...)
}

// DescribeAccountAttributes mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountAttributes(arg0 *pinpointsmsvoicev2.DescribeAccountAttributesInput) (*pinpointsmsvoicev2.DescribeAccountAttributesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAttributes", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAttributes indicates an expected call of DescribeAccountAttributes.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributes", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountAttributes), arg0)
}

// DescribeAccountAttributesPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountAttributesPages(arg0 *pinpointsmsvoicev2.DescribeAccountAttributesInput, arg1 func(*pinpointsmsvoicev2.DescribeAccountAttributesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAttributesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAccountAttributesPages indicates an expected call of DescribeAccountAttributesPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountAttributesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributesPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountAttributesPages), arg0, arg1)
}

// DescribeAccountAttributesPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountAttributesPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeAccountAttributesInput, arg2 func(*pinpointsmsvoicev2.DescribeAccountAttributesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAttributesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAccountAttributesPagesWithContext indicates an expected call of DescribeAccountAttributesPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountAttributesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributesPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountAttributesPagesWithContext), varargs...)
}

// DescribeAccountAttributesRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountAttributesRequest(arg0 *pinpointsmsvoicev2.DescribeAccountAttributesInput) (*request.Request, *pinpointsmsvoicev2.DescribeAccountAttributesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountAttributesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeAccountAttributesOutput)
	return ret0, ret1
}

// DescribeAccountAttributesRequest indicates an expected call of DescribeAccountAttributesRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountAttributesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributesRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountAttributesRequest), arg0)
}

// DescribeAccountAttributesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountAttributesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeAccountAttributesInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeAccountAttributesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountAttributesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeAccountAttributesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountAttributesWithContext indicates an expected call of DescribeAccountAttributesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountAttributesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountAttributesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountAttributesWithContext), varargs...)
}

// DescribeAccountLimits mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountLimits(arg0 *pinpointsmsvoicev2.DescribeAccountLimitsInput) (*pinpointsmsvoicev2.DescribeAccountLimitsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountLimits", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeAccountLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountLimits indicates an expected call of DescribeAccountLimits.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimits", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountLimits), arg0)
}

// DescribeAccountLimitsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountLimitsPages(arg0 *pinpointsmsvoicev2.DescribeAccountLimitsInput, arg1 func(*pinpointsmsvoicev2.DescribeAccountLimitsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountLimitsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAccountLimitsPages indicates an expected call of DescribeAccountLimitsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountLimitsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimitsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountLimitsPages), arg0, arg1)
}

// DescribeAccountLimitsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountLimitsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeAccountLimitsInput, arg2 func(*pinpointsmsvoicev2.DescribeAccountLimitsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountLimitsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAccountLimitsPagesWithContext indicates an expected call of DescribeAccountLimitsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountLimitsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimitsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountLimitsPagesWithContext), varargs...)
}

// DescribeAccountLimitsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountLimitsRequest(arg0 *pinpointsmsvoicev2.DescribeAccountLimitsInput) (*request.Request, *pinpointsmsvoicev2.DescribeAccountLimitsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAccountLimitsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeAccountLimitsOutput)
	return ret0, ret1
}

// DescribeAccountLimitsRequest indicates an expected call of DescribeAccountLimitsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountLimitsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimitsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountLimitsRequest), arg0)
}

// DescribeAccountLimitsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeAccountLimitsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeAccountLimitsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeAccountLimitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAccountLimitsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeAccountLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAccountLimitsWithContext indicates an expected call of DescribeAccountLimitsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeAccountLimitsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAccountLimitsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeAccountLimitsWithContext), varargs...)
}

// DescribeConfigurationSets mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeConfigurationSets(arg0 *pinpointsmsvoicev2.DescribeConfigurationSetsInput) (*pinpointsmsvoicev2.DescribeConfigurationSetsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationSets", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationSets indicates an expected call of DescribeConfigurationSets.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeConfigurationSets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationSets", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeConfigurationSets), arg0)
}

// DescribeConfigurationSetsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeConfigurationSetsPages(arg0 *pinpointsmsvoicev2.DescribeConfigurationSetsInput, arg1 func(*pinpointsmsvoicev2.DescribeConfigurationSetsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationSetsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeConfigurationSetsPages indicates an expected call of DescribeConfigurationSetsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeConfigurationSetsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationSetsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeConfigurationSetsPages), arg0, arg1)
}

// DescribeConfigurationSetsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeConfigurationSetsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeConfigurationSetsInput, arg2 func(*pinpointsmsvoicev2.DescribeConfigurationSetsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationSetsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeConfigurationSetsPagesWithContext indicates an expected call of DescribeConfigurationSetsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeConfigurationSetsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationSetsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeConfigurationSetsPagesWithContext), varargs...)
}

// DescribeConfigurationSetsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeConfigurationSetsRequest(arg0 *pinpointsmsvoicev2.DescribeConfigurationSetsInput) (*request.Request, *pinpointsmsvoicev2.DescribeConfigurationSetsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeConfigurationSetsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeConfigurationSetsOutput)
	return ret0, ret1
}

// DescribeConfigurationSetsRequest indicates an expected call of DescribeConfigurationSetsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeConfigurationSetsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationSetsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeConfigurationSetsRequest), arg0)
}

// DescribeConfigurationSetsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeConfigurationSetsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeConfigurationSetsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeConfigurationSetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeConfigurationSetsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeConfigurationSetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeConfigurationSetsWithContext indicates an expected call of DescribeConfigurationSetsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeConfigurationSetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeConfigurationSetsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeConfigurationSetsWithContext), varargs...)
}

// DescribeKeywords mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeKeywords(arg0 *pinpointsmsvoicev2.DescribeKeywordsInput) (*pinpointsmsvoicev2.DescribeKeywordsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKeywords", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeKeywordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeywords indicates an expected call of DescribeKeywords.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeKeywords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeywords", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeKeywords), arg0)
}

// DescribeKeywordsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeKeywordsPages(arg0 *pinpointsmsvoicev2.DescribeKeywordsInput, arg1 func(*pinpointsmsvoicev2.DescribeKeywordsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKeywordsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeKeywordsPages indicates an expected call of DescribeKeywordsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeKeywordsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeywordsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeKeywordsPages), arg0, arg1)
}

// DescribeKeywordsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeKeywordsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeKeywordsInput, arg2 func(*pinpointsmsvoicev2.DescribeKeywordsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeKeywordsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeKeywordsPagesWithContext indicates an expected call of DescribeKeywordsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeKeywordsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeywordsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeKeywordsPagesWithContext), varargs...)
}

// DescribeKeywordsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeKeywordsRequest(arg0 *pinpointsmsvoicev2.DescribeKeywordsInput) (*request.Request, *pinpointsmsvoicev2.DescribeKeywordsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKeywordsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeKeywordsOutput)
	return ret0, ret1
}

// DescribeKeywordsRequest indicates an expected call of DescribeKeywordsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeKeywordsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeywordsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeKeywordsRequest), arg0)
}

// DescribeKeywordsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeKeywordsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeKeywordsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeKeywordsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeKeywordsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeKeywordsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeywordsWithContext indicates an expected call of DescribeKeywordsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeKeywordsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeywordsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeKeywordsWithContext), varargs...)
}

// DescribeOptOutLists mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptOutLists(arg0 *pinpointsmsvoicev2.DescribeOptOutListsInput) (*pinpointsmsvoicev2.DescribeOptOutListsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOptOutLists", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeOptOutListsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOptOutLists indicates an expected call of DescribeOptOutLists.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptOutLists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptOutLists", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptOutLists), arg0)
}

// DescribeOptOutListsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptOutListsPages(arg0 *pinpointsmsvoicev2.DescribeOptOutListsInput, arg1 func(*pinpointsmsvoicev2.DescribeOptOutListsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOptOutListsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOptOutListsPages indicates an expected call of DescribeOptOutListsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptOutListsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptOutListsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptOutListsPages), arg0, arg1)
}

// DescribeOptOutListsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptOutListsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeOptOutListsInput, arg2 func(*pinpointsmsvoicev2.DescribeOptOutListsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOptOutListsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOptOutListsPagesWithContext indicates an expected call of DescribeOptOutListsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptOutListsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptOutListsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptOutListsPagesWithContext), varargs...)
}

// DescribeOptOutListsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptOutListsRequest(arg0 *pinpointsmsvoicev2.DescribeOptOutListsInput) (*request.Request, *pinpointsmsvoicev2.DescribeOptOutListsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOptOutListsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeOptOutListsOutput)
	return ret0, ret1
}

// DescribeOptOutListsRequest indicates an expected call of DescribeOptOutListsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptOutListsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptOutListsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptOutListsRequest), arg0)
}

// DescribeOptOutListsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptOutListsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeOptOutListsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeOptOutListsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOptOutListsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeOptOutListsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOptOutListsWithContext indicates an expected call of DescribeOptOutListsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptOutListsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptOutListsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptOutListsWithContext), varargs...)
}

// DescribeOptedOutNumbers mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptedOutNumbers(arg0 *pinpointsmsvoicev2.DescribeOptedOutNumbersInput) (*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOptedOutNumbers", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOptedOutNumbers indicates an expected call of DescribeOptedOutNumbers.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptedOutNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptedOutNumbers", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptedOutNumbers), arg0)
}

// DescribeOptedOutNumbersPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptedOutNumbersPages(arg0 *pinpointsmsvoicev2.DescribeOptedOutNumbersInput, arg1 func(*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOptedOutNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOptedOutNumbersPages indicates an expected call of DescribeOptedOutNumbersPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptedOutNumbersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptedOutNumbersPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptedOutNumbersPages), arg0, arg1)
}

// DescribeOptedOutNumbersPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptedOutNumbersPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeOptedOutNumbersInput, arg2 func(*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOptedOutNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeOptedOutNumbersPagesWithContext indicates an expected call of DescribeOptedOutNumbersPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptedOutNumbersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptedOutNumbersPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptedOutNumbersPagesWithContext), varargs...)
}

// DescribeOptedOutNumbersRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptedOutNumbersRequest(arg0 *pinpointsmsvoicev2.DescribeOptedOutNumbersInput) (*request.Request, *pinpointsmsvoicev2.DescribeOptedOutNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeOptedOutNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput)
	return ret0, ret1
}

// DescribeOptedOutNumbersRequest indicates an expected call of DescribeOptedOutNumbersRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptedOutNumbersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptedOutNumbersRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptedOutNumbersRequest), arg0)
}

// DescribeOptedOutNumbersWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeOptedOutNumbersWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeOptedOutNumbersInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeOptedOutNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeOptedOutNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeOptedOutNumbersWithContext indicates an expected call of DescribeOptedOutNumbersWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeOptedOutNumbersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeOptedOutNumbersWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeOptedOutNumbersWithContext), varargs...)
}

// DescribePhoneNumbers mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePhoneNumbers(arg0 *pinpointsmsvoicev2.DescribePhoneNumbersInput) (*pinpointsmsvoicev2.DescribePhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePhoneNumbers", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribePhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePhoneNumbers indicates an expected call of DescribePhoneNumbers.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePhoneNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePhoneNumbers", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePhoneNumbers), arg0)
}

// DescribePhoneNumbersPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePhoneNumbersPages(arg0 *pinpointsmsvoicev2.DescribePhoneNumbersInput, arg1 func(*pinpointsmsvoicev2.DescribePhoneNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePhoneNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePhoneNumbersPages indicates an expected call of DescribePhoneNumbersPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePhoneNumbersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePhoneNumbersPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePhoneNumbersPages), arg0, arg1)
}

// DescribePhoneNumbersPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePhoneNumbersPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribePhoneNumbersInput, arg2 func(*pinpointsmsvoicev2.DescribePhoneNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePhoneNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePhoneNumbersPagesWithContext indicates an expected call of DescribePhoneNumbersPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePhoneNumbersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePhoneNumbersPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePhoneNumbersPagesWithContext), varargs...)
}

// DescribePhoneNumbersRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePhoneNumbersRequest(arg0 *pinpointsmsvoicev2.DescribePhoneNumbersInput) (*request.Request, *pinpointsmsvoicev2.DescribePhoneNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePhoneNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribePhoneNumbersOutput)
	return ret0, ret1
}

// DescribePhoneNumbersRequest indicates an expected call of DescribePhoneNumbersRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePhoneNumbersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePhoneNumbersRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePhoneNumbersRequest), arg0)
}

// DescribePhoneNumbersWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePhoneNumbersWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribePhoneNumbersInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribePhoneNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePhoneNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribePhoneNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePhoneNumbersWithContext indicates an expected call of DescribePhoneNumbersWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePhoneNumbersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePhoneNumbersWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePhoneNumbersWithContext), varargs...)
}

// DescribePools mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePools(arg0 *pinpointsmsvoicev2.DescribePoolsInput) (*pinpointsmsvoicev2.DescribePoolsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePools", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribePoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePools indicates an expected call of DescribePools.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePools(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePools", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePools), arg0)
}

// DescribePoolsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePoolsPages(arg0 *pinpointsmsvoicev2.DescribePoolsInput, arg1 func(*pinpointsmsvoicev2.DescribePoolsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePoolsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePoolsPages indicates an expected call of DescribePoolsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePoolsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePoolsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePoolsPages), arg0, arg1)
}

// DescribePoolsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePoolsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribePoolsInput, arg2 func(*pinpointsmsvoicev2.DescribePoolsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePoolsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribePoolsPagesWithContext indicates an expected call of DescribePoolsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePoolsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePoolsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePoolsPagesWithContext), varargs...)
}

// DescribePoolsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePoolsRequest(arg0 *pinpointsmsvoicev2.DescribePoolsInput) (*request.Request, *pinpointsmsvoicev2.DescribePoolsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePoolsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribePoolsOutput)
	return ret0, ret1
}

// DescribePoolsRequest indicates an expected call of DescribePoolsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePoolsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePoolsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePoolsRequest), arg0)
}

// DescribePoolsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribePoolsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribePoolsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribePoolsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribePoolsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribePoolsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePoolsWithContext indicates an expected call of DescribePoolsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribePoolsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePoolsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribePoolsWithContext), varargs...)
}

// DescribeProtectConfigurations mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeProtectConfigurations(arg0 *pinpointsmsvoicev2.DescribeProtectConfigurationsInput) (*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProtectConfigurations", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProtectConfigurations indicates an expected call of DescribeProtectConfigurations.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeProtectConfigurations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectConfigurations", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeProtectConfigurations), arg0)
}

// DescribeProtectConfigurationsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeProtectConfigurationsPages(arg0 *pinpointsmsvoicev2.DescribeProtectConfigurationsInput, arg1 func(*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProtectConfigurationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeProtectConfigurationsPages indicates an expected call of DescribeProtectConfigurationsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeProtectConfigurationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectConfigurationsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeProtectConfigurationsPages), arg0, arg1)
}

// DescribeProtectConfigurationsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeProtectConfigurationsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeProtectConfigurationsInput, arg2 func(*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProtectConfigurationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeProtectConfigurationsPagesWithContext indicates an expected call of DescribeProtectConfigurationsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeProtectConfigurationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectConfigurationsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeProtectConfigurationsPagesWithContext), varargs...)
}

// DescribeProtectConfigurationsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeProtectConfigurationsRequest(arg0 *pinpointsmsvoicev2.DescribeProtectConfigurationsInput) (*request.Request, *pinpointsmsvoicev2.DescribeProtectConfigurationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeProtectConfigurationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput)
	return ret0, ret1
}

// DescribeProtectConfigurationsRequest indicates an expected call of DescribeProtectConfigurationsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeProtectConfigurationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectConfigurationsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeProtectConfigurationsRequest), arg0)
}

// DescribeProtectConfigurationsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeProtectConfigurationsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeProtectConfigurationsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeProtectConfigurationsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeProtectConfigurationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeProtectConfigurationsWithContext indicates an expected call of DescribeProtectConfigurationsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeProtectConfigurationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeProtectConfigurationsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeProtectConfigurationsWithContext), varargs...)
}

// DescribeRegistrationAttachments mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationAttachments(arg0 *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput) (*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationAttachments", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationAttachments indicates an expected call of DescribeRegistrationAttachments.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationAttachments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationAttachments", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationAttachments), arg0)
}

// DescribeRegistrationAttachmentsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationAttachmentsPages(arg0 *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput, arg1 func(*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationAttachmentsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationAttachmentsPages indicates an expected call of DescribeRegistrationAttachmentsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationAttachmentsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationAttachmentsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationAttachmentsPages), arg0, arg1)
}

// DescribeRegistrationAttachmentsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationAttachmentsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput, arg2 func(*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationAttachmentsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationAttachmentsPagesWithContext indicates an expected call of DescribeRegistrationAttachmentsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationAttachmentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationAttachmentsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationAttachmentsPagesWithContext), varargs...)
}

// DescribeRegistrationAttachmentsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationAttachmentsRequest(arg0 *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput) (*request.Request, *pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationAttachmentsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput)
	return ret0, ret1
}

// DescribeRegistrationAttachmentsRequest indicates an expected call of DescribeRegistrationAttachmentsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationAttachmentsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationAttachmentsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationAttachmentsRequest), arg0)
}

// DescribeRegistrationAttachmentsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationAttachmentsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationAttachmentsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationAttachmentsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationAttachmentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationAttachmentsWithContext indicates an expected call of DescribeRegistrationAttachmentsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationAttachmentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationAttachmentsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationAttachmentsWithContext), varargs...)
}

// DescribeRegistrationFieldDefinitions mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldDefinitions(arg0 *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput) (*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldDefinitions", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationFieldDefinitions indicates an expected call of DescribeRegistrationFieldDefinitions.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldDefinitions", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldDefinitions), arg0)
}

// DescribeRegistrationFieldDefinitionsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldDefinitionsPages(arg0 *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput, arg1 func(*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldDefinitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationFieldDefinitionsPages indicates an expected call of DescribeRegistrationFieldDefinitionsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldDefinitionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldDefinitionsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldDefinitionsPages), arg0, arg1)
}

// DescribeRegistrationFieldDefinitionsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldDefinitionsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput, arg2 func(*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldDefinitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationFieldDefinitionsPagesWithContext indicates an expected call of DescribeRegistrationFieldDefinitionsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldDefinitionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldDefinitionsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldDefinitionsPagesWithContext), varargs...)
}

// DescribeRegistrationFieldDefinitionsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldDefinitionsRequest(arg0 *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput) (*request.Request, *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput)
	return ret0, ret1
}

// DescribeRegistrationFieldDefinitionsRequest indicates an expected call of DescribeRegistrationFieldDefinitionsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldDefinitionsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldDefinitionsRequest), arg0)
}

// DescribeRegistrationFieldDefinitionsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldDefinitionsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationFieldDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationFieldDefinitionsWithContext indicates an expected call of DescribeRegistrationFieldDefinitionsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldDefinitionsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldDefinitionsWithContext), varargs...)
}

// DescribeRegistrationFieldValues mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldValues(arg0 *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput) (*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldValues", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationFieldValues indicates an expected call of DescribeRegistrationFieldValues.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldValues", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldValues), arg0)
}

// DescribeRegistrationFieldValuesPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldValuesPages(arg0 *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput, arg1 func(*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldValuesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationFieldValuesPages indicates an expected call of DescribeRegistrationFieldValuesPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldValuesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldValuesPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldValuesPages), arg0, arg1)
}

// DescribeRegistrationFieldValuesPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldValuesPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput, arg2 func(*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldValuesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationFieldValuesPagesWithContext indicates an expected call of DescribeRegistrationFieldValuesPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldValuesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldValuesPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldValuesPagesWithContext), varargs...)
}

// DescribeRegistrationFieldValuesRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldValuesRequest(arg0 *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput) (*request.Request, *pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldValuesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput)
	return ret0, ret1
}

// DescribeRegistrationFieldValuesRequest indicates an expected call of DescribeRegistrationFieldValuesRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldValuesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldValuesRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldValuesRequest), arg0)
}

// DescribeRegistrationFieldValuesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationFieldValuesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationFieldValuesInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationFieldValuesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationFieldValuesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationFieldValuesWithContext indicates an expected call of DescribeRegistrationFieldValuesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationFieldValuesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationFieldValuesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationFieldValuesWithContext), varargs...)
}

// DescribeRegistrationSectionDefinitions mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationSectionDefinitions(arg0 *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput) (*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationSectionDefinitions", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationSectionDefinitions indicates an expected call of DescribeRegistrationSectionDefinitions.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationSectionDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationSectionDefinitions", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationSectionDefinitions), arg0)
}

// DescribeRegistrationSectionDefinitionsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationSectionDefinitionsPages(arg0 *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput, arg1 func(*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationSectionDefinitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationSectionDefinitionsPages indicates an expected call of DescribeRegistrationSectionDefinitionsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationSectionDefinitionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationSectionDefinitionsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationSectionDefinitionsPages), arg0, arg1)
}

// DescribeRegistrationSectionDefinitionsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationSectionDefinitionsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput, arg2 func(*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationSectionDefinitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationSectionDefinitionsPagesWithContext indicates an expected call of DescribeRegistrationSectionDefinitionsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationSectionDefinitionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationSectionDefinitionsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationSectionDefinitionsPagesWithContext), varargs...)
}

// DescribeRegistrationSectionDefinitionsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationSectionDefinitionsRequest(arg0 *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput) (*request.Request, *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationSectionDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput)
	return ret0, ret1
}

// DescribeRegistrationSectionDefinitionsRequest indicates an expected call of DescribeRegistrationSectionDefinitionsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationSectionDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationSectionDefinitionsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationSectionDefinitionsRequest), arg0)
}

// DescribeRegistrationSectionDefinitionsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationSectionDefinitionsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationSectionDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationSectionDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationSectionDefinitionsWithContext indicates an expected call of DescribeRegistrationSectionDefinitionsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationSectionDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationSectionDefinitionsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationSectionDefinitionsWithContext), varargs...)
}

// DescribeRegistrationTypeDefinitions mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationTypeDefinitions(arg0 *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput) (*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationTypeDefinitions", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationTypeDefinitions indicates an expected call of DescribeRegistrationTypeDefinitions.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationTypeDefinitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationTypeDefinitions", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationTypeDefinitions), arg0)
}

// DescribeRegistrationTypeDefinitionsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationTypeDefinitionsPages(arg0 *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput, arg1 func(*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationTypeDefinitionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationTypeDefinitionsPages indicates an expected call of DescribeRegistrationTypeDefinitionsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationTypeDefinitionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationTypeDefinitionsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationTypeDefinitionsPages), arg0, arg1)
}

// DescribeRegistrationTypeDefinitionsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationTypeDefinitionsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput, arg2 func(*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationTypeDefinitionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationTypeDefinitionsPagesWithContext indicates an expected call of DescribeRegistrationTypeDefinitionsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationTypeDefinitionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationTypeDefinitionsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationTypeDefinitionsPagesWithContext), varargs...)
}

// DescribeRegistrationTypeDefinitionsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationTypeDefinitionsRequest(arg0 *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput) (*request.Request, *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationTypeDefinitionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput)
	return ret0, ret1
}

// DescribeRegistrationTypeDefinitionsRequest indicates an expected call of DescribeRegistrationTypeDefinitionsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationTypeDefinitionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationTypeDefinitionsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationTypeDefinitionsRequest), arg0)
}

// DescribeRegistrationTypeDefinitionsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationTypeDefinitionsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationTypeDefinitionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationTypeDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationTypeDefinitionsWithContext indicates an expected call of DescribeRegistrationTypeDefinitionsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationTypeDefinitionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationTypeDefinitionsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationTypeDefinitionsWithContext), varargs...)
}

// DescribeRegistrationVersions mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationVersions(arg0 *pinpointsmsvoicev2.DescribeRegistrationVersionsInput) (*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationVersions", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationVersions indicates an expected call of DescribeRegistrationVersions.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationVersions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationVersions", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationVersions), arg0)
}

// DescribeRegistrationVersionsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationVersionsPages(arg0 *pinpointsmsvoicev2.DescribeRegistrationVersionsInput, arg1 func(*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationVersionsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationVersionsPages indicates an expected call of DescribeRegistrationVersionsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationVersionsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationVersionsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationVersionsPages), arg0, arg1)
}

// DescribeRegistrationVersionsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationVersionsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationVersionsInput, arg2 func(*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationVersionsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationVersionsPagesWithContext indicates an expected call of DescribeRegistrationVersionsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationVersionsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationVersionsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationVersionsPagesWithContext), varargs...)
}

// DescribeRegistrationVersionsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationVersionsRequest(arg0 *pinpointsmsvoicev2.DescribeRegistrationVersionsInput) (*request.Request, *pinpointsmsvoicev2.DescribeRegistrationVersionsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationVersionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput)
	return ret0, ret1
}

// DescribeRegistrationVersionsRequest indicates an expected call of DescribeRegistrationVersionsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationVersionsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationVersionsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationVersionsRequest), arg0)
}

// DescribeRegistrationVersionsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationVersionsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationVersionsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationVersionsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationVersionsWithContext indicates an expected call of DescribeRegistrationVersionsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationVersionsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationVersionsWithContext), varargs...)
}

// DescribeRegistrations mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrations(arg0 *pinpointsmsvoicev2.DescribeRegistrationsInput) (*pinpointsmsvoicev2.DescribeRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrations", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrations indicates an expected call of DescribeRegistrations.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrations", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrations), arg0)
}

// DescribeRegistrationsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationsPages(arg0 *pinpointsmsvoicev2.DescribeRegistrationsInput, arg1 func(*pinpointsmsvoicev2.DescribeRegistrationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationsPages indicates an expected call of DescribeRegistrationsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationsPages), arg0, arg1)
}

// DescribeRegistrationsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationsInput, arg2 func(*pinpointsmsvoicev2.DescribeRegistrationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeRegistrationsPagesWithContext indicates an expected call of DescribeRegistrationsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationsPagesWithContext), varargs...)
}

// DescribeRegistrationsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationsRequest(arg0 *pinpointsmsvoicev2.DescribeRegistrationsInput) (*request.Request, *pinpointsmsvoicev2.DescribeRegistrationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRegistrationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeRegistrationsOutput)
	return ret0, ret1
}

// DescribeRegistrationsRequest indicates an expected call of DescribeRegistrationsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationsRequest), arg0)
}

// DescribeRegistrationsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeRegistrationsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeRegistrationsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeRegistrationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRegistrationsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeRegistrationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRegistrationsWithContext indicates an expected call of DescribeRegistrationsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeRegistrationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRegistrationsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeRegistrationsWithContext), varargs...)
}

// DescribeSenderIds mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSenderIds(arg0 *pinpointsmsvoicev2.DescribeSenderIdsInput) (*pinpointsmsvoicev2.DescribeSenderIdsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSenderIds", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeSenderIdsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSenderIds indicates an expected call of DescribeSenderIds.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSenderIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSenderIds", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSenderIds), arg0)
}

// DescribeSenderIdsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSenderIdsPages(arg0 *pinpointsmsvoicev2.DescribeSenderIdsInput, arg1 func(*pinpointsmsvoicev2.DescribeSenderIdsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSenderIdsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSenderIdsPages indicates an expected call of DescribeSenderIdsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSenderIdsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSenderIdsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSenderIdsPages), arg0, arg1)
}

// DescribeSenderIdsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSenderIdsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeSenderIdsInput, arg2 func(*pinpointsmsvoicev2.DescribeSenderIdsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSenderIdsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSenderIdsPagesWithContext indicates an expected call of DescribeSenderIdsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSenderIdsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSenderIdsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSenderIdsPagesWithContext), varargs...)
}

// DescribeSenderIdsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSenderIdsRequest(arg0 *pinpointsmsvoicev2.DescribeSenderIdsInput) (*request.Request, *pinpointsmsvoicev2.DescribeSenderIdsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSenderIdsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeSenderIdsOutput)
	return ret0, ret1
}

// DescribeSenderIdsRequest indicates an expected call of DescribeSenderIdsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSenderIdsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSenderIdsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSenderIdsRequest), arg0)
}

// DescribeSenderIdsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSenderIdsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeSenderIdsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeSenderIdsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSenderIdsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeSenderIdsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSenderIdsWithContext indicates an expected call of DescribeSenderIdsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSenderIdsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSenderIdsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSenderIdsWithContext), varargs...)
}

// DescribeSpendLimits mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSpendLimits(arg0 *pinpointsmsvoicev2.DescribeSpendLimitsInput) (*pinpointsmsvoicev2.DescribeSpendLimitsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSpendLimits", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeSpendLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpendLimits indicates an expected call of DescribeSpendLimits.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSpendLimits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpendLimits", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSpendLimits), arg0)
}

// DescribeSpendLimitsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSpendLimitsPages(arg0 *pinpointsmsvoicev2.DescribeSpendLimitsInput, arg1 func(*pinpointsmsvoicev2.DescribeSpendLimitsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSpendLimitsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSpendLimitsPages indicates an expected call of DescribeSpendLimitsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSpendLimitsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpendLimitsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSpendLimitsPages), arg0, arg1)
}

// DescribeSpendLimitsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSpendLimitsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeSpendLimitsInput, arg2 func(*pinpointsmsvoicev2.DescribeSpendLimitsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpendLimitsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeSpendLimitsPagesWithContext indicates an expected call of DescribeSpendLimitsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSpendLimitsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpendLimitsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSpendLimitsPagesWithContext), varargs...)
}

// DescribeSpendLimitsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSpendLimitsRequest(arg0 *pinpointsmsvoicev2.DescribeSpendLimitsInput) (*request.Request, *pinpointsmsvoicev2.DescribeSpendLimitsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSpendLimitsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeSpendLimitsOutput)
	return ret0, ret1
}

// DescribeSpendLimitsRequest indicates an expected call of DescribeSpendLimitsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSpendLimitsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpendLimitsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSpendLimitsRequest), arg0)
}

// DescribeSpendLimitsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeSpendLimitsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeSpendLimitsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeSpendLimitsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeSpendLimitsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeSpendLimitsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSpendLimitsWithContext indicates an expected call of DescribeSpendLimitsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeSpendLimitsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSpendLimitsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeSpendLimitsWithContext), varargs...)
}

// DescribeVerifiedDestinationNumbers mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeVerifiedDestinationNumbers(arg0 *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput) (*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVerifiedDestinationNumbers", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVerifiedDestinationNumbers indicates an expected call of DescribeVerifiedDestinationNumbers.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeVerifiedDestinationNumbers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedDestinationNumbers", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeVerifiedDestinationNumbers), arg0)
}

// DescribeVerifiedDestinationNumbersPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeVerifiedDestinationNumbersPages(arg0 *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput, arg1 func(*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVerifiedDestinationNumbersPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeVerifiedDestinationNumbersPages indicates an expected call of DescribeVerifiedDestinationNumbersPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeVerifiedDestinationNumbersPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedDestinationNumbersPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeVerifiedDestinationNumbersPages), arg0, arg1)
}

// DescribeVerifiedDestinationNumbersPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeVerifiedDestinationNumbersPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput, arg2 func(*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVerifiedDestinationNumbersPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeVerifiedDestinationNumbersPagesWithContext indicates an expected call of DescribeVerifiedDestinationNumbersPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeVerifiedDestinationNumbersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedDestinationNumbersPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeVerifiedDestinationNumbersPagesWithContext), varargs...)
}

// DescribeVerifiedDestinationNumbersRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeVerifiedDestinationNumbersRequest(arg0 *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput) (*request.Request, *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeVerifiedDestinationNumbersRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput)
	return ret0, ret1
}

// DescribeVerifiedDestinationNumbersRequest indicates an expected call of DescribeVerifiedDestinationNumbersRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeVerifiedDestinationNumbersRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedDestinationNumbersRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeVerifiedDestinationNumbersRequest), arg0)
}

// DescribeVerifiedDestinationNumbersWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DescribeVerifiedDestinationNumbersWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeVerifiedDestinationNumbersWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DescribeVerifiedDestinationNumbersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeVerifiedDestinationNumbersWithContext indicates an expected call of DescribeVerifiedDestinationNumbersWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DescribeVerifiedDestinationNumbersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeVerifiedDestinationNumbersWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DescribeVerifiedDestinationNumbersWithContext), varargs...)
}

// DisassociateOriginationIdentity mocks base method.
func (m *MockPinpointSMSVoiceV2API) DisassociateOriginationIdentity(arg0 *pinpointsmsvoicev2.DisassociateOriginationIdentityInput) (*pinpointsmsvoicev2.DisassociateOriginationIdentityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateOriginationIdentity", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DisassociateOriginationIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateOriginationIdentity indicates an expected call of DisassociateOriginationIdentity.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DisassociateOriginationIdentity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateOriginationIdentity", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DisassociateOriginationIdentity), arg0)
}

// DisassociateOriginationIdentityRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DisassociateOriginationIdentityRequest(arg0 *pinpointsmsvoicev2.DisassociateOriginationIdentityInput) (*request.Request, *pinpointsmsvoicev2.DisassociateOriginationIdentityOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateOriginationIdentityRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DisassociateOriginationIdentityOutput)
	return ret0, ret1
}

// DisassociateOriginationIdentityRequest indicates an expected call of DisassociateOriginationIdentityRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DisassociateOriginationIdentityRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateOriginationIdentityRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DisassociateOriginationIdentityRequest), arg0)
}

// DisassociateOriginationIdentityWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DisassociateOriginationIdentityWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DisassociateOriginationIdentityInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DisassociateOriginationIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateOriginationIdentityWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DisassociateOriginationIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateOriginationIdentityWithContext indicates an expected call of DisassociateOriginationIdentityWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DisassociateOriginationIdentityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateOriginationIdentityWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DisassociateOriginationIdentityWithContext), varargs...)
}

// DisassociateProtectConfiguration mocks base method.
func (m *MockPinpointSMSVoiceV2API) DisassociateProtectConfiguration(arg0 *pinpointsmsvoicev2.DisassociateProtectConfigurationInput) (*pinpointsmsvoicev2.DisassociateProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateProtectConfiguration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DisassociateProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateProtectConfiguration indicates an expected call of DisassociateProtectConfiguration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DisassociateProtectConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProtectConfiguration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DisassociateProtectConfiguration), arg0)
}

// DisassociateProtectConfigurationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DisassociateProtectConfigurationRequest(arg0 *pinpointsmsvoicev2.DisassociateProtectConfigurationInput) (*request.Request, *pinpointsmsvoicev2.DisassociateProtectConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisassociateProtectConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DisassociateProtectConfigurationOutput)
	return ret0, ret1
}

// DisassociateProtectConfigurationRequest indicates an expected call of DisassociateProtectConfigurationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DisassociateProtectConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProtectConfigurationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DisassociateProtectConfigurationRequest), arg0)
}

// DisassociateProtectConfigurationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DisassociateProtectConfigurationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DisassociateProtectConfigurationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DisassociateProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisassociateProtectConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DisassociateProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisassociateProtectConfigurationWithContext indicates an expected call of DisassociateProtectConfigurationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DisassociateProtectConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisassociateProtectConfigurationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DisassociateProtectConfigurationWithContext), varargs...)
}

// DiscardRegistrationVersion mocks base method.
func (m *MockPinpointSMSVoiceV2API) DiscardRegistrationVersion(arg0 *pinpointsmsvoicev2.DiscardRegistrationVersionInput) (*pinpointsmsvoicev2.DiscardRegistrationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardRegistrationVersion", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DiscardRegistrationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscardRegistrationVersion indicates an expected call of DiscardRegistrationVersion.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DiscardRegistrationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardRegistrationVersion", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DiscardRegistrationVersion), arg0)
}

// DiscardRegistrationVersionRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) DiscardRegistrationVersionRequest(arg0 *pinpointsmsvoicev2.DiscardRegistrationVersionInput) (*request.Request, *pinpointsmsvoicev2.DiscardRegistrationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardRegistrationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.DiscardRegistrationVersionOutput)
	return ret0, ret1
}

// DiscardRegistrationVersionRequest indicates an expected call of DiscardRegistrationVersionRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DiscardRegistrationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardRegistrationVersionRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DiscardRegistrationVersionRequest), arg0)
}

// DiscardRegistrationVersionWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) DiscardRegistrationVersionWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.DiscardRegistrationVersionInput, arg2 ...request.Option) (*pinpointsmsvoicev2.DiscardRegistrationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DiscardRegistrationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.DiscardRegistrationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscardRegistrationVersionWithContext indicates an expected call of DiscardRegistrationVersionWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) DiscardRegistrationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardRegistrationVersionWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).DiscardRegistrationVersionWithContext), varargs...)
}

// GetProtectConfigurationCountryRuleSet mocks base method.
func (m *MockPinpointSMSVoiceV2API) GetProtectConfigurationCountryRuleSet(arg0 *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetInput) (*pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtectConfigurationCountryRuleSet", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtectConfigurationCountryRuleSet indicates an expected call of GetProtectConfigurationCountryRuleSet.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) GetProtectConfigurationCountryRuleSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectConfigurationCountryRuleSet", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).GetProtectConfigurationCountryRuleSet), arg0)
}

// GetProtectConfigurationCountryRuleSetRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) GetProtectConfigurationCountryRuleSetRequest(arg0 *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetInput) (*request.Request, *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtectConfigurationCountryRuleSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput)
	return ret0, ret1
}

// GetProtectConfigurationCountryRuleSetRequest indicates an expected call of GetProtectConfigurationCountryRuleSetRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) GetProtectConfigurationCountryRuleSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectConfigurationCountryRuleSetRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).GetProtectConfigurationCountryRuleSetRequest), arg0)
}

// GetProtectConfigurationCountryRuleSetWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) GetProtectConfigurationCountryRuleSetWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetInput, arg2 ...request.Option) (*pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtectConfigurationCountryRuleSetWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.GetProtectConfigurationCountryRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProtectConfigurationCountryRuleSetWithContext indicates an expected call of GetProtectConfigurationCountryRuleSetWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) GetProtectConfigurationCountryRuleSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectConfigurationCountryRuleSetWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).GetProtectConfigurationCountryRuleSetWithContext), varargs...)
}

// ListPoolOriginationIdentities mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListPoolOriginationIdentities(arg0 *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput) (*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoolOriginationIdentities", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoolOriginationIdentities indicates an expected call of ListPoolOriginationIdentities.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListPoolOriginationIdentities(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoolOriginationIdentities", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListPoolOriginationIdentities), arg0)
}

// ListPoolOriginationIdentitiesPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListPoolOriginationIdentitiesPages(arg0 *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput, arg1 func(*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoolOriginationIdentitiesPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPoolOriginationIdentitiesPages indicates an expected call of ListPoolOriginationIdentitiesPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListPoolOriginationIdentitiesPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoolOriginationIdentitiesPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListPoolOriginationIdentitiesPages), arg0, arg1)
}

// ListPoolOriginationIdentitiesPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListPoolOriginationIdentitiesPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput, arg2 func(*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPoolOriginationIdentitiesPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPoolOriginationIdentitiesPagesWithContext indicates an expected call of ListPoolOriginationIdentitiesPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListPoolOriginationIdentitiesPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoolOriginationIdentitiesPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListPoolOriginationIdentitiesPagesWithContext), varargs...)
}

// ListPoolOriginationIdentitiesRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListPoolOriginationIdentitiesRequest(arg0 *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput) (*request.Request, *pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoolOriginationIdentitiesRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput)
	return ret0, ret1
}

// ListPoolOriginationIdentitiesRequest indicates an expected call of ListPoolOriginationIdentitiesRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListPoolOriginationIdentitiesRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoolOriginationIdentitiesRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListPoolOriginationIdentitiesRequest), arg0)
}

// ListPoolOriginationIdentitiesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListPoolOriginationIdentitiesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.ListPoolOriginationIdentitiesInput, arg2 ...request.Option) (*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPoolOriginationIdentitiesWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ListPoolOriginationIdentitiesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoolOriginationIdentitiesWithContext indicates an expected call of ListPoolOriginationIdentitiesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListPoolOriginationIdentitiesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoolOriginationIdentitiesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListPoolOriginationIdentitiesWithContext), varargs...)
}

// ListRegistrationAssociations mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListRegistrationAssociations(arg0 *pinpointsmsvoicev2.ListRegistrationAssociationsInput) (*pinpointsmsvoicev2.ListRegistrationAssociationsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistrationAssociations", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ListRegistrationAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistrationAssociations indicates an expected call of ListRegistrationAssociations.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListRegistrationAssociations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistrationAssociations", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListRegistrationAssociations), arg0)
}

// ListRegistrationAssociationsPages mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListRegistrationAssociationsPages(arg0 *pinpointsmsvoicev2.ListRegistrationAssociationsInput, arg1 func(*pinpointsmsvoicev2.ListRegistrationAssociationsOutput, bool) bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistrationAssociationsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegistrationAssociationsPages indicates an expected call of ListRegistrationAssociationsPages.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListRegistrationAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistrationAssociationsPages", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListRegistrationAssociationsPages), arg0, arg1)
}

// ListRegistrationAssociationsPagesWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListRegistrationAssociationsPagesWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.ListRegistrationAssociationsInput, arg2 func(*pinpointsmsvoicev2.ListRegistrationAssociationsOutput, bool) bool, arg3 ...request.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegistrationAssociationsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRegistrationAssociationsPagesWithContext indicates an expected call of ListRegistrationAssociationsPagesWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListRegistrationAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistrationAssociationsPagesWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListRegistrationAssociationsPagesWithContext), varargs...)
}

// ListRegistrationAssociationsRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListRegistrationAssociationsRequest(arg0 *pinpointsmsvoicev2.ListRegistrationAssociationsInput) (*request.Request, *pinpointsmsvoicev2.ListRegistrationAssociationsOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistrationAssociationsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.ListRegistrationAssociationsOutput)
	return ret0, ret1
}

// ListRegistrationAssociationsRequest indicates an expected call of ListRegistrationAssociationsRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListRegistrationAssociationsRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistrationAssociationsRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListRegistrationAssociationsRequest), arg0)
}

// ListRegistrationAssociationsWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListRegistrationAssociationsWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.ListRegistrationAssociationsInput, arg2 ...request.Option) (*pinpointsmsvoicev2.ListRegistrationAssociationsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRegistrationAssociationsWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ListRegistrationAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistrationAssociationsWithContext indicates an expected call of ListRegistrationAssociationsWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListRegistrationAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistrationAssociationsWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListRegistrationAssociationsWithContext), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListTagsForResource(arg0 *pinpointsmsvoicev2.ListTagsForResourceInput) (*pinpointsmsvoicev2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResource", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListTagsForResource), arg0)
}

// ListTagsForResourceRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListTagsForResourceRequest(arg0 *pinpointsmsvoicev2.ListTagsForResourceInput) (*request.Request, *pinpointsmsvoicev2.ListTagsForResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTagsForResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.ListTagsForResourceOutput)
	return ret0, ret1
}

// ListTagsForResourceRequest indicates an expected call of ListTagsForResourceRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListTagsForResourceRequest), arg0)
}

// ListTagsForResourceWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) ListTagsForResourceWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.ListTagsForResourceInput, arg2 ...request.Option) (*pinpointsmsvoicev2.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResourceWithContext indicates an expected call of ListTagsForResourceWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResourceWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ListTagsForResourceWithContext), varargs...)
}

// PutKeyword mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutKeyword(arg0 *pinpointsmsvoicev2.PutKeywordInput) (*pinpointsmsvoicev2.PutKeywordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKeyword", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.PutKeywordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutKeyword indicates an expected call of PutKeyword.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutKeyword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKeyword", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutKeyword), arg0)
}

// PutKeywordRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutKeywordRequest(arg0 *pinpointsmsvoicev2.PutKeywordInput) (*request.Request, *pinpointsmsvoicev2.PutKeywordOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutKeywordRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.PutKeywordOutput)
	return ret0, ret1
}

// PutKeywordRequest indicates an expected call of PutKeywordRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutKeywordRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKeywordRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutKeywordRequest), arg0)
}

// PutKeywordWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutKeywordWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.PutKeywordInput, arg2 ...request.Option) (*pinpointsmsvoicev2.PutKeywordOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutKeywordWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.PutKeywordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutKeywordWithContext indicates an expected call of PutKeywordWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutKeywordWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutKeywordWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutKeywordWithContext), varargs...)
}

// PutOptedOutNumber mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutOptedOutNumber(arg0 *pinpointsmsvoicev2.PutOptedOutNumberInput) (*pinpointsmsvoicev2.PutOptedOutNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOptedOutNumber", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.PutOptedOutNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutOptedOutNumber indicates an expected call of PutOptedOutNumber.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutOptedOutNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOptedOutNumber", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutOptedOutNumber), arg0)
}

// PutOptedOutNumberRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutOptedOutNumberRequest(arg0 *pinpointsmsvoicev2.PutOptedOutNumberInput) (*request.Request, *pinpointsmsvoicev2.PutOptedOutNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutOptedOutNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.PutOptedOutNumberOutput)
	return ret0, ret1
}

// PutOptedOutNumberRequest indicates an expected call of PutOptedOutNumberRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutOptedOutNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOptedOutNumberRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutOptedOutNumberRequest), arg0)
}

// PutOptedOutNumberWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutOptedOutNumberWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.PutOptedOutNumberInput, arg2 ...request.Option) (*pinpointsmsvoicev2.PutOptedOutNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutOptedOutNumberWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.PutOptedOutNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutOptedOutNumberWithContext indicates an expected call of PutOptedOutNumberWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutOptedOutNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutOptedOutNumberWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutOptedOutNumberWithContext), varargs...)
}

// PutRegistrationFieldValue mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutRegistrationFieldValue(arg0 *pinpointsmsvoicev2.PutRegistrationFieldValueInput) (*pinpointsmsvoicev2.PutRegistrationFieldValueOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRegistrationFieldValue", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.PutRegistrationFieldValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRegistrationFieldValue indicates an expected call of PutRegistrationFieldValue.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutRegistrationFieldValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRegistrationFieldValue", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutRegistrationFieldValue), arg0)
}

// PutRegistrationFieldValueRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutRegistrationFieldValueRequest(arg0 *pinpointsmsvoicev2.PutRegistrationFieldValueInput) (*request.Request, *pinpointsmsvoicev2.PutRegistrationFieldValueOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRegistrationFieldValueRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.PutRegistrationFieldValueOutput)
	return ret0, ret1
}

// PutRegistrationFieldValueRequest indicates an expected call of PutRegistrationFieldValueRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutRegistrationFieldValueRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRegistrationFieldValueRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutRegistrationFieldValueRequest), arg0)
}

// PutRegistrationFieldValueWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) PutRegistrationFieldValueWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.PutRegistrationFieldValueInput, arg2 ...request.Option) (*pinpointsmsvoicev2.PutRegistrationFieldValueOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRegistrationFieldValueWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.PutRegistrationFieldValueOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRegistrationFieldValueWithContext indicates an expected call of PutRegistrationFieldValueWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) PutRegistrationFieldValueWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRegistrationFieldValueWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).PutRegistrationFieldValueWithContext), varargs...)
}

// ReleasePhoneNumber mocks base method.
func (m *MockPinpointSMSVoiceV2API) ReleasePhoneNumber(arg0 *pinpointsmsvoicev2.ReleasePhoneNumberInput) (*pinpointsmsvoicev2.ReleasePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleasePhoneNumber", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ReleasePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleasePhoneNumber indicates an expected call of ReleasePhoneNumber.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ReleasePhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePhoneNumber", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ReleasePhoneNumber), arg0)
}

// ReleasePhoneNumberRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) ReleasePhoneNumberRequest(arg0 *pinpointsmsvoicev2.ReleasePhoneNumberInput) (*request.Request, *pinpointsmsvoicev2.ReleasePhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleasePhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.ReleasePhoneNumberOutput)
	return ret0, ret1
}

// ReleasePhoneNumberRequest indicates an expected call of ReleasePhoneNumberRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ReleasePhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePhoneNumberRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ReleasePhoneNumberRequest), arg0)
}

// ReleasePhoneNumberWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) ReleasePhoneNumberWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.ReleasePhoneNumberInput, arg2 ...request.Option) (*pinpointsmsvoicev2.ReleasePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleasePhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ReleasePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleasePhoneNumberWithContext indicates an expected call of ReleasePhoneNumberWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ReleasePhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePhoneNumberWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ReleasePhoneNumberWithContext), varargs...)
}

// ReleaseSenderId mocks base method.
func (m *MockPinpointSMSVoiceV2API) ReleaseSenderId(arg0 *pinpointsmsvoicev2.ReleaseSenderIdInput) (*pinpointsmsvoicev2.ReleaseSenderIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseSenderId", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ReleaseSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseSenderId indicates an expected call of ReleaseSenderId.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ReleaseSenderId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSenderId", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ReleaseSenderId), arg0)
}

// ReleaseSenderIdRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) ReleaseSenderIdRequest(arg0 *pinpointsmsvoicev2.ReleaseSenderIdInput) (*request.Request, *pinpointsmsvoicev2.ReleaseSenderIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseSenderIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.ReleaseSenderIdOutput)
	return ret0, ret1
}

// ReleaseSenderIdRequest indicates an expected call of ReleaseSenderIdRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ReleaseSenderIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSenderIdRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ReleaseSenderIdRequest), arg0)
}

// ReleaseSenderIdWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) ReleaseSenderIdWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.ReleaseSenderIdInput, arg2 ...request.Option) (*pinpointsmsvoicev2.ReleaseSenderIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReleaseSenderIdWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.ReleaseSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseSenderIdWithContext indicates an expected call of ReleaseSenderIdWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) ReleaseSenderIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseSenderIdWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).ReleaseSenderIdWithContext), varargs...)
}

// RequestPhoneNumber mocks base method.
func (m *MockPinpointSMSVoiceV2API) RequestPhoneNumber(arg0 *pinpointsmsvoicev2.RequestPhoneNumberInput) (*pinpointsmsvoicev2.RequestPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPhoneNumber", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.RequestPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPhoneNumber indicates an expected call of RequestPhoneNumber.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) RequestPhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPhoneNumber", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).RequestPhoneNumber), arg0)
}

// RequestPhoneNumberRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) RequestPhoneNumberRequest(arg0 *pinpointsmsvoicev2.RequestPhoneNumberInput) (*request.Request, *pinpointsmsvoicev2.RequestPhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.RequestPhoneNumberOutput)
	return ret0, ret1
}

// RequestPhoneNumberRequest indicates an expected call of RequestPhoneNumberRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) RequestPhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPhoneNumberRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).RequestPhoneNumberRequest), arg0)
}

// RequestPhoneNumberWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) RequestPhoneNumberWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.RequestPhoneNumberInput, arg2 ...request.Option) (*pinpointsmsvoicev2.RequestPhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestPhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.RequestPhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestPhoneNumberWithContext indicates an expected call of RequestPhoneNumberWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) RequestPhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPhoneNumberWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).RequestPhoneNumberWithContext), varargs...)
}

// RequestSenderId mocks base method.
func (m *MockPinpointSMSVoiceV2API) RequestSenderId(arg0 *pinpointsmsvoicev2.RequestSenderIdInput) (*pinpointsmsvoicev2.RequestSenderIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSenderId", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.RequestSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestSenderId indicates an expected call of RequestSenderId.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) RequestSenderId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSenderId", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).RequestSenderId), arg0)
}

// RequestSenderIdRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) RequestSenderIdRequest(arg0 *pinpointsmsvoicev2.RequestSenderIdInput) (*request.Request, *pinpointsmsvoicev2.RequestSenderIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestSenderIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.RequestSenderIdOutput)
	return ret0, ret1
}

// RequestSenderIdRequest indicates an expected call of RequestSenderIdRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) RequestSenderIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSenderIdRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).RequestSenderIdRequest), arg0)
}

// RequestSenderIdWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) RequestSenderIdWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.RequestSenderIdInput, arg2 ...request.Option) (*pinpointsmsvoicev2.RequestSenderIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequestSenderIdWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.RequestSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestSenderIdWithContext indicates an expected call of RequestSenderIdWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) RequestSenderIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestSenderIdWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).RequestSenderIdWithContext), varargs...)
}

// SendDestinationNumberVerificationCode mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendDestinationNumberVerificationCode(arg0 *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeInput) (*pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDestinationNumberVerificationCode", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDestinationNumberVerificationCode indicates an expected call of SendDestinationNumberVerificationCode.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendDestinationNumberVerificationCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDestinationNumberVerificationCode", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendDestinationNumberVerificationCode), arg0)
}

// SendDestinationNumberVerificationCodeRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendDestinationNumberVerificationCodeRequest(arg0 *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeInput) (*request.Request, *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDestinationNumberVerificationCodeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput)
	return ret0, ret1
}

// SendDestinationNumberVerificationCodeRequest indicates an expected call of SendDestinationNumberVerificationCodeRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendDestinationNumberVerificationCodeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDestinationNumberVerificationCodeRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendDestinationNumberVerificationCodeRequest), arg0)
}

// SendDestinationNumberVerificationCodeWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendDestinationNumberVerificationCodeWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SendDestinationNumberVerificationCodeInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendDestinationNumberVerificationCodeWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SendDestinationNumberVerificationCodeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDestinationNumberVerificationCodeWithContext indicates an expected call of SendDestinationNumberVerificationCodeWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendDestinationNumberVerificationCodeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDestinationNumberVerificationCodeWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendDestinationNumberVerificationCodeWithContext), varargs...)
}

// SendMediaMessage mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendMediaMessage(arg0 *pinpointsmsvoicev2.SendMediaMessageInput) (*pinpointsmsvoicev2.SendMediaMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMediaMessage", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SendMediaMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMediaMessage indicates an expected call of SendMediaMessage.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendMediaMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMediaMessage", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendMediaMessage), arg0)
}

// SendMediaMessageRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendMediaMessageRequest(arg0 *pinpointsmsvoicev2.SendMediaMessageInput) (*request.Request, *pinpointsmsvoicev2.SendMediaMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMediaMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SendMediaMessageOutput)
	return ret0, ret1
}

// SendMediaMessageRequest indicates an expected call of SendMediaMessageRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendMediaMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMediaMessageRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendMediaMessageRequest), arg0)
}

// SendMediaMessageWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendMediaMessageWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SendMediaMessageInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SendMediaMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMediaMessageWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SendMediaMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMediaMessageWithContext indicates an expected call of SendMediaMessageWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendMediaMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMediaMessageWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendMediaMessageWithContext), varargs...)
}

// SendTextMessage mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendTextMessage(arg0 *pinpointsmsvoicev2.SendTextMessageInput) (*pinpointsmsvoicev2.SendTextMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTextMessage", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SendTextMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTextMessage indicates an expected call of SendTextMessage.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendTextMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextMessage", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendTextMessage), arg0)
}

// SendTextMessageRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendTextMessageRequest(arg0 *pinpointsmsvoicev2.SendTextMessageInput) (*request.Request, *pinpointsmsvoicev2.SendTextMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTextMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SendTextMessageOutput)
	return ret0, ret1
}

// SendTextMessageRequest indicates an expected call of SendTextMessageRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendTextMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextMessageRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendTextMessageRequest), arg0)
}

// SendTextMessageWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendTextMessageWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SendTextMessageInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SendTextMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendTextMessageWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SendTextMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTextMessageWithContext indicates an expected call of SendTextMessageWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendTextMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextMessageWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendTextMessageWithContext), varargs...)
}

// SendVoiceMessage mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendVoiceMessage(arg0 *pinpointsmsvoicev2.SendVoiceMessageInput) (*pinpointsmsvoicev2.SendVoiceMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVoiceMessage", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SendVoiceMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendVoiceMessage indicates an expected call of SendVoiceMessage.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendVoiceMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVoiceMessage", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendVoiceMessage), arg0)
}

// SendVoiceMessageRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendVoiceMessageRequest(arg0 *pinpointsmsvoicev2.SendVoiceMessageInput) (*request.Request, *pinpointsmsvoicev2.SendVoiceMessageOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVoiceMessageRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SendVoiceMessageOutput)
	return ret0, ret1
}

// SendVoiceMessageRequest indicates an expected call of SendVoiceMessageRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendVoiceMessageRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVoiceMessageRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendVoiceMessageRequest), arg0)
}

// SendVoiceMessageWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SendVoiceMessageWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SendVoiceMessageInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SendVoiceMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendVoiceMessageWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SendVoiceMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendVoiceMessageWithContext indicates an expected call of SendVoiceMessageWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SendVoiceMessageWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVoiceMessageWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SendVoiceMessageWithContext), varargs...)
}

// SetAccountDefaultProtectConfiguration mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetAccountDefaultProtectConfiguration(arg0 *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationInput) (*pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountDefaultProtectConfiguration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccountDefaultProtectConfiguration indicates an expected call of SetAccountDefaultProtectConfiguration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetAccountDefaultProtectConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountDefaultProtectConfiguration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetAccountDefaultProtectConfiguration), arg0)
}

// SetAccountDefaultProtectConfigurationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetAccountDefaultProtectConfigurationRequest(arg0 *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationInput) (*request.Request, *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountDefaultProtectConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput)
	return ret0, ret1
}

// SetAccountDefaultProtectConfigurationRequest indicates an expected call of SetAccountDefaultProtectConfigurationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetAccountDefaultProtectConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountDefaultProtectConfigurationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetAccountDefaultProtectConfigurationRequest), arg0)
}

// SetAccountDefaultProtectConfigurationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetAccountDefaultProtectConfigurationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAccountDefaultProtectConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetAccountDefaultProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccountDefaultProtectConfigurationWithContext indicates an expected call of SetAccountDefaultProtectConfigurationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetAccountDefaultProtectConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountDefaultProtectConfigurationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetAccountDefaultProtectConfigurationWithContext), varargs...)
}

// SetDefaultMessageType mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetDefaultMessageType(arg0 *pinpointsmsvoicev2.SetDefaultMessageTypeInput) (*pinpointsmsvoicev2.SetDefaultMessageTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultMessageType", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetDefaultMessageTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultMessageType indicates an expected call of SetDefaultMessageType.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetDefaultMessageType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultMessageType", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetDefaultMessageType), arg0)
}

// SetDefaultMessageTypeRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetDefaultMessageTypeRequest(arg0 *pinpointsmsvoicev2.SetDefaultMessageTypeInput) (*request.Request, *pinpointsmsvoicev2.SetDefaultMessageTypeOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultMessageTypeRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SetDefaultMessageTypeOutput)
	return ret0, ret1
}

// SetDefaultMessageTypeRequest indicates an expected call of SetDefaultMessageTypeRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetDefaultMessageTypeRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultMessageTypeRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetDefaultMessageTypeRequest), arg0)
}

// SetDefaultMessageTypeWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetDefaultMessageTypeWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SetDefaultMessageTypeInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SetDefaultMessageTypeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDefaultMessageTypeWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetDefaultMessageTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultMessageTypeWithContext indicates an expected call of SetDefaultMessageTypeWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetDefaultMessageTypeWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultMessageTypeWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetDefaultMessageTypeWithContext), varargs...)
}

// SetDefaultSenderId mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetDefaultSenderId(arg0 *pinpointsmsvoicev2.SetDefaultSenderIdInput) (*pinpointsmsvoicev2.SetDefaultSenderIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultSenderId", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetDefaultSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultSenderId indicates an expected call of SetDefaultSenderId.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetDefaultSenderId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultSenderId", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetDefaultSenderId), arg0)
}

// SetDefaultSenderIdRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetDefaultSenderIdRequest(arg0 *pinpointsmsvoicev2.SetDefaultSenderIdInput) (*request.Request, *pinpointsmsvoicev2.SetDefaultSenderIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultSenderIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SetDefaultSenderIdOutput)
	return ret0, ret1
}

// SetDefaultSenderIdRequest indicates an expected call of SetDefaultSenderIdRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetDefaultSenderIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultSenderIdRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetDefaultSenderIdRequest), arg0)
}

// SetDefaultSenderIdWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetDefaultSenderIdWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SetDefaultSenderIdInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SetDefaultSenderIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetDefaultSenderIdWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetDefaultSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultSenderIdWithContext indicates an expected call of SetDefaultSenderIdWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetDefaultSenderIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultSenderIdWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetDefaultSenderIdWithContext), varargs...)
}

// SetMediaMessageSpendLimitOverride mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetMediaMessageSpendLimitOverride(arg0 *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideInput) (*pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMediaMessageSpendLimitOverride", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMediaMessageSpendLimitOverride indicates an expected call of SetMediaMessageSpendLimitOverride.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetMediaMessageSpendLimitOverride(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMediaMessageSpendLimitOverride", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetMediaMessageSpendLimitOverride), arg0)
}

// SetMediaMessageSpendLimitOverrideRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetMediaMessageSpendLimitOverrideRequest(arg0 *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideInput) (*request.Request, *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMediaMessageSpendLimitOverrideRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput)
	return ret0, ret1
}

// SetMediaMessageSpendLimitOverrideRequest indicates an expected call of SetMediaMessageSpendLimitOverrideRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetMediaMessageSpendLimitOverrideRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMediaMessageSpendLimitOverrideRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetMediaMessageSpendLimitOverrideRequest), arg0)
}

// SetMediaMessageSpendLimitOverrideWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetMediaMessageSpendLimitOverrideWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMediaMessageSpendLimitOverrideWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetMediaMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetMediaMessageSpendLimitOverrideWithContext indicates an expected call of SetMediaMessageSpendLimitOverrideWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetMediaMessageSpendLimitOverrideWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMediaMessageSpendLimitOverrideWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetMediaMessageSpendLimitOverrideWithContext), varargs...)
}

// SetTextMessageSpendLimitOverride mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetTextMessageSpendLimitOverride(arg0 *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideInput) (*pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTextMessageSpendLimitOverride", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTextMessageSpendLimitOverride indicates an expected call of SetTextMessageSpendLimitOverride.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetTextMessageSpendLimitOverride(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTextMessageSpendLimitOverride", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetTextMessageSpendLimitOverride), arg0)
}

// SetTextMessageSpendLimitOverrideRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetTextMessageSpendLimitOverrideRequest(arg0 *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideInput) (*request.Request, *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTextMessageSpendLimitOverrideRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput)
	return ret0, ret1
}

// SetTextMessageSpendLimitOverrideRequest indicates an expected call of SetTextMessageSpendLimitOverrideRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetTextMessageSpendLimitOverrideRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTextMessageSpendLimitOverrideRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetTextMessageSpendLimitOverrideRequest), arg0)
}

// SetTextMessageSpendLimitOverrideWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetTextMessageSpendLimitOverrideWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetTextMessageSpendLimitOverrideWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetTextMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTextMessageSpendLimitOverrideWithContext indicates an expected call of SetTextMessageSpendLimitOverrideWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetTextMessageSpendLimitOverrideWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTextMessageSpendLimitOverrideWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetTextMessageSpendLimitOverrideWithContext), varargs...)
}

// SetVoiceMessageSpendLimitOverride mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetVoiceMessageSpendLimitOverride(arg0 *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideInput) (*pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVoiceMessageSpendLimitOverride", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVoiceMessageSpendLimitOverride indicates an expected call of SetVoiceMessageSpendLimitOverride.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetVoiceMessageSpendLimitOverride(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVoiceMessageSpendLimitOverride", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetVoiceMessageSpendLimitOverride), arg0)
}

// SetVoiceMessageSpendLimitOverrideRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetVoiceMessageSpendLimitOverrideRequest(arg0 *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideInput) (*request.Request, *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVoiceMessageSpendLimitOverrideRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput)
	return ret0, ret1
}

// SetVoiceMessageSpendLimitOverrideRequest indicates an expected call of SetVoiceMessageSpendLimitOverrideRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetVoiceMessageSpendLimitOverrideRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVoiceMessageSpendLimitOverrideRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetVoiceMessageSpendLimitOverrideRequest), arg0)
}

// SetVoiceMessageSpendLimitOverrideWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SetVoiceMessageSpendLimitOverrideWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetVoiceMessageSpendLimitOverrideWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SetVoiceMessageSpendLimitOverrideOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVoiceMessageSpendLimitOverrideWithContext indicates an expected call of SetVoiceMessageSpendLimitOverrideWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SetVoiceMessageSpendLimitOverrideWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVoiceMessageSpendLimitOverrideWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SetVoiceMessageSpendLimitOverrideWithContext), varargs...)
}

// SubmitRegistrationVersion mocks base method.
func (m *MockPinpointSMSVoiceV2API) SubmitRegistrationVersion(arg0 *pinpointsmsvoicev2.SubmitRegistrationVersionInput) (*pinpointsmsvoicev2.SubmitRegistrationVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRegistrationVersion", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SubmitRegistrationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRegistrationVersion indicates an expected call of SubmitRegistrationVersion.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SubmitRegistrationVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRegistrationVersion", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SubmitRegistrationVersion), arg0)
}

// SubmitRegistrationVersionRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) SubmitRegistrationVersionRequest(arg0 *pinpointsmsvoicev2.SubmitRegistrationVersionInput) (*request.Request, *pinpointsmsvoicev2.SubmitRegistrationVersionOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitRegistrationVersionRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.SubmitRegistrationVersionOutput)
	return ret0, ret1
}

// SubmitRegistrationVersionRequest indicates an expected call of SubmitRegistrationVersionRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SubmitRegistrationVersionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRegistrationVersionRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SubmitRegistrationVersionRequest), arg0)
}

// SubmitRegistrationVersionWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) SubmitRegistrationVersionWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.SubmitRegistrationVersionInput, arg2 ...request.Option) (*pinpointsmsvoicev2.SubmitRegistrationVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubmitRegistrationVersionWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.SubmitRegistrationVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitRegistrationVersionWithContext indicates an expected call of SubmitRegistrationVersionWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) SubmitRegistrationVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitRegistrationVersionWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).SubmitRegistrationVersionWithContext), varargs...)
}

// TagResource mocks base method.
func (m *MockPinpointSMSVoiceV2API) TagResource(arg0 *pinpointsmsvoicev2.TagResourceInput) (*pinpointsmsvoicev2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResource", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) TagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).TagResource), arg0)
}

// TagResourceRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) TagResourceRequest(arg0 *pinpointsmsvoicev2.TagResourceInput) (*request.Request, *pinpointsmsvoicev2.TagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.TagResourceOutput)
	return ret0, ret1
}

// TagResourceRequest indicates an expected call of TagResourceRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) TagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).TagResourceRequest), arg0)
}

// TagResourceWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) TagResourceWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.TagResourceInput, arg2 ...request.Option) (*pinpointsmsvoicev2.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResourceWithContext indicates an expected call of TagResourceWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) TagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResourceWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).TagResourceWithContext), varargs...)
}

// UntagResource mocks base method.
func (m *MockPinpointSMSVoiceV2API) UntagResource(arg0 *pinpointsmsvoicev2.UntagResourceInput) (*pinpointsmsvoicev2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResource", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UntagResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UntagResource), arg0)
}

// UntagResourceRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) UntagResourceRequest(arg0 *pinpointsmsvoicev2.UntagResourceInput) (*request.Request, *pinpointsmsvoicev2.UntagResourceOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagResourceRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.UntagResourceOutput)
	return ret0, ret1
}

// UntagResourceRequest indicates an expected call of UntagResourceRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UntagResourceRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UntagResourceRequest), arg0)
}

// UntagResourceWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) UntagResourceWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.UntagResourceInput, arg2 ...request.Option) (*pinpointsmsvoicev2.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResourceWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResourceWithContext indicates an expected call of UntagResourceWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UntagResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResourceWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UntagResourceWithContext), varargs...)
}

// UpdateEventDestination mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateEventDestination(arg0 *pinpointsmsvoicev2.UpdateEventDestinationInput) (*pinpointsmsvoicev2.UpdateEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventDestination", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdateEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventDestination indicates an expected call of UpdateEventDestination.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateEventDestination(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventDestination", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateEventDestination), arg0)
}

// UpdateEventDestinationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateEventDestinationRequest(arg0 *pinpointsmsvoicev2.UpdateEventDestinationInput) (*request.Request, *pinpointsmsvoicev2.UpdateEventDestinationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventDestinationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.UpdateEventDestinationOutput)
	return ret0, ret1
}

// UpdateEventDestinationRequest indicates an expected call of UpdateEventDestinationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateEventDestinationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventDestinationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateEventDestinationRequest), arg0)
}

// UpdateEventDestinationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateEventDestinationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.UpdateEventDestinationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.UpdateEventDestinationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEventDestinationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdateEventDestinationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventDestinationWithContext indicates an expected call of UpdateEventDestinationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateEventDestinationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventDestinationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateEventDestinationWithContext), varargs...)
}

// UpdatePhoneNumber mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdatePhoneNumber(arg0 *pinpointsmsvoicev2.UpdatePhoneNumberInput) (*pinpointsmsvoicev2.UpdatePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneNumber", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdatePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoneNumber indicates an expected call of UpdatePhoneNumber.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdatePhoneNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumber", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdatePhoneNumber), arg0)
}

// UpdatePhoneNumberRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdatePhoneNumberRequest(arg0 *pinpointsmsvoicev2.UpdatePhoneNumberInput) (*request.Request, *pinpointsmsvoicev2.UpdatePhoneNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.UpdatePhoneNumberOutput)
	return ret0, ret1
}

// UpdatePhoneNumberRequest indicates an expected call of UpdatePhoneNumberRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdatePhoneNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumberRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdatePhoneNumberRequest), arg0)
}

// UpdatePhoneNumberWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdatePhoneNumberWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.UpdatePhoneNumberInput, arg2 ...request.Option) (*pinpointsmsvoicev2.UpdatePhoneNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePhoneNumberWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdatePhoneNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoneNumberWithContext indicates an expected call of UpdatePhoneNumberWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdatePhoneNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumberWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdatePhoneNumberWithContext), varargs...)
}

// UpdatePool mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdatePool(arg0 *pinpointsmsvoicev2.UpdatePoolInput) (*pinpointsmsvoicev2.UpdatePoolOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePool", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdatePoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePool indicates an expected call of UpdatePool.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdatePool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePool", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdatePool), arg0)
}

// UpdatePoolRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdatePoolRequest(arg0 *pinpointsmsvoicev2.UpdatePoolInput) (*request.Request, *pinpointsmsvoicev2.UpdatePoolOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePoolRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.UpdatePoolOutput)
	return ret0, ret1
}

// UpdatePoolRequest indicates an expected call of UpdatePoolRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdatePoolRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoolRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdatePoolRequest), arg0)
}

// UpdatePoolWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdatePoolWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.UpdatePoolInput, arg2 ...request.Option) (*pinpointsmsvoicev2.UpdatePoolOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePoolWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdatePoolOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePoolWithContext indicates an expected call of UpdatePoolWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdatePoolWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoolWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdatePoolWithContext), varargs...)
}

// UpdateProtectConfiguration mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateProtectConfiguration(arg0 *pinpointsmsvoicev2.UpdateProtectConfigurationInput) (*pinpointsmsvoicev2.UpdateProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProtectConfiguration", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdateProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProtectConfiguration indicates an expected call of UpdateProtectConfiguration.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateProtectConfiguration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectConfiguration", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateProtectConfiguration), arg0)
}

// UpdateProtectConfigurationCountryRuleSet mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateProtectConfigurationCountryRuleSet(arg0 *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetInput) (*pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProtectConfigurationCountryRuleSet", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProtectConfigurationCountryRuleSet indicates an expected call of UpdateProtectConfigurationCountryRuleSet.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateProtectConfigurationCountryRuleSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectConfigurationCountryRuleSet", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateProtectConfigurationCountryRuleSet), arg0)
}

// UpdateProtectConfigurationCountryRuleSetRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateProtectConfigurationCountryRuleSetRequest(arg0 *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetInput) (*request.Request, *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProtectConfigurationCountryRuleSetRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput)
	return ret0, ret1
}

// UpdateProtectConfigurationCountryRuleSetRequest indicates an expected call of UpdateProtectConfigurationCountryRuleSetRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateProtectConfigurationCountryRuleSetRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectConfigurationCountryRuleSetRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateProtectConfigurationCountryRuleSetRequest), arg0)
}

// UpdateProtectConfigurationCountryRuleSetWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateProtectConfigurationCountryRuleSetWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetInput, arg2 ...request.Option) (*pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProtectConfigurationCountryRuleSetWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdateProtectConfigurationCountryRuleSetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProtectConfigurationCountryRuleSetWithContext indicates an expected call of UpdateProtectConfigurationCountryRuleSetWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateProtectConfigurationCountryRuleSetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectConfigurationCountryRuleSetWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateProtectConfigurationCountryRuleSetWithContext), varargs...)
}

// UpdateProtectConfigurationRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateProtectConfigurationRequest(arg0 *pinpointsmsvoicev2.UpdateProtectConfigurationInput) (*request.Request, *pinpointsmsvoicev2.UpdateProtectConfigurationOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProtectConfigurationRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.UpdateProtectConfigurationOutput)
	return ret0, ret1
}

// UpdateProtectConfigurationRequest indicates an expected call of UpdateProtectConfigurationRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateProtectConfigurationRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectConfigurationRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateProtectConfigurationRequest), arg0)
}

// UpdateProtectConfigurationWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateProtectConfigurationWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.UpdateProtectConfigurationInput, arg2 ...request.Option) (*pinpointsmsvoicev2.UpdateProtectConfigurationOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProtectConfigurationWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdateProtectConfigurationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProtectConfigurationWithContext indicates an expected call of UpdateProtectConfigurationWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateProtectConfigurationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectConfigurationWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateProtectConfigurationWithContext), varargs...)
}

// UpdateSenderId mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateSenderId(arg0 *pinpointsmsvoicev2.UpdateSenderIdInput) (*pinpointsmsvoicev2.UpdateSenderIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSenderId", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdateSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSenderId indicates an expected call of UpdateSenderId.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateSenderId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSenderId", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateSenderId), arg0)
}

// UpdateSenderIdRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateSenderIdRequest(arg0 *pinpointsmsvoicev2.UpdateSenderIdInput) (*request.Request, *pinpointsmsvoicev2.UpdateSenderIdOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSenderIdRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.UpdateSenderIdOutput)
	return ret0, ret1
}

// UpdateSenderIdRequest indicates an expected call of UpdateSenderIdRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateSenderIdRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSenderIdRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateSenderIdRequest), arg0)
}

// UpdateSenderIdWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) UpdateSenderIdWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.UpdateSenderIdInput, arg2 ...request.Option) (*pinpointsmsvoicev2.UpdateSenderIdOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSenderIdWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.UpdateSenderIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSenderIdWithContext indicates an expected call of UpdateSenderIdWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) UpdateSenderIdWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSenderIdWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).UpdateSenderIdWithContext), varargs...)
}

// VerifyDestinationNumber mocks base method.
func (m *MockPinpointSMSVoiceV2API) VerifyDestinationNumber(arg0 *pinpointsmsvoicev2.VerifyDestinationNumberInput) (*pinpointsmsvoicev2.VerifyDestinationNumberOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDestinationNumber", arg0)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.VerifyDestinationNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyDestinationNumber indicates an expected call of VerifyDestinationNumber.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) VerifyDestinationNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDestinationNumber", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).VerifyDestinationNumber), arg0)
}

// VerifyDestinationNumberRequest mocks base method.
func (m *MockPinpointSMSVoiceV2API) VerifyDestinationNumberRequest(arg0 *pinpointsmsvoicev2.VerifyDestinationNumberInput) (*request.Request, *pinpointsmsvoicev2.VerifyDestinationNumberOutput) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDestinationNumberRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*pinpointsmsvoicev2.VerifyDestinationNumberOutput)
	return ret0, ret1
}

// VerifyDestinationNumberRequest indicates an expected call of VerifyDestinationNumberRequest.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) VerifyDestinationNumberRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDestinationNumberRequest", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).VerifyDestinationNumberRequest), arg0)
}

// VerifyDestinationNumberWithContext mocks base method.
func (m *MockPinpointSMSVoiceV2API) VerifyDestinationNumberWithContext(arg0 aws.Context, arg1 *pinpointsmsvoicev2.VerifyDestinationNumberInput, arg2 ...request.Option) (*pinpointsmsvoicev2.VerifyDestinationNumberOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyDestinationNumberWithContext", varargs...)
	ret0, _ := ret[0].(*pinpointsmsvoicev2.VerifyDestinationNumberOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyDestinationNumberWithContext indicates an expected call of VerifyDestinationNumberWithContext.
func (mr *MockPinpointSMSVoiceV2APIMockRecorder) VerifyDestinationNumberWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDestinationNumberWithContext", reflect.TypeOf((*MockPinpointSMSVoiceV2API)(nil).VerifyDestinationNumberWithContext), varargs...)
}
